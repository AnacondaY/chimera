webpackJsonp([0],Array(331).concat([function(n,e,r){function t(n){return r(o(n))}function o(n){var e=a[n];if(!(e+1))throw new Error("Cannot find module '"+n+"'.");return e}var a={"./Badge/demo/en/basic.md":837,"./Badge/demo/en/blink.md":838,"./Badge/demo/en/dot.md":839,"./Badge/demo/en/main.md":840,"./Badge/demo/en/template.md":841,"./Badge/demo/en/type.md":842,"./Badge/demo/zh-CN/basic.md":843,"./Badge/demo/zh-CN/blink.md":844,"./Badge/demo/zh-CN/dot.md":845,"./Badge/demo/zh-CN/main.md":846,"./Badge/demo/zh-CN/template.md":847,"./Badge/demo/zh-CN/type.md":848,"./Breadcrumb/demo/en/basic.md":849,"./Breadcrumb/demo/en/jsx.md":850,"./Breadcrumb/demo/en/main.md":851,"./Breadcrumb/demo/zh-CN/basic.md":852,"./Breadcrumb/demo/zh-CN/jsx.md":853,"./Breadcrumb/demo/zh-CN/main.md":854,"./Breadcrumb/demo/zh-CN/render.md":855,"./Breadcrumb/demo/zh-CN/separator.md":856,"./Button/demo/en/basic.md":857,"./Button/demo/en/disabled.md":858,"./Button/demo/en/group.md":859,"./Button/demo/en/icon.md":860,"./Button/demo/en/link.md":861,"./Button/demo/en/loading.md":862,"./Button/demo/en/main.md":863,"./Button/demo/en/size.md":864,"./Button/demo/zh-CN/basic.md":865,"./Button/demo/zh-CN/disabled.md":866,"./Button/demo/zh-CN/group.md":867,"./Button/demo/zh-CN/icon.md":868,"./Button/demo/zh-CN/link.md":869,"./Button/demo/zh-CN/loading.md":870,"./Button/demo/zh-CN/main.md":871,"./Button/demo/zh-CN/size.md":872,"./Carousel/demo/en/basic.md":873,"./Carousel/demo/en/fade.md":874,"./Carousel/demo/en/interval.md":875,"./Carousel/demo/en/main.md":876,"./Carousel/demo/en/manual.md":877,"./Carousel/demo/en/speed.md":878,"./Carousel/demo/zh-CN/basic.md":879,"./Carousel/demo/zh-CN/fade.md":880,"./Carousel/demo/zh-CN/interval.md":881,"./Carousel/demo/zh-CN/main.md":882,"./Carousel/demo/zh-CN/manual.md":883,"./Carousel/demo/zh-CN/speed.md":884,"./Checkbox/demo/en/basic.md":885,"./Checkbox/demo/en/control.md":886,"./Checkbox/demo/en/disabled.md":887,"./Checkbox/demo/en/group.md":888,"./Checkbox/demo/en/indeterminate.md":889,"./Checkbox/demo/en/main.md":890,"./Checkbox/demo/zh-CN/basic.md":891,"./Checkbox/demo/zh-CN/control.md":892,"./Checkbox/demo/zh-CN/disabled.md":893,"./Checkbox/demo/zh-CN/group.md":894,"./Checkbox/demo/zh-CN/indeterminate.md":895,"./Checkbox/demo/zh-CN/main.md":896,"./Collapse/demo/en/basic.md":897,"./Collapse/demo/en/customize.md":898,"./Collapse/demo/en/disabled.md":899,"./Collapse/demo/en/main.md":900,"./Collapse/demo/en/only.md":901,"./Collapse/demo/en/simple.md":902,"./Collapse/demo/zh-CN/basic.md":903,"./Collapse/demo/zh-CN/customize.md":904,"./Collapse/demo/zh-CN/disabled.md":905,"./Collapse/demo/zh-CN/main.md":906,"./Collapse/demo/zh-CN/only.md":907,"./Collapse/demo/zh-CN/simple.md":908,"./ColorPicker/demo/zh-CN/basic.md":909,"./ColorPicker/demo/zh-CN/main.md":910,"./DatePicker/demo/en/basic.md":911,"./DatePicker/demo/en/disable.md":912,"./DatePicker/demo/en/disabled.md":913,"./DatePicker/demo/en/formatter.md":914,"./DatePicker/demo/en/main.md":915,"./DatePicker/demo/en/mode.md":916,"./DatePicker/demo/en/range.md":917,"./DatePicker/demo/en/size.md":918,"./DatePicker/demo/zh-CN/basic.md":919,"./DatePicker/demo/zh-CN/disable.md":920,"./DatePicker/demo/zh-CN/disabled.md":921,"./DatePicker/demo/zh-CN/formatter.md":922,"./DatePicker/demo/zh-CN/main.md":923,"./DatePicker/demo/zh-CN/mode.md":924,"./DatePicker/demo/zh-CN/range.md":925,"./DatePicker/demo/zh-CN/size.md":926,"./Dialog/demo/zh-CN/async.md":927,"./Dialog/demo/zh-CN/basic.md":928,"./Dialog/demo/zh-CN/footer.md":929,"./Dialog/demo/zh-CN/main.md":930,"./Dialog/demo/zh-CN/presets.md":931,"./Dropdown/demo/en/basic.md":932,"./Dropdown/demo/en/button.md":933,"./Dropdown/demo/en/main.md":934,"./Dropdown/demo/en/placement.md":935,"./Dropdown/demo/en/trigger.md":936,"./Dropdown/demo/zh-CN/basic.md":937,"./Dropdown/demo/zh-CN/button.md":938,"./Dropdown/demo/zh-CN/main.md":939,"./Dropdown/demo/zh-CN/placement.md":940,"./Dropdown/demo/zh-CN/trigger.md":941,"./Form/demo/zh-CN/async.md":942,"./Form/demo/zh-CN/enhance.md":943,"./Form/demo/zh-CN/hoc.md":944,"./Form/demo/zh-CN/horizontal.md":945,"./Form/demo/zh-CN/inline.md":946,"./Form/demo/zh-CN/main.md":947,"./Form/demo/zh-CN/trigger.md":948,"./Form/demo/zh-CN/validate.md":949,"./Grid/demo/en/basic.md":950,"./Grid/demo/en/control.md":951,"./Grid/demo/en/gap.md":952,"./Grid/demo/en/main.md":953,"./Grid/demo/en/offset.md":954,"./Grid/demo/en/response.md":955,"./Grid/demo/zh-CN/basic.md":956,"./Grid/demo/zh-CN/control.md":957,"./Grid/demo/zh-CN/gap.md":958,"./Grid/demo/zh-CN/main.md":959,"./Grid/demo/zh-CN/offset.md":960,"./Grid/demo/zh-CN/response.md":961,"./Icon/demo/en/main.md":962,"./Icon/demo/zh-CN/main.md":963,"./Input/demo/en/addon.md":964,"./Input/demo/en/basic.md":965,"./Input/demo/en/cleanable.md":966,"./Input/demo/en/disabled.md":967,"./Input/demo/en/icon.md":968,"./Input/demo/en/main.md":969,"./Input/demo/en/select.md":970,"./Input/demo/en/size.md":971,"./Input/demo/en/textarea.md":972,"./Input/demo/zh-CN/addon.md":973,"./Input/demo/zh-CN/basic.md":974,"./Input/demo/zh-CN/cleanable.md":975,"./Input/demo/zh-CN/disabled.md":976,"./Input/demo/zh-CN/icon.md":977,"./Input/demo/zh-CN/main.md":978,"./Input/demo/zh-CN/select.md":979,"./Input/demo/zh-CN/size.md":980,"./Input/demo/zh-CN/textarea.md":981,"./Layout/demo/en/basic.md":982,"./Layout/demo/en/main.md":983,"./Layout/demo/en/nav.md":984,"./Layout/demo/zh-CN/basic.md":985,"./Layout/demo/zh-CN/collapse.md":986,"./Layout/demo/zh-CN/main.md":987,"./Layout/demo/zh-CN/nav.md":988,"./Loading/demo/en/basic.md":989,"./Loading/demo/en/full.md":990,"./Loading/demo/en/main.md":991,"./Loading/demo/zh-CN/basic.md":992,"./Loading/demo/zh-CN/full.md":993,"./Loading/demo/zh-CN/main.md":994,"./Message/demo/en/basic.md":995,"./Message/demo/en/config.md":996,"./Message/demo/en/duration.md":997,"./Message/demo/en/main.md":998,"./Message/demo/en/offset.md":999,"./Message/demo/en/type.md":1e3,"./Message/demo/zh-CN/basic.md":1001,"./Message/demo/zh-CN/config.md":1002,"./Message/demo/zh-CN/duration.md":1003,"./Message/demo/zh-CN/main.md":1004,"./Message/demo/zh-CN/offset.md":1005,"./Message/demo/zh-CN/type.md":1006,"./Navigation/demo/en/basic.md":1007,"./Navigation/demo/en/disabled.md":1008,"./Navigation/demo/en/main.md":1009,"./Navigation/demo/en/trigger.md":1010,"./Navigation/demo/en/vertical.md":1011,"./Navigation/demo/zh-CN/basic.md":1012,"./Navigation/demo/zh-CN/disabled.md":1013,"./Navigation/demo/zh-CN/main.md":1014,"./Navigation/demo/zh-CN/trigger.md":1015,"./Navigation/demo/zh-CN/vertical.md":1016,"./Notification/demo/en/basic.md":1017,"./Notification/demo/en/config.md":1018,"./Notification/demo/en/duration.md":1019,"./Notification/demo/en/main.md":1020,"./Notification/demo/en/offset.md":1021,"./Notification/demo/en/type.md":1022,"./Notification/demo/zh-CN/basic.md":1023,"./Notification/demo/zh-CN/config.md":1024,"./Notification/demo/zh-CN/duration.md":1025,"./Notification/demo/zh-CN/main.md":1026,"./Notification/demo/zh-CN/offset.md":1027,"./Notification/demo/zh-CN/type.md":1028,"./NumberInput/demo/en/basic.md":1029,"./NumberInput/demo/en/disabled.md":1030,"./NumberInput/demo/en/formatter.md":1031,"./NumberInput/demo/en/main.md":1032,"./NumberInput/demo/en/regulate.md":1033,"./NumberInput/demo/en/size.md":1034,"./NumberInput/demo/zh-CN/basic.md":1035,"./NumberInput/demo/zh-CN/disabled.md":1036,"./NumberInput/demo/zh-CN/formatter.md":1037,"./NumberInput/demo/zh-CN/main.md":1038,"./NumberInput/demo/zh-CN/regulate.md":1039,"./NumberInput/demo/zh-CN/size.md":1040,"./Pagination/demo/en/basic.md":1041,"./Pagination/demo/en/layout.md":1042,"./Pagination/demo/en/main.md":1043,"./Pagination/demo/en/mini.md":1044,"./Pagination/demo/en/pageSize.md":1045,"./Pagination/demo/en/total.md":1046,"./Pagination/demo/zh-CN/basic.md":1047,"./Pagination/demo/zh-CN/layout.md":1048,"./Pagination/demo/zh-CN/main.md":1049,"./Pagination/demo/zh-CN/mini.md":1050,"./Pagination/demo/zh-CN/pageSize.md":1051,"./Pagination/demo/zh-CN/total.md":1052,"./Panel/demo/en/append.md":1053,"./Panel/demo/en/basic.md":1054,"./Panel/demo/en/footer.md":1055,"./Panel/demo/en/image.md":1056,"./Panel/demo/en/main.md":1057,"./Panel/demo/zh-CN/append.md":1058,"./Panel/demo/zh-CN/basic.md":1059,"./Panel/demo/zh-CN/footer.md":1060,"./Panel/demo/zh-CN/image.md":1061,"./Panel/demo/zh-CN/main.md":1062,"./Progress/demo/en/basic.md":1063,"./Progress/demo/en/circle.md":1064,"./Progress/demo/en/main.md":1065,"./Progress/demo/en/outside.md":1066,"./Progress/demo/en/size.md":1067,"./Progress/demo/en/template.md":1068,"./Progress/demo/zh-CN/basic.md":1069,"./Progress/demo/zh-CN/circle.md":1070,"./Progress/demo/zh-CN/main.md":1071,"./Progress/demo/zh-CN/outside.md":1072,"./Progress/demo/zh-CN/size.md":1073,"./Progress/demo/zh-CN/template.md":1074,"./Radio/demo/en/basic.md":1075,"./Radio/demo/en/button.md":1076,"./Radio/demo/en/disabled.md":1077,"./Radio/demo/en/group.md":1078,"./Radio/demo/en/main.md":1079,"./Radio/demo/zh-CN/basic.md":1080,"./Radio/demo/zh-CN/button.md":1081,"./Radio/demo/zh-CN/disabled.md":1082,"./Radio/demo/zh-CN/group.md":1083,"./Radio/demo/zh-CN/main.md":1084,"./Select/demo/en/basic.md":1085,"./Select/demo/en/disabled.md":1086,"./Select/demo/en/filter.md":1087,"./Select/demo/en/group.md":1088,"./Select/demo/en/main.md":1089,"./Select/demo/en/multiple.md":1090,"./Select/demo/en/remote.md":1091,"./Select/demo/en/size.md":1092,"./Select/demo/en/template.md":1093,"./Select/demo/zh-CN/basic.md":1094,"./Select/demo/zh-CN/disabled.md":1095,"./Select/demo/zh-CN/filter.md":1096,"./Select/demo/zh-CN/group.md":1097,"./Select/demo/zh-CN/main.md":1098,"./Select/demo/zh-CN/multiple.md":1099,"./Select/demo/zh-CN/remote.md":1100,"./Select/demo/zh-CN/size.md":1101,"./Select/demo/zh-CN/template.md":1102,"./Slider/demo/en/basic.md":1103,"./Slider/demo/en/control.md":1104,"./Slider/demo/en/disabled.md":1105,"./Slider/demo/en/include.md":1106,"./Slider/demo/en/main.md":1107,"./Slider/demo/en/template.md":1108,"./Slider/demo/en/ticks.md":1109,"./Slider/demo/en/vertical.md":1110,"./Slider/demo/zh-CN/basic.md":1111,"./Slider/demo/zh-CN/control.md":1112,"./Slider/demo/zh-CN/disabled.md":1113,"./Slider/demo/zh-CN/include.md":1114,"./Slider/demo/zh-CN/main.md":1115,"./Slider/demo/zh-CN/template.md":1116,"./Slider/demo/zh-CN/ticks.md":1117,"./Slider/demo/zh-CN/vertical.md":1118,"./Steps/demo/en/basic.md":1119,"./Steps/demo/en/control.md":1120,"./Steps/demo/en/icon.md":1121,"./Steps/demo/en/main.md":1122,"./Steps/demo/en/status.md":1123,"./Steps/demo/en/vertical.md":1124,"./Steps/demo/zh-CN/basic.md":1125,"./Steps/demo/zh-CN/control.md":1126,"./Steps/demo/zh-CN/icon.md":1127,"./Steps/demo/zh-CN/main.md":1128,"./Steps/demo/zh-CN/status.md":1129,"./Steps/demo/zh-CN/vertical.md":1130,"./Table/demo/zh-CN/basic.md":1131,"./Table/demo/zh-CN/bordered.md":1132,"./Table/demo/zh-CN/complex.md":1133,"./Table/demo/zh-CN/expandable.md":1134,"./Table/demo/zh-CN/filter.md":1135,"./Table/demo/zh-CN/filterable.md":1136,"./Table/demo/zh-CN/fixedColumn.md":1137,"./Table/demo/zh-CN/index.md":1138,"./Table/demo/zh-CN/jsx.md":1139,"./Table/demo/zh-CN/main.md":1140,"./Table/demo/zh-CN/remote.md":1141,"./Table/demo/zh-CN/render.md":1142,"./Table/demo/zh-CN/resizable.md":1143,"./Table/demo/zh-CN/selectable.md":1144,"./Table/demo/zh-CN/sortable.md":1145,"./Table/demo/zh-CN/sorter.md":1146,"./Table/demo/zh-CN/striped.md":1147,"./Table/demo/zh-CN/summary.md":1148,"./Table/demo/zh-CN/summaryRender.md":1149,"./Tabs/demo/en/basic.md":1150,"./Tabs/demo/en/card.md":1151,"./Tabs/demo/en/disabled.md":1152,"./Tabs/demo/en/dynamic.md":1153,"./Tabs/demo/en/main.md":1154,"./Tabs/demo/en/vertical.md":1155,"./Tabs/demo/zh-CN/basic.md":1156,"./Tabs/demo/zh-CN/card.md":1157,"./Tabs/demo/zh-CN/disabled.md":1158,"./Tabs/demo/zh-CN/dynamic.md":1159,"./Tabs/demo/zh-CN/main.md":1160,"./Tabs/demo/zh-CN/vertical.md":1161,"./Toggle/demo/en/basic.md":1162,"./Toggle/demo/en/control.md":1163,"./Toggle/demo/en/disabled.md":1164,"./Toggle/demo/en/main.md":1165,"./Toggle/demo/en/text.md":1166,"./Toggle/demo/zh-CN/basic.md":1167,"./Toggle/demo/zh-CN/control.md":1168,"./Toggle/demo/zh-CN/disabled.md":1169,"./Toggle/demo/zh-CN/main.md":1170,"./Toggle/demo/zh-CN/text.md":1171,"./Tooltip/demo/en/basic.md":1172,"./Tooltip/demo/en/delay.md":1173,"./Tooltip/demo/en/main.md":1174,"./Tooltip/demo/en/placement.md":1175,"./Tooltip/demo/en/trigger.md":1176,"./Tooltip/demo/zh-CN/basic.md":1177,"./Tooltip/demo/zh-CN/delay.md":1178,"./Tooltip/demo/zh-CN/main.md":1179,"./Tooltip/demo/zh-CN/placement.md":1180,"./Tooltip/demo/zh-CN/trigger.md":1181,"./Tree/demo/zh-CN/basic.md":1182,"./Tree/demo/zh-CN/main.md":1183,"./Upload/demo/en/avatar.md":1184,"./Upload/demo/en/basic.md":1185,"./Upload/demo/en/drag.md":1186,"./Upload/demo/en/gallery.md":1187,"./Upload/demo/en/http.md":1188,"./Upload/demo/en/image.md":1189,"./Upload/demo/en/main.md":1190,"./Upload/demo/en/manual.md":1191,"./Upload/demo/zh-CN/avatar.md":1192,"./Upload/demo/zh-CN/basic.md":1193,"./Upload/demo/zh-CN/drag.md":1194,"./Upload/demo/zh-CN/gallery.md":1195,"./Upload/demo/zh-CN/http.md":1196,"./Upload/demo/zh-CN/image.md":1197,"./Upload/demo/zh-CN/main.md":1198,"./Upload/demo/zh-CN/manual.md":1199,"./i18n/demo/en/main.md":1200,"./i18n/demo/zh-CN/main.md":1201};t.keys=function(){return Object.keys(a)},t.resolve=o,n.exports=t,t.id=331}function(n,e){n.exports='### Basic\r\nThe basic usage of Badge.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-badge-list">\r\n                    <Badge number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge number={100}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Blinking dot\r\nThe dot will be blinking if attribute ```blink``` is set. It only matters for dot mode.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-badge-list">\r\n                    <Badge dot blink>\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                    <Badge dot blink type="primary">\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                    <Badge dot blink type="success">\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                    <Badge dot blink type="warning">\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                    <Badge dot blink type="info">\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                    <Badge dot blink type="default">\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Dot\r\nThe badge displays in dot rather than number.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-badge-list">\r\n                    <Badge dot>\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="user" />\r\n                        </span>\r\n                    </Badge>\r\n                    <Badge dot>\r\n                        <span className="demo-badge-icon">\r\n                            <Icon type="mail" />\r\n                        </span>\r\n                    </Badge>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Badge\r\nTo notify user that new information is coming.\r\n### Examples\r\n@@--------@@\r\n### API\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nnumber | the number presents in badge | ```Number``` | -\r\ndot | indicate if it display in dot style instead of number | ```Boolean``` | ```false```\r\nblink | indicate if , 仅在```dot```模式下有效 | ```Boolean``` |```false```\r\nshowZero | number为0时是否展示徽记 | ```Boolean``` | ```false```\r\nmaximum | 最大阈值, 超出将显示```maxTemplate``` | ```Number``` | -\r\nmaxTemplate | 超过最大值时显示的模板 | ```ReactNode丨(max: Number) => {}``` | -\r\ntype | 徽记的颜色 | ```'default'丨'primary'丨'info'丨'success'丨'warning'丨'error'``` | ```'error'```\r\n"},function(n,e){n.exports='### Overflow template\r\n```${max}+``` is displayed when number is larger than maximum by default. You can customize the template by setting attribute ```maxTemplate```. \r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-badge-list">\r\n                    <Badge maximum={999} number={1000}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge maximum={999} number={1000} maxTemplate={(number, max) => <Icon type="more" />}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Status\r\nThere are six themes provided for representing different status.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-badge-list">\r\n                    <Badge number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge type="primary" number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge type="success" number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge type="warning" number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge type="info" number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                    <Badge type="default" number={9}>\r\n                        <div className="demo-badge"/>\r\n                    </Badge>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 基础用法\n简单的徽记。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-badge-list">\n                    <Badge number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge number={100}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 闪烁的圆点\n设置```blink```属性可使小圆点闪烁。仅在dot模式下有效。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-badge-list">\n                    <Badge dot blink>\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                    <Badge dot blink type="primary">\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                    <Badge dot blink type="success">\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                    <Badge dot blink type="warning">\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                    <Badge dot blink type="info">\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                    <Badge dot blink type="default">\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 小圆点\n以小圆点取代数字显示。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-badge-list">\n                    <Badge dot>\n                        <span className="demo-badge-icon">\n                            <Icon type="user" />\n                        </span>\n                    </Badge>\n                    <Badge dot>\n                        <span className="demo-badge-icon">\n                            <Icon type="mail" />\n                        </span>\n                    </Badge>\n                </div>\n            );\n        }\n    }\n```'},function(n,e){n.exports="### Badge 徽记\n用于提示用户是否有新消息或消息数量。\n### 代码示例\n@@--------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nnumber | 显示的数字 | ```Number``` | -\ndot | 是否以圆点显示 | ```Boolean``` | ```false```\nblink | 圆点是否闪烁, 仅在```dot```模式下有效 | ```Boolean``` |```false```\nshowZero | number为0时是否展示徽记 | ```Boolean``` | ```false```\nmaximum | 最大阈值, 超出将显示```maxTemplate``` | ```Number``` | -\nmaxTemplate | 超过最大值时显示的模板 | ```ReactNode丨(max: Number) => {}``` | -\ntype | 徽记的颜色 | ```'default'丨'primary'丨'info'丨'success'丨'warning'丨'error'``` | ```'error'```\n"},function(n,e){n.exports='### 溢出模板\n当数值超过最大值时, 默认将以```${max}+```显示。通过```maxTemplate```定制渲染模板。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-badge-list">\n                    <Badge maximum={999} number={1000}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge maximum={999} number={1000} maxTemplate={(number, max) => <Icon type="more" />}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 不同状态\n提供6种状态。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-badge-list">\n                    <Badge number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge type="primary" number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge type="success" number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge type="warning" number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge type="info" number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                    <Badge type="default" number={9}>\n                        <div className="demo-badge"/>\n                    </Badge>\n                </div>\n            )\n        }\n    }\n```\n'},function(n,e){n.exports="### Basic\r\nA simple breadcrumb.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const routes = [{\r\n                label: 'Home',\r\n                href: '/'\r\n            }, {\r\n                label: 'Components',\r\n                href: '/components/'\r\n            }, {\r\n                label: 'Breadcrumb'\r\n            }]\r\n            return (\r\n                <Breadcrumb routes={routes}/>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Defined by JSX component\r\nThe route items can be defined by component ```Breadcrumb.Item``` instead of attribute ```routes```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Breadcrumb>\r\n                    <Breadcrumb.Item href="/">Home</Breadcrumb.Item>\r\n                    <Breadcrumb.Item href="/components/">Components</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>Breadcrumb</Breadcrumb.Item>             \r\n                </Breadcrumb>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Breadcrumb\r\nTo display the hierarchy of pages and provide navigation.\r\n### Examples\r\n@@--------@@\r\n### API\r\n#### Breadcrumb\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nroutes | array of route | ```Object[]``` | -\r\nseparator | the separator between items | ```String``` | ```'/'```\r\n\r\n#### Breadcrumb.Item\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nhref | url of item | ```String``` | -\r\n\r\n"},function(n,e){n.exports="### 基础用法\r\n简单的面包屑导航。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const routes = [{\r\n                label: '首页',\r\n                href: '/'\r\n            }, {\r\n                label: '组件',\r\n                href: '/components/'\r\n            }, {\r\n                label: '面包屑'\r\n            }]\r\n            return (\r\n                <Breadcrumb routes={routes}/>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### jsx风格\r\n除了通过```routes```属性, 还可以采用```Breadcrumb.Item```自定义导航项。\r\n\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Breadcrumb>\r\n                    <Breadcrumb.Item href="/">首页</Breadcrumb.Item>\r\n                    <Breadcrumb.Item href="/components/">组件</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>面包屑</Breadcrumb.Item>             \r\n                </Breadcrumb>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Breadcrumb 面包屑\n展示页面的层级关系并提供导航。\n### 代码示例\n@@--------@@\n### API\n#### Breadcrumb\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nroutes | 路由信息对象 | ```Object[]``` | -\nseparator | 导航项之间的分隔符 | ```String``` | ```'/'```\n\n#### Breadcrumb.Item\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nhref | 链接地址 | ```String``` | -\n\n"},function(n,e){n.exports="### 自定义模板\r\n设置```itemRender```函数可以自定义渲染模板, 比如配合React-Router.\r\n"},function(n,e){n.exports='### 自定义分隔符\n默认样式。\n```javascript\n    class Demo extends React.Component {\n\n        render(){\n            return (\n                <Breadcrumb separator="|">\n                    <Breadcrumb.Item>首页</Breadcrumb.Item>\n                    <Breadcrumb.Item>栏目1</Breadcrumb.Item>\n                    <Breadcrumb.Item>栏目2</Breadcrumb.Item>\n                    <Breadcrumb.Item>当前栏</Breadcrumb.Item>                \n                </Breadcrumb>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports='### Basic\r\nThere are six theme of Button controlled by ```type```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-basic">\r\n                    <Button>default</Button>\r\n                    <Button type="primary">primary</Button>\r\n                    <Button type="success">success</Button>\r\n                    <Button type="error">error</Button>\r\n                    <Button type="warning">warning</Button>\r\n                    <Button type="info">info</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Disabled\r\nThe Button will be disabled when attribute ```disabled``` is set.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-disabled">\r\n                    <Button type="primary">Enabled</Button>\r\n                    <Button disabled>Disabled</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Button Group\r\nButtons appear in group. It used to controll a series of similar action.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <span className="demo-button-group">\r\n                        <Button.Group>\r\n                            <Button type="primary">next</Button>\r\n                            <Button type="primary">prev</Button>\r\n                        </Button.Group>\r\n                    </span>\r\n                    <span className="demo-button-group">\r\n                        <Button.Group>\r\n                            <Button type="info" icon="edit" size="small"/>\r\n                            <Button type="info" icon="trash" size="small"/>\r\n                            <Button type="info" icon="location" size="small"/>\r\n                            <Button type="info" icon="mail" size="small"/>\r\n                        </Button.Group>\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Icon Button\nButton can contain an [Icon](\'/#/icon\').\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-button-icon">\n                    <Button type="success" icon="search">Search</Button>\n                    <Button type="info" icon="edit">Edit</Button>\n                    <Button type="error" icon="trash">Delete</Button>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Link Button\r\nButton appear in text style when attribute ```link``` is set.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-basic">\r\n                    <Button link>default</Button>\r\n                    <Button link type="primary">primary</Button>\r\n                    <Button link type="success">success</Button>\r\n                    <Button link type="error">error</Button>\r\n                    <Button link type="warning">warning</Button>\r\n                    <Button link type="info">info</Button>\r\n                    <Button link disabled type="info">disabled</Button>                    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Loading Button\r\nButton is in loading state when attribute ```loading``` is set.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-basic">\r\n                    <Button type="primary" loading>loading...</Button>\r\n                    <Button type="success" loading>loading...</Button>\r\n                    <Button type="error" loading>loading...</Button>\r\n                    <Button type="warning" loading>loading...</Button>\r\n                    <Button type="info" loading>loading...</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Button\r\nTo trigger an instant operation.\r\n### Examples\r\n@@---------------@@\r\n### API\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ntype | to set the theme of the button | ```'default'丨'primary'丨'info'丨'success'丨'error'丨'warning'```| ```'default'```\r\nsize | to set the size of the button | ```'small'丨'middle'丨'large'''``` | ```'middle'```\r\ndisabled | disable the button | ```Boolean``` | ```false```\r\nlink | indicate whether the button is link style | ```Boolean``` | ```false```\r\nicon | to set the icon in button | ```String``` | -\r\nloading | indicate whether the button is in loading state | ```Boolean``` | ```false```\r\nhtmlType | the original html type of button | ```'button'丨'submit'丨'reset'``` | ```'button'```"},function(n,e){n.exports='### Button Size\r\nThere are three different size of Button.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-size">\r\n                    <Button size="large">large</Button>\r\n                    <Button>middle</Button>\r\n                    <Button size="small">small</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports='### 基础用法\r\n按钮有六种表现形式，由```type```属性决定\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-basic">\r\n                    <Button>默认按钮</Button>\r\n                    <Button type="primary">主要按钮</Button>\r\n                    <Button type="success">成功按钮</Button>\r\n                    <Button type="error">错误按钮</Button>\r\n                    <Button type="warning">警告按钮</Button>\r\n                    <Button type="info">信息按钮</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 禁用按钮\r\n添加```disabled```属性，使按钮处于不可以状态。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-disabled">\r\n                    <Button type="primary">可用状态</Button>\r\n                    <Button disabled>禁用状态</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 按钮组\n将按钮以组的方式表现，多用于工具条。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div>\n                    <span className="demo-button-group">\n                        <Button.Group>\n                            <Button type="primary">上一页</Button>\n                            <Button type="primary">下一页</Button>\n                        </Button.Group>\n                    </span>\n                    <span className="demo-button-group">\n                        <Button.Group>\n                            <Button type="info" icon="edit" size="small"/>\n                            <Button type="info" icon="trash" size="small"/>\n                            <Button type="info" icon="location" size="small"/>\n                            <Button type="info" icon="mail" size="small"/>\n                        </Button.Group>\n                    </span>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 图标按钮\r\n设置```icon```属性可以使按钮包含图标。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-icon">\r\n                    <Button type="success" icon="search">搜索</Button>\r\n                    <Button type="info" icon="edit">编辑</Button>\r\n                    <Button type="error" icon="trash">删除</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 链接按钮\n设置属性```link```将使按钮以文字的形式展现。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-button-basic">\n                    <Button link>默认按钮</Button>\n                    <Button link type="primary">主要按钮</Button>\n                    <Button link type="success">成功按钮</Button>\n                    <Button link type="error">错误按钮</Button>\n                    <Button link type="warning">警告按钮</Button>\n                    <Button link type="info">信息按钮</Button>\n                    <Button link disabled type="info">禁用按钮</Button>                    \n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 加载按钮\r\n设置```loading```属性使按钮处于加载状态。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-basic">\r\n                    <Button type="primary" loading>加载按钮</Button>\r\n                    <Button type="success" loading>加载按钮</Button>\r\n                    <Button type="error" loading>加载按钮</Button>\r\n                    <Button type="warning" loading>加载按钮</Button>\r\n                    <Button type="info" loading>加载按钮</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Button 按钮\r\n用于触发一个即时操作。\r\n### 用法示例\r\n@@---------------@@\r\n### API\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ntype | 控制按钮显示样式 | ```'default'丨'primary'丨'info'丨'success'丨'error'丨'warning'```| ```'default'```\r\nsize | 控制按钮大小 | ```'small'丨'middle'丨'large'''``` | ```'middle'```\r\ndisabled | 是否禁用按钮 | ```Boolean``` | ```false```\r\nlink | 是否以链接的形式展示 | ```Boolean``` | ```false```\r\nicon | 设置按钮图标类型 | ```String``` | -\r\nloading | 是否处于加载状态中 | ```Boolean``` | ```false```\r\nhtmlType | 按钮的原始类型 | ```'button'丨'submit'丨'reset'``` | ```'button'```"},function(n,e){n.exports='### 不同尺寸\r\nButton组件提供三种大小的尺寸, 分别为```large```,```middle```和```small```,均由```size```属性控制, 默认为```middle```。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-button-size">\r\n                    <Button size="large">大型按钮</Button>\r\n                    <Button>中型按钮</Button>\r\n                    <Button size="small">小型按钮</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Basic\r\nBasic usage of Carousel.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" onChange={index => console.log(\'currentIndex：\', index)}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 渐隐切换\r\nUse fade transition.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" effect="fade">\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Interval\r\nSwitched time controlled by attribute ```interval```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" interval={5000}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Carousel\r\nLoop a series of images and text.\r\n### Examples\r\n@@--------@@\r\n### API\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nautoplay | indicate whether automatical playing | ```Boolean``` | ```true```\r\ninterval | interval of content change. In milliseconds  | ```Number``` | ```3000```\r\nspeed | speed of content change. In milliseconds | ```Number``` | ```300```\r\nhoverToStop | indicate whether to stop autoplay by hovering | ```Boolean``` | ```true``` \r\nshowController | indicate whether to show control buttons on the left and right sides | ```Boolean``` | ```true```\r\nshowIndicators | indicate whether to show indicators | ```Boolean``` | ```true```\r\neffect | the animation of content change | ```'slide'丨'fade'``` | ```'slide'```\r\nonChange | the callback function triggered by content change | ```(currentIndex: Number) => {}``` | -"},function(n,e){n.exports='### Manual play\r\nStop autoplay.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" autoplay={false}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports='### Speed\r\nSwitching speed is controlled by attribute ```speed``` and it\'s recommended that the value in lower level.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" speed={1000}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 基础用法\n简单的轮播。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Carousel className="demo-carousel" onChange={index => console.log(\'当前轮播项索引值：\', index)}>\n                    <Carousel.Item>\n                        <div className="demo-carousel-item">1</div>\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <div className="demo-carousel-item">2</div>\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <div className="demo-carousel-item">3</div>\n                    </Carousel.Item>\n                    <Carousel.Item>\n                        <div className="demo-carousel-item">4</div>\n                    </Carousel.Item>\n                </Carousel>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 渐隐切换\r\n设置```effect```为```\'fade\'```可以将转场的动画变为渐隐。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" effect="fade">\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 轮播时间\r\n设置```interval```可以控制轮播项切换的时间间隔。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" interval={5000}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Carousel 轮播\n循环播放图片及文字。\n### 代码示例\n@@--------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nautoplay | 是否自动播放 | ```Boolean``` | ```true```\ninterval | 轮播的时间间隔, 以毫秒为单位 | ```Number``` | ```3000```\nspeed | 切换的时间间隔, 以毫秒为单位 | ```Number``` | ```300```\nhoverToStop | 鼠标悬停在轮播上时是否停止自动播放 | ```Boolean``` | ```true``` \nshowController | 是否显示左右两侧控制按钮 | ```Boolean``` | ```true```\nshowIndicators | 是否显示指示器 | ```Boolean``` | ```true```\neffect | 轮播动画效果 | ```'slide'丨'fade'``` | ```'slide'```\nonChange | 当前播放的内容切换后触发, 参数为当前项的索引值 | ```(currentIndex: Number) => {}``` | -"},function(n,e){n.exports='### 手动播放\r\n将```autoplay```设置为```false```可以阻止轮播自动播放。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" autoplay={false}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 切换速度\r\n属性```speed```可以控制转场的速度, 建议设置其数值比```interval```小很多。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Carousel className="demo-carousel" speed={1000}>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">1</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">2</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">3</div>\r\n                    </Carousel.Item>\r\n                    <Carousel.Item>\r\n                        <div className="demo-carousel-item">4</div>\r\n                    </Carousel.Item>\r\n                </Carousel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Basic\r\nBasic usage of checkbox。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Checkbox>Defense</Checkbox>\r\n                    <Checkbox>Reprimand</Checkbox>\r\n                    <Checkbox>Holy</Checkbox>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Controlled Checkbox\r\nThe checked state of Checkbox is controlled by other component.\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                checked: false\r\n            }\r\n        }\r\n\r\n        handleChange(isOn: Boolean){\r\n            this.setState({\r\n                checked: isOn\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div style={{marginBottom:12}}>\r\n                        <Toggle onChange={this.handleChange.bind(this)} checked={this.state.checked} offText="Off" onText="On" />\r\n                    </div>\r\n                    <Checkbox onChange={this.handleChange.bind(this)} checked={this.state.checked}>controlled checkbox</Checkbox>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### Disabled Checkbox\r\nThe checkbox will be disabled when attribute ```disabled``` is set.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Checkbox>Enabled</Checkbox>\r\n                    <Checkbox disabled>Disabled</Checkbox>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Checkbox Group\r\nTo associate checkbox selection results to the same array.\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n\r\n            }\r\n        }\r\n\r\n        handleChange(values: Array){\r\n            this.setState({\r\n                selectedValues: values\r\n            }, () => {\r\n                console.log(this.state.selectedValues);\r\n            });\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Checkbox.Group onChange={this.handleChange.bind(this)} defaultValue={[\'1\', \'3\']} value={this.state.selectedValues}>\r\n                    <Checkbox value="1">Assassination</Checkbox>\r\n                    <Checkbox value="2">Thug</Checkbox>\r\n                    <Checkbox value="3">Acuteness</Checkbox>\r\n                </Checkbox.Group>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### Check all\r\nThe attribute ```indeterminate``` respresent the state that one is selected at leaset but not all.\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                values: ['1', '3']\r\n            }\r\n        }\r\n\r\n        toggleAll(checked: Boolean){\r\n            this.setState({\r\n                values: checked ? ['1', '2', '3'] : []\r\n            })\r\n        }\r\n\r\n        handleChange(values: Array){\r\n            this.setState({\r\n                values\r\n            })\r\n        }\r\n\r\n        render(){\r\n            const values = this.state.values;\r\n            const indeterminate = values.length && values.length < 3;\r\n            const allChecked = values.length === 3;\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        <Checkbox onChange={this.toggleAll.bind(this)} \r\n                            indeterminate={indeterminate}\r\n                            checked={allChecked}\r\n                        >\r\n                            All\r\n                        </Checkbox>\r\n                    </div>\r\n                    <p>\r\n                        <Checkbox.Group value={values} onChange={this.handleChange.bind(this)}>\r\n                            <Checkbox value=\"1\">Misery</Checkbox>\r\n                            <Checkbox value=\"2\">Demon</Checkbox>\r\n                            <Checkbox value=\"3\">Destruction</Checkbox>\r\n                        </Checkbox.Group>\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="## Checkbox\r\nTo select multiple option.\r\n### Examples\r\n@@---------@@\r\n### API\r\n#### Checkbox\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nvalue | the unique value of checkbox | ```Number丨String``` | -\r\nchecked | indicate if checkbox is selected | ```Boolean``` | ```false```\r\nindeterminate | indicate whether checkbox show side state | ```Boolean``` | ```false```\r\ndisabled | disable checkbox | ```Boolean``` | ```false```\r\nonChange | the callback function triggered by checked state changes | ```Boolean``` | -\r\n\r\n#### Checkbox.Group\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ndefaultValue | a set of default checked value | ```Array``` | ```[]```\r\nvalue | a set of checkbox value | ```Array``` | -\r\nonChange | the callback function triggered by values change | ```(values: Array) => {}``` | -"},function(n,e){n.exports="### 基础用法\n简单的复选框。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div>\n                    <Checkbox>防护</Checkbox>\n                    <Checkbox>惩戒</Checkbox>\n                    <Checkbox>神圣</Checkbox>\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports="### 受控复选框\r\n选中状态随外部属性变化而改变。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                checked: false\r\n            }\r\n        }\r\n\r\n        handleChange(isOn: Boolean){\r\n            this.setState({\r\n                checked: isOn\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div style={{marginBottom:12}}>\r\n                        <Toggle onChange={this.handleChange.bind(this)} checked={this.state.checked} />\r\n                    </div>\r\n                    <Checkbox onChange={this.handleChange.bind(this)} checked={this.state.checked}>受控复选框</Checkbox>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="### 禁用\n设置```disabled```使复选框不可用。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div>\n                    <Checkbox>可用</Checkbox>\n                    <Checkbox disabled>禁用</Checkbox>\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 复选框组\n用于将复选框选择结果关联到同一数组。\n```javascript\n    class Demo extends React.Component {\n\n        constructor(){\n            super();\n            this.state = {\n                \n            }\n        }\n\n        handleChange(values: Array){\n            this.setState({\n                selectedValues: values\n            }, () => {\n                console.log(this.state.selectedValues);\n            });\n        }\n\n        render(){\n            return (\n                <Checkbox.Group onChange={this.handleChange.bind(this)} defaultValue={[\'1\', \'3\']} value={this.state.selectedValues}>\n                    <Checkbox value="1">刺杀</Checkbox>\n                    <Checkbox value="2">狂徒</Checkbox>\n                    <Checkbox value="3">敏锐</Checkbox>\n                </Checkbox.Group>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports="### 全选\n设置```indeterminate```可表示至少有一项选中且没有全选的情况。\n```javascript\n    class Demo extends React.Component {\n\n        constructor(){\n            super();\n            this.state = {\n                values: ['1', '3']\n            }\n        }\n\n        toggleAll(checked: Boolean){\n            this.setState({\n                values: checked ? ['1', '2', '3'] : []\n            })\n        }\n\n        handleChange(values: Array){\n            this.setState({\n                values\n            })\n        }\n\n        render(){\n            const values = this.state.values;\n            const indeterminate = values.length > 0 && values.length < 3;\n            const allChecked = values.length === 3;\n            return (\n                <div>\n                    <div>\n                        <Checkbox onChange={this.toggleAll.bind(this)} \n                            indeterminate={indeterminate}\n                            checked={allChecked}\n                        >\n                            全选\n                        </Checkbox>\n                    </div>\n                    <p>\n                        <Checkbox.Group value={values} onChange={this.handleChange.bind(this)}>\n                            <Checkbox value=\"1\">痛苦</Checkbox>\n                            <Checkbox value=\"2\">恶魔</Checkbox>\n                            <Checkbox value=\"3\">毁灭</Checkbox>\n                        </Checkbox.Group>\n                    </p>\n                </div>\n            )\n        }\n\n    }\n```"},function(n,e){n.exports="## Checkbox 复选框\n可选择多个的选项。\n### 代码示例\n@@---------@@\n### API\n#### Checkbox\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nvalue | 复选框的值 | ```Number丨String``` | -\nchecked | 是否选中 | ```Boolean``` | ```false```\nindeterminate | 是否显示副状态, 与```checked```并存时不会展示 | ```Boolean``` | ```false```\ndisabled | 是否禁用 | ```Boolean``` | ```false```\nonChange | 选中状态改变时触发, 回调参数```checked```为当前的选中状态 | ```Boolean``` | -\n\n#### Checkbox.Group\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ----\ndefaultValue | 默认选中值的集合 | ```Array``` | ```[]```\nvalue | 复选框的值的集合 | ```Array``` | -\nonChange | 选中状态改变时触发, 回调参数```values```为当前的选中的值集合 | ```(values: Array) => {}``` | -"},function(n,e){n.exports="### Basic\r\nBasic collapse.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse defaultActiveIndex={2} onChange={(index, collapsed) => console.log(`${index}, collapsed:${collapsed}`)}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\">\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Customized style\r\nYou can customize the style by setting attributes ```style``` and ```className```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const demoStyle = {\r\n                background: '#a483ee'\r\n            }\r\n            return (\r\n                <Collapse defaultActiveIndex={2}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\" className=\"demo-collapse-item\">\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\" style={demoStyle}>\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Disabled item\r\nDisable ```Collapse.Item```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse defaultActiveIndex={2}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\" disabled>\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="## Collapse\r\nTo display more content in a limited area.\r\n### Examples\r\n@@----------------@@\r\n### API\r\n#### Collapse\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ndefaultActiveIndex | the index of default expanded item | ```Number``` | -\r\nonly | indicate whether only one item can be expanded | ```Boolean``` | ```false```\r\nsimple | to display in the simple style | ```Boolean``` | ```false```\r\nonChange | the callback function triggered by item expanding | ```(index: Number, collapsed: Boolean) => {}``` | -\r\n\r\n#### Collapse.Item\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nheader | the header of item | ```String丨ReactNode``` | -\r\ndisabled | disable item | ```Boolean``` | ```false```\r\nclassName | extra CSS class | ```String``` | -\r\nstyle | customized style | ```Object``` | -\r\n"},function(n,e){n.exports="### Accordion\r\nOnly one item keep expanded in one time.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse only defaultActiveIndex={0}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\">\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Simple style\r\nA simple style ```Collapse``` without border and background.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse simple defaultActiveIndex={1}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\">\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 基础用法\r\n简单的折叠。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse defaultActiveIndex={2} onChange={(index, collapsed) => console.log(`当前索引:${index}, 当前索引项状态:${collapsed}`)}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\">\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 自定义样式\n定制展开项的样式和类。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const demoStyle = {\n                background: '#a483ee'\n            }\n            return (\n                <Collapse defaultActiveIndex={2} onChange={(index, collapsed) => console.log(`当前索引:${index}, 当前索引项状态:${collapsed}`)}>\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\n                        <p>\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \n                        </p>\n                    </Collapse.Item>\n                    <Collapse.Item header=\"Vol'jin\" className=\"demo-collapse-item\">\n                        <p>\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\n                        </p>\n                    </Collapse.Item>\n                    <Collapse.Item header=\"Gul'dan\" style={demoStyle}>\n                        <p>\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \n                        </p>\n                    </Collapse.Item>\n                </Collapse>\n            )\n        }\n    }\n```"},function(n,e){n.exports="### 禁用\r\n禁用展开项。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse defaultActiveIndex={2}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\" disabled>\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="## Collapse 折叠\r\n在有限的空间展示较多的内容。\r\n### 代码示例\r\n@@----------------@@\r\n### API\r\n#### Collapse\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ndefaultActiveIndex | 默认展开项的索引值 | ```Number``` | -\r\nonly | 是否只展开一项 | ```Boolean``` | ```false```\r\nsimple | 是否使用简洁风格 | ```Boolean``` | ```false```\r\nonChange | 当前展开项改变时触发, 参数```index```为当前展开项的索引值, ```collapsed```为当前项折叠状态 | ```(index: Number, collapsed: Boolean) => {}``` | -\r\n\r\n#### Collapse.Item\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nheader | 展开项头部 | ```String丨ReactNode``` | -\r\ndisabled | 是否禁用该项 | ```Boolean``` | ```false```\r\nclassName | 额外的类名 | ```String``` | -\r\nstyle | 自定义样式 | ```Object``` | -\r\n"},function(n,e){n.exports="### 手风琴\r\n同一时间只有一项能够展开。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Collapse only defaultActiveIndex={0}>\r\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\r\n                        <p>\r\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Vol'jin\">\r\n                        <p>\r\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\r\n                        </p>\r\n                    </Collapse.Item>\r\n                    <Collapse.Item header=\"Gul'dan\">\r\n                        <p>\r\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \r\n                        </p>\r\n                    </Collapse.Item>\r\n                </Collapse>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 简洁风格\n一套无边框、无背景的折叠。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Collapse simple defaultActiveIndex={1}>\n                    <Collapse.Item header=\"Sylvanas Windrunner\">\n                        <p>\n                            Sylvanas was once the ranger-general of Silvermoon, a commander charged with defending the high elven kingdom of Quel'Thalas. Her skill as a leader was put to the test when the Lich King's undead Scourge attacked her nation. Though Sylvanas fought valiantly, she fell to the unholy invaders. The Scourge death knight Arthas Menethil ripped out the ranger-general's soul and transformed it into a banshee, a vengeful phantom forced to serve the Lich King. \n                        </p>\n                    </Collapse.Item>\n                    <Collapse.Item header=\"Vol'jin\">\n                        <p>\n                            Under Vol'jin's leadership, the Darkspear trolls became one of the first non-orc members of Warchief Thrall's Horde. Vol'jin quickly rose to prominence, becoming a trusted advisor to Thrall. In the years that followed, the wise troll played a part in guiding the Horde through crisis after crisis, and he earned the respect of orcs, tauren, blood elves, goblins, and Forsaken alike.\n                        </p>\n                    </Collapse.Item>\n                    <Collapse.Item header=\"Gul'dan\">\n                        <p>\n                            Born on Draenor, homeworld of the orcs, Gul'dan was an outcast from a very young age. Utterly obsessed with obtaining power, he agreed to a secret alliance with the Burning Legion, a destructive army from beyond the stars. He drank demon blood and altered the fate of his people forever. The blood transformed Gul'dan into something hideous, bent and twisted by demonic energies. With his lieutenants, he forged the nefarious Shadow Council and attempted to corrupt the many orc clans of Draenor so they would become agents of the Legion. \n                        </p>\n                    </Collapse.Item>\n                </Collapse>\n            )\n        }\n    }\n```"},function(n,e){n.exports="### 基础用法\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <ColorPicker />\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="## Datepicker 颜色选择器\r\n用于选择颜色。\r\n@@------------@@\r\n### API\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nrange | 是否启用范围选择 | ```Boolean``` | ```false```\r\ndate | 初始定位的日期, 当设置```range```时, 应为长度为2的```Date```数组,否则为```Date```实例 | ```Date丨Date[]``` | -\r\nsize | 选择器的尺寸 | ```'large'丨'middle'丨'small'``` | ```'middle'```\r\ndisabled | 是否禁用 | ```Boolean``` | ```false``` \r\nplaceholder | 占位文本 | ```String``` | -\r\nformatter | 日期格式化函数 | ```(date: Date丨Date[]):String => {}``` | -\r\ndisableDate | 禁用日期函数, 参数```cellDate```为单元格代表的日期对象 | ```(data: Date): Boolean => {}```  | -\r\nonChange | 用户直接输入时触发, 可用于校验输入合法性, 参数```value```为输入值 | ```(value: String) => {}``` | -\r\nonPick | 用户选择日期值时触发 | ```(data: Date丨Date[]) => {} ``` | -"},function(n,e){n.exports='### Basic\r\nA simple DatePicker.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <DatePicker placeholder="Please select date" className="demo-datepicker-input"/>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Disable some date\r\nThe cell is unselectable when function ```disableDate``` return ```false```.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                currentDate: new Date()\r\n            }\r\n        }\r\n        disablePast(date){\r\n            return this.state.currentDate.getTime() > date.getTime();\r\n        }\r\n        render(){\r\n            return (\r\n                <DatePicker className="demo-datepicker-input" placeholder="past date is unselectable" disableDate={this.disablePast.bind(this)}/>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Disabled DatePicker\r\nDisable DatePicker.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return <DatePicker placeholder="disabled picker" className="demo-datepicker-input" disabled/>\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Formatter\r\nConvert date or date array to string through specific format.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        format(date: Date){\r\n            const year = date.getFullYear();\r\n            let month = date.getMonth() + 1;\r\n            let day = date.getDate();\r\n            if(month < 10){\r\n                month = `0${month}`;\r\n            }\r\n            if(day < 10){\r\n                day = `0${day}`;\r\n            }\r\n            return `${year}/${month}/${day}`;\r\n        }\r\n\r\n        formatRange(dates: Date[]){\r\n            return dates.map(date => this.format(date)).join(\' ~ \');\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <DatePicker placeholder="year/month/date" className="demo-datepicker-input" formatter={this.format} style={{marginRight: 16}} />\r\n                    <DatePicker placeholder="year/month/date ~ year/month/date" className="demo-datepicker-input" range formatter={this.formatRange.bind(this)} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## DatePicker\r\nTo select date or date range.\r\n@@------------@@\r\n### API\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nrange | indicate whether to select date range | ```Boolean``` | ```false```\r\ndefaultValue | the initial date | ```Date丨Date[]``` | -\r\nvalue | to set date | ```Date丨Date[]``` | -\r\nmode | mode of picker | ```'year'丨'month'丨'date'``` | ```'date'```\r\nsize | size of datepicker | ```'large'丨'middle'丨'small'``` | ```'middle'```\r\ndisabled | disable datepicker | ```Boolean``` | ```false``` \r\nplaceholder | the text in input when the value is empty | ```String``` | -\r\nformatter | to convert date to string | ```(date: Date丨Date[]):String => {}``` | -\r\ndisableDate | to disable specific date | ```(data: Date): Boolean => {}```  | -\r\nonChange | the callback function triggered by input value change | ```(value: String) => {}``` | -\r\nonPick | the callback function triggered by picking date | ```(data: Date丨Date[]) => {} ``` | -"},function(n,e){n.exports='### Mode of DatePicker\r\nThere are three picker mode that can be used to pick year, month or date.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Row className="demo-datepicker-list">\r\n                    <Col xs={24} sm={24} md={8} lg={8}>\r\n                        <DatePicker placeholder="date picker" />\r\n                    </Col>\r\n                    <Col xs={24} sm={24} md={8} lg={8}>\r\n                        <DatePicker mode="month" placeholder="month picker"/>\r\n                    </Col>\r\n                    <Col xs={24} sm={24} md={8} lg={8}>\r\n                        <DatePicker mode="year" placeholder="year picker"/>                    \r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### DateRangePicker\r\nTo pick date range.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <DatePicker placeholder="Pick date range" className="demo-datepicker-input" range/>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Size\r\nThere are three different size of datepicker.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-datepicker-list">\r\n                    <DatePicker placeholder="large" className="demo-datepicker" size="large" />\r\n                    <DatePicker placeholder="middle" className="demo-datepicker" />\r\n                    <DatePicker placeholder="small" className="demo-datepicker" size="small" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 基本用法\r\n简单的日期选择器。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <DatePicker placeholder="请选择日期" className="demo-datepicker-input"/>\r\n            )\r\n        }\r\n    }\r\n``` '},function(n,e){n.exports='### 禁用日期\n属性```disableDate```可以禁用你不想让用户选择的日期, 比如禁用过去或未来的时间。\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                currentDate: new Date()\n            }\n        }\n        disablePast(date){\n            return this.state.currentDate.getTime() > date.getTime();\n        }\n        render(){\n            return (\n                <DatePicker className="demo-datepicker-input" placeholder="过去日期不可选" disableDate={this.disablePast.bind(this)}/>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 禁用日期选择器\n设置```disabled```可使日期选择器不可用。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return <DatePicker placeholder="禁用日期选择器" className="demo-datepicker-input" disabled/>\n        }\n    }\n```'},function(n,e){n.exports='### 格式化\n通过```formatter```函数可以设置自定义格式化的日期。formatter将返回一个```date```参数, 当设置```range```时, ```date```为一个Date数组, 否则为一个Date对象。\n```javascript\n    class Demo extends React.Component {\n        format(date: Date){\n            const year = date.getFullYear();\n            let month = date.getMonth() + 1;\n            let day = date.getDate();\n            if(month < 10){\n                month = `0${month}`;\n            }\n            if(day < 10){\n                day = `0${day}`;\n            }\n            return `${year}/${month}/${day}`;\n        }\n\n        formatRange(dates: Date[]){\n            return dates.map(date => this.format(date)).join(\' ~ \');\n        }\n\n        render(){\n            return (\n                <div>\n                    <DatePicker placeholder="年/月/日" className="demo-datepicker-input" formatter={this.format} style={{marginRight: 16}} />\n                    <DatePicker placeholder="年/月/日 ~ 年/月/日" className="demo-datepicker-input" range formatter={this.formatRange.bind(this)} />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## DatePicker 日期选择器\r\n用于选择日期或者日期范围。\r\n@@------------@@\r\n### API\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nrange | 是否启用范围选择 | ```Boolean``` | ```false```\r\ndefaultValue | 初始定位的日期, 当设置```range```时, 应为长度为2的```Date```数组,否则为```Date```实例 | ```Date丨Date[]``` | -\r\nvalue | 当前日期对象 | ```Date丨Date[]``` | -\r\nmode | 选择器模式 | ```'year'丨'month'丨'date'``` | ```'date'```\r\nsize | 选择器的尺寸 | ```'large'丨'middle'丨'small'``` | ```'middle'```\r\ndisabled | 是否禁用 | ```Boolean``` | ```false``` \r\nplaceholder | 占位文本 | ```String``` | -\r\nformatter | 日期格式化函数 | ```(date: Date丨Date[]):String => {}``` | -\r\ndisableDate | 禁止选择指定的日期 | ```(data: Date): Boolean => {}```  | -\r\nonChange | 用户直接输入时触发, 可用于校验输入合法性, 参数```value```为输入值 | ```(value: String) => {}``` | -\r\nonPick | 用户选择日期值时触发 | ```(data: Date丨Date[]) => {} ``` | -"},function(n,e){n.exports='### 选择器模式\n设置```mode```属性可以设置面板展示的模式, 支持年、月、日三种选择模式。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Row className="demo-datepicker-list">\n                    <Col xs={24} sm={24} md={8} lg={8}>\n                        <DatePicker placeholder="日选择器" />\n                    </Col>\n                    <Col xs={24} sm={24} md={8} lg={8}>\n                        <DatePicker mode="month" placeholder="月选择器"/>\n                    </Col>\n                    <Col xs={24} sm={24} md={8} lg={8}>\n                        <DatePicker mode="year" placeholder="年选择器"/>                    \n                    </Col>\n                </Row>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 范围选择\n设置```range```可以选择日期范围。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <DatePicker placeholder="选择日期范围" className="demo-datepicker-input" range/>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 不同尺寸\n设置```size```可以控制日期选择器的尺寸。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-datepicker-list">\n                    <DatePicker placeholder="大尺寸选择器" className="demo-datepicker" size="large" />\n                    <DatePicker placeholder="中尺寸选择器" className="demo-datepicker" />\n                    <DatePicker placeholder="小尺寸选择器" className="demo-datepicker" size="small" />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 异步关闭\n常用于表单提交。\n```javascript\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.state = {\n                visible: false,\n                fetching: false\n            }\n            this.show = this.show.bind(this);\n            this.submit = this.submit.bind(this);\n        }\n        show(){\n            this.setState({\n                visible: true\n            })\n        }\n        request(){\n            return new Promise(resolve => {\n                const timer = setTimeout(() => {\n                    resolve();\n                }, 3000);\n            });\n        }\n        submit(){\n            if(this.state.fetching) return;\n            this.setState({\n                fetching: true\n            }, () => {\n                this.request().then(() => {\n                    this.setState({\n                        visible: false,\n                        fetching: false\n                    })\n                });\n            })\n        }\n        render(){\n            const { fetching, visible } = this.state;\n            return (\n                <div>\n                    <Button type="primary" onClick={this.show}>显示Dialog</Button>\n                    <Dialog \n                        visible={visible} \n                        title={\'Dialog标题\'} \n                        footer={\n                            <div className="demo-dialog-footer">\n                                <Button loading={fetching} type="primary" onClick={this.submit}>提交</Button>                            \n                            </div>\n                        }\n                    >\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                    </Dialog>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 基本用法\n```javascript\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.state = {\n                visible: false\n            }\n            this.show = this.show.bind(this);\n        }\n        show(){\n            this.setState({\n                visible: true\n            })\n        }\n        render(){\n            return (\n                <div>\n                    <Button type=\"primary\" onClick={this.show}>显示Dialog</Button>\n                    <Dialog visible={this.state.visible} title={'Dialog标题'}>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                    </Dialog>\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 带脚部\n```javascript\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.state = {\n                visible: false\n            }\n            this.show = this.show.bind(this);\n            this.hide = this.hide.bind(this);\n        }\n        show(){\n            this.setState({\n                visible: true\n            });\n        }\n        hide(evt){\n            evt.preventDefault();\n            this.setState({\n                visible: false\n            });\n        }\n        render(){\n            const footer = (\n                <div className="demo-dialog-footer">\n                    <Button onClick={this.hiden}>取消</Button>\n                    <Button type="primary" onClick={this.hide}>确定</Button>\n                </div>\n            )\n            return (\n                <div>\n                    <Button type="primary" onClick={this.show}>显示Dialog</Button>\n                    <Dialog visible={this.state.visible} title={\'Dialog标题\'} footer={footer}>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                        <p>Dialog content ...</p>\n                    </Dialog>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## 对话框\n一般用于处理与用户交互相关事务。\n@@-----@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nvisible | 是否显示对话框 | ```Boolean``` | ```false```\nwidth | 对话框宽度 | ```Number``` | ```360```\ntitle | 对话框标题 | ```String``` ```ReactNode``` | -\nfooter | 对话框脚部, 不设置时不展示 | ```Boolean``` | -\nclosable | 是否显示关闭按钮 | ```Boolean``` | ```true```\nonVisibleChange | 显示/隐藏时触发, 参数```visible```为当前显隐状态 | ```(visible: Boolean) => {}```| -\n"},function(n,e){n.exports="### 预设\n提供几种常用的对话框预设。\n```javascript\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.open = this.open.bind(this);\n            this.handleConfirm = this.handleConfirm.bind(this);\n        }\n        open(type){\n            Dialog.confirm({\n                title: '确认',\n                type,\n                content: '是否删除所选项目',\n                onConfirm: this.handleConfirm\n            });\n        }\n        handleConfirm(shutdown: Function){\n            shutdown();\n        }\n        render(){\n            return (\n                <div>\n                    <Button type=\"success\" onClick={() => this.open('success')}>success</Button>\n                    <Button type=\"error\" onClick={() => this.open('error')}>error</Button>\n                    <Button type=\"info\" onClick={() => this.open('info')}>info</Button>\n                    <Button type=\"warning\" onClick={() => this.open('warning')}>warning</Button>\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### Basic\nA simple Dropdown.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu style={{width: 160}}>\n                    <Dropdown.Item>\n                        <a href="/#/button">Button</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/dialog">Dialog</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/select">Select</a>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item>\n                        <a href="/#/carousel">Carousel</a>\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-list">\n                    <Dropdown menu={menu}>\n                        <a>Dropdown<Icon type="caret-down"/></a>\n                    </Dropdown>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Dropdown button\n```Dropdown.Button``` as the trigger element.\n>```Dropdown.Button``` is just an instant component provided for triggering.\n\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu style={{width: 160}}>\n                    <Dropdown.Item>\n                        <a href="/#/button">Button</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/dialog">Dialog</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/select">Select</a>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item>\n                        <a href="/#/carousel">Carousel</a>\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-list">\n                    <Dropdown menu={menu}>\n                        <Dropdown.Button>Own Button</Dropdown.Button>\n                    </Dropdown>\n                    <Dropdown menu={menu}>\n                        <Button type="primary">Customized Button<Icon type="caret-down"/></Button>\n                    </Dropdown>\n                </div>\n            )\n        }\n    }\n``` '},function(n,e){n.exports="### Dropdown\nPop-up or pop-down menu.\n@@---------@@\n\n#### Dropdown\nproperty | description | type | default\n-----|------| ---- | ---\nplacement | popup position | ```'bottom-left'丨'bottom-center'丨'botton-right'丨'top-left'丨'top-center'丨'top-right'``` | ```'bottom-left'```\nmenu | dropdown menu | ```Dropdown.Menu``` | -\ntrigger | how to trigger | ```'click'丨'hover'``` | ```'click'```\nmenuStyle | customized menu style | ```Object``` | -\nonVisibleChange | the callback function triggered by change of menu visibility | ```(visible: Boolean) => {}```| -\n\n\n#### Dropdown.Button\nproperty | description | type | default\n-----|------| ---- | ---\nsize | size of button | ```'large'丨'middle'丨'small'``` | ```'large'```\ntype | theme of button | ```'primary'丨'success'丨'error'丨'warning'丨'info'``` | ```'primary'```\nonClick | the callback function triggered by right arrow button | ```Function``` | -\n\n#### Dropdown.Menu\nproperty | description | type | default\n-----|------| ---- | ---\nclassName | extra CSS class | ```String``` | -\nstyle | customized style | ```Object``` | -"},function(n,e){n.exports='### Placement\nThe position of menu appears are controlled by attribute ```placement```.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu>\n                    <Dropdown.Item>Menu Item 001</Dropdown.Item>\n                    <Dropdown.Item>Menu Item 002</Dropdown.Item>\n                    <Dropdown.Item>Menu Item 003</Dropdown.Item>\n                    <Dropdown.Item>Menu Item 004</Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-grid">\n                    <Row>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="top-left">\n                                <Button link>top-left</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="top-center">\n                                <Button link>top-center</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="top-right">\n                                <Button link>top-right</Button>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu}>\n                                <Button link>bottom-left</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="bottom-center">\n                                <Button link>bottom-center</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="bottom-right">\n                                <Button link>bottom-right</Button>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Trigger\nThere are two ways to trigger menu appearing and disappearing.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu style={{width: 160}}>\n                    <Dropdown.Item>\n                        <a href="/#/button">Button</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/dialog">Dialog</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/select">Select</a>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item>\n                        <a href="/#/carousel">Carousel</a>\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-list">\n                    <Dropdown menu={menu}>\n                        <Button link type="primary">Click me!<Icon type="caret-down"/></Button>\n                    </Dropdown>\n                    <Dropdown menu={menu} trigger="hover">\n                        <Button link type="primary">Hover me!<Icon type="caret-down"/></Button>\n                    </Dropdown>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 基础用法\n简洁的下拉菜单。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu style={{width: 160}}>\n                    <Dropdown.Item>\n                        <a href="/#/button">按钮</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/dialog">对话框</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/select">选择器</a>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item>\n                        <a href="/#/carousel">轮播</a>\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-list">\n                    <Dropdown menu={menu}>\n                        <a>下拉菜单<Icon type="caret-down"/></a>\n                    </Dropdown>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 下拉菜单按钮\r\n提供组件```Dropdown.Button```作为下拉按钮。\r\n>```Dropdown.Button```其实是一个定制的按钮组，当然用户也可以自定义，这里只是提供一个即用的组件\r\n\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const menu = (\r\n                <Dropdown.Menu style={{width: 160}}>\r\n                    <Dropdown.Item>\r\n                        <a href="/#/button">按钮</a>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item>\r\n                        <a href="/#/dialog">对话框</a>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Item>\r\n                        <a href="/#/select">选择器</a>\r\n                    </Dropdown.Item>\r\n                    <Dropdown.Divider/>\r\n                    <Dropdown.Item>\r\n                        <a href="/#/carousel">轮播</a>\r\n                    </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            )\r\n            return (\r\n                <div className="demo-dropdown-list">\r\n                    <Dropdown menu={menu}>\r\n                        <Dropdown.Button>自带按钮</Dropdown.Button>\r\n                    </Dropdown>\r\n                    <Dropdown menu={menu}>\r\n                        <Button type="primary" icon="caret-down"></Button>\r\n                    </Dropdown>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n``` '},function(n,e){n.exports="### Dropdown 下拉菜单\n向下/向上弹出的列表。\n### 代码示例\n@@---------@@\n\n#### Dropdown\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nplacement | 菜单弹出位置 | ```'bottom-left'丨'bottom-center'丨'botton-right'丨'top-left'丨'top-center'丨'top-right'``` | ```'bottom-left'```\nmenu | 菜单 | ```Dropdown.Menu``` | -\ntrigger | 菜单显隐的触发方式 | ```'click'丨'hover'``` | ```'click'```\nmenuStyle | 菜单的自定义样式 | ```Object``` | -\nonVisibleChange | 显示/隐藏时触发, 参数```visible```为当前显隐状态 | ```(visible: Boolean) => {}```| -\nonItemClick | 点击菜单项触发, 参数为对应的```action```属性 | ```(action: String) => {}``` | -\n\n#### Dropdown.Button\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nsize | 按钮尺寸 | ```'large'丨'middle'丨'small'``` | ```'large'```\ntype | 按钮主题 | ```'primary'丨'success'丨'error'丨'warning'丨'info'``` | ```'primary'```\nonClick | 右侧箭头按钮点击事件 | ```Function``` | -\n\n#### Dropdown.Menu\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nclassName | 附加的类名 | ```String``` | -\nstyle | 自定义样式 | ```Object``` | -\n\n#### Dropdown.Item\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\naction | 菜单项的附加动作 | ```String``` | -\ndisabled | 是否禁用 | ```Boolean``` | ```false```\ndivided | 是否以分割线显示 | ```Boolean``` | ```false```"},function(n,e){n.exports='### 菜单位置\n菜单可向上或向下弹出, 位置可靠左、居中、靠右。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu>\n                    <Dropdown.Item>Menu Item 001</Dropdown.Item>\n                    <Dropdown.Item>Menu Item 002</Dropdown.Item>\n                    <Dropdown.Item>Menu Item 003</Dropdown.Item>\n                    <Dropdown.Item>Menu Item 004</Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-grid">\n                    <Row>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="top-left">\n                                <Button link>top-left</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="top-center">\n                                <Button link>top-center</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="top-right">\n                                <Button link>top-right</Button>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu}>\n                                <Button link>bottom-left</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="bottom-center">\n                                <Button link>bottom-center</Button>\n                            </Dropdown>\n                        </Col>\n                        <Col xs={24} sm={12} md={8} lg={8}>\n                            <Dropdown trigger="hover" menu={menu} placement="bottom-right">\n                                <Button link>bottom-right</Button>\n                            </Dropdown>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 触发方式\n支持```click```和```hover```触发方式。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const menu = (\n                <Dropdown.Menu style={{width: 160}}>\n                    <Dropdown.Item>\n                        <a href="/#/button">按钮</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/dialog">对话框</a>\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                        <a href="/#/select">选择器</a>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item>\n                        <a href="/#/carousel">轮播</a>\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            )\n            return (\n                <div className="demo-dropdown-list">\n                    <Dropdown menu={menu}>\n                        <Button link type="primary">Click me!<Icon type="caret-down"/></Button>\n                    </Dropdown>\n                    <Dropdown menu={menu} trigger="hover">\n                        <Button link type="primary">Hover me!<Icon type="caret-down"/></Button>\n                    </Dropdown>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 异步验证\n异步校验一般用于请求服务器校验, 例如验证用户名重复或者验证码。一般通过Blur事件或者手动触发。\n```javascript\n    const { enhanceForm, Schema, InputField } = Form;\n\n    const mockRequest = () => new Promise((resolve, reject) => {\n        const timer = setTimeout(() => {\n            reject();\n            clearTimeout(timer);\n        }, Math.random() * 2000);\n    });\n\n    const schema = {\n        username: Schema.string().async(mockRequest, \'用户名已被注册\').required(\'必填\')\n    }\n\n    class DemoForm extends React.Component {\n        render(){\n            return (\n                <Form style={{ width: 480 }} labelWidth={84}>\n                    <InputField name="username" label="用户名:" required validateTrigger="blur" placeholder="输入任意用户名" />\n                </Form>\n            )\n        }    \n    }\n\n    const Demo = enhanceForm(schema)(DemoForm);\n```'},function(n,e){n.exports="### 强化表单项\n系统提供```InputField```, ```SelectField```, ```CheckboxField```等常用强化表单项, 当这些组件不能满足业务需求时, 你可以封装自定义的强化表单项。\n```javascript\n    const { enhanceForm, enhanceControl, Field, Schema } = Form;\n    const EnhancedInput = enhanceControl(Input);\n    \n    const mockRequest = (value: mixed) => new Promise((resolve, reject) => {\n        const timer = setTimeout(() => {\n            if(value === '123456'){\n                resolve();\n            }else{\n                reject();\n            }\n            clearTimeout(timer);\n        }, Math.random() * 2000);\n    });\n    \n    const schema = {\n        validateCode: Schema.string().minLength(6).maxLength(6).required().async(mockRequest, '验证码错误')\n    }\n    class DemoForm extends React.Component {\n        showCode(){\n            message.info('验证码: 123456');\n        }\n        render(){\n            const errors = this.props.errors;\n            return (\n                <Form style={{width: 480}} labelWidth={84}>\n                    <Field label=\"验证码:\" required status={errors && errors['validateCode'] && 'error'}\n                        feedback={errors && errors['validateCode'] && errors['validateCode'][0]}\n                    >\n                        <EnhancedInput name=\"validateCode\" placeholder=\"六位数字验证码\" validateTrigger=\"blur\" style={{width: 180, marginRight: 12}} />\n                        <Button onClick={this.showCode.bind(this)} type=\"primary\">获取验证码</Button>\n                    </Field>\n                </Form>\n            )\n        }\n    }\n    const Demo = enhanceForm(schema)(DemoForm);\n```"},function(n,e){n.exports='<InputField name="username" label="用户名:" placeholder="由6-14位字符、数字及下划线组成" autoComplete="off" required />\n<InputField name="password" placeholder="8到16位密码" label="密码:" htmlType="password" autoComplete="off" required />\n<InputField name="idNumber" placeholder="二代身份证号码" label="身份证号:" autoComplete="off" required />\n<NumberInputField name="age" minimum={18} label="年龄:" required />\n<SelectField name="major" label="专业方向:" placeholder="请选择一项开发技能" required>\n    <Select.Option label="Web前端开发" value="1" />\n    <Select.Option label="后端开发" value="2" />\n    <Select.Option label="Android开发" value="3" />\n    <Select.Option label="IOS开发" value="4" />\n    <Select.Option label="DBA" value="5" />\n</SelectField>\n<DatePickerField name="date" label="毕业日期:" placeholder="格式如: 2017-06-30" required />\n<SliderField name="salary" label="期望月薪:" minimum={1000} maximum={100000} step={1000}/>\n<RadioGroupField name="gender" label="性别:" >\n    <Radio value="male">帅哥</Radio>\n    <Radio value="female">美女</Radio>\n</RadioGroupField>\n<CheckboxGroupField name="hobbies" label="爱好:" values={this.state.model.hobbies}>\n    <Checkbox value="football">足球</Checkbox>\n    <Checkbox value="basketball">篮球</Checkbox>\n    <Checkbox value="painting">画画</Checkbox>\n    <Checkbox value="photograph">摄影</Checkbox>\n</CheckboxGroupField>\n<ToggleField name="public" label="公开资料:" onText="开" offText="关" name="public" checked={this.state.model.public} />\n<InputField name="introduction" label="自我介绍:" placeholder="说两句吧..."\n    textarea\n/>'},function(n,e){n.exports='### 排列方式\n支持水平、垂直和内联三种表单排列方式。\n* 水平排列: 标签和控件齐平(默认)。\n* 垂直排列: 标签和控件分行展示。\n* 内联排列: 表单项水平展示。\n\n```javascript\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.state = {\n                gender: \'male\',\n                mode: \'horizontal\'\n            }\n        }\n        changeMode(value: String){\n            this.setState({\n                mode: value\n            });\n        }\n        handleChange(gender){\n            this.setState({\n                gender\n            })\n        }\n        handleSubmit(evt){\n            evt.preventDefault();\n            message.success(\'注册成功\', 3000);\n        }\n        render(){\n            const { gender, mode } = this.state;\n            return (\n                <div style={{width: 480}}>\n                    <div style={{marginBottom: 18}}>\n                        <Radio.Group value={mode} onChange={this.changeMode.bind(this)}>\n                            <Radio.Button value="horizontal">水平表单</Radio.Button>\n                            <Radio.Button value="vertical">垂直表单</Radio.Button>\n                        </Radio.Group>\n                    </div>\n                    <Form mode={mode} labelWidth={84} onSubmit={this.handleSubmit.bind(this)}>\n                        <Form.Field label="用户名:">\n                            <Input placeholder="6到18位英文、数字或下划线"/>\n                        </Form.Field>\n                        <Form.Field label="密码:">\n                            <Input htmlType="password" placeholder="至少6位字符" />\n                        </Form.Field>\n                        <Form.Field label="密码问题:">\n                            <Select defaultValue="1" placeholder="用于找回密码">\n                                <Select.Option value="1" label="你的生日是几月几号" />\n                                <Select.Option value="2" label="你家的门牌号" />\n                                <Select.Option value="3" label="你就读学校的名称"/>\n                            </Select>\n                        </Form.Field>\n                        <Form.Field label="性别:">\n                            <Radio.Group value={gender} onChange={this.handleChange.bind(this)}>\n                                <Radio value="male">男</Radio>\n                                <Radio value="femaile">女</Radio>\n                            </Radio.Group>\n                        </Form.Field>\n                        <Form.Field label="爱好:">\n                            <Checkbox>吃饭</Checkbox>\n                            <Checkbox>睡觉</Checkbox>\n                            <Checkbox>骑车</Checkbox>\n                            <Checkbox>打球</Checkbox>\n                        </Form.Field>\n                        <Form.Field label="自我介绍:">\n                            <Input textarea placeholder="说两句吧。。。" />\n                        </Form.Field>\n                        <Form.Field>\n                            <Button htmlType="submit" type="primary">注册</Button>\n                        </Form.Field>\n                    </Form>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 内联表单\r\n适合用于空间有限且表单项较少的情况, 如导航条内。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Form mode="inline">\r\n                        <Form.Field>\r\n                            <Input iconBefore="user" />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Input htmlType="password" iconBefore="lock" />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Button htmlType="submit" type="success">登录</Button>\r\n                        </Form.Field>\r\n                    </Form>\r\n                    <Navigation>\r\n                        <Navigation.Item>首页</Navigation.Item>\r\n                        <Navigation.Item>导航1</Navigation.Item>\r\n                        <Navigation.Item>导航2</Navigation.Item>\r\n                        <Form mode="inline">\r\n                            <Form.Field>\r\n                                <Input iconBefore="user" />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Input htmlType="password" iconBefore="lock" />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <Button htmlType="submit" type="success">登录</Button>\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Navigation>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Form 表单\n具有收集、校验和提交数据功能的组件, 可包含单选框、复选框、输入框和选择器等。\n\n@@----------------@@\n### API\n\n#### Form\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nmode | 表单的布局方式 | ```'horizontal'丨'vertical'丨'inline'``` | ```'horizontal'```\nlabelWidth | 标签的宽度 | ```Number``` | ```84```\nlabelAlign | 标签的对齐方式 | ```'left'丨'center'丨'right'``` | ```right```\nonSubmit | 提交表单时触发 | ```Function``` | -\n\n#### Form.Field\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nmode | 表单的布局方式 | ```'horizontal'丨'vertical'丨'inline'``` | ```'horizontal'```\nlabelWidth | 标签的宽度, 若设置, 将覆盖Form组件的定义 | ```Number``` | -\nlabelAlign | 标签的对齐方式, , 若设置, 将覆盖Form组件的定义 | ```'left'丨'center'丨'right'``` | -\nlabel | 标签的文本 | ```String丨ReactNode``` | -\nrequired | 是否在标签前显示红色星号 | ```Boolean``` | ```false```\nstatus | 表单项的状态, 可用于自定义表单验证 | ```'success'丨'error'丨'warning' 丨'normal'``` | ```'normal'```\nfeedback | 表单项的反馈文本, 用于错误提示 | ```String丨ReactNode``` | -\nextra | 表单项的额外信息文本, 用于显示额外提示信息 | ```String丨ReactNode``` | -\n\n#### Form.enhanceForm(schema: Object, options: Object)(WrappedForm: ReactElement) => (EnhancedForm: ReactElement)\n> 高阶组件, 用于提升form元素或封装form元素的组件, 提升后的组件具有表单验证功能。\n\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nschema | 数据的模型提要, 用于定义字段的类型和验证规则, 必填。 详细用法见本库的配套表单验证工具[validate-promisify](https://github.com/AnacondaY/validate-promisify) | ```Object``` | -\noptions.model | 数据实体对象, 可用于实现外层的数据双向绑定。 例如利用```Redux```的```mapStateToProps```注入数据。 | ```Object``` | -\noptions.validateTrigger | 验证触发的时机, 为```null```时将禁用验证 | ```'change'丨'blur'丨null``` | - \noptions.onModelChange | 数据对象改变时触发, 可用于外层数据的双向绑定。 | ```(values: Object) => {}``` | -\noptions.onError | 表单项有错误时触发 | ```(errors: Object) => {}``` | -\n\n#### WrappedForm\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nprops.cmrForm.model | 当前数据对象 | ```Object``` | -\nprops.cmrForm.errors | 当前错误信息集合 | ```Object``` | -\nprops.cmrForm.validateForm | 验证整个表单 | ```Function``` | -\nprops.cmrForm.resetForm | 重置整个表单数据和错误信息 | ```Function``` | -\n\n#### Form.enhanceControl(Control: ReactElemnt) => (EnhancedControl: ReactElement)\n> 用于提升表单控件, 提升后可以实现与EnhancedForm中的数据对象和错误信息进行双向绑定。Control可以是```Input```, ```Select```, ```Upload```等表单组件, 也可以是原生HTML控件甚至其他库组件，前提是Control能够支持onChange、onBlur、onFocus和value等属性。\n\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nname | 字段名称, 与schema中的key对应, 必填 | ```String``` | -\nvalidateTrigger | 校验时机, 若设置, 将覆盖enhanceForm中的设置 | ```'change'丨'blur'丨null``` | -\n\n#### Form.wrapField(Control: ReactElement) => (WrappedField: ReactElement)\n> 用于将控件包裹到```Field```中, 使其能够自动接收错误信息并改变表单项状态和显示错误信息。wrapField只是为避免重复代码所提供的快捷包装函数, 所有预置的强化表单项均基于此包装, 若不满足你的需求可自行封装。\n\n#### EnhancedField\n系统预置一系列强化表单项, 可直接使用。 所有强化表单项可接收```Field```和对应表单控件的所有参数。\n* Form.InputField\n* Form.SelectField\n* Form.CheckboxGroupField\n* Form.RadioGroupField\n* Form.DatePickerField\n* Form.NumberInputField\n* Form.ToggleField\n* Form.SliderField\n* Form.UplodaField\n\n\n\n\n\n\n"},function(n,e){n.exports='### 触发时机\n表单默认采用```change```事件触发验证, 同时支持```blur```和手动触发。\n```javascript\n    const { Schema, enhanceForm, Field, InputField } = Form;\n    const schema = {\n        value1: Schema.string().minLength(8).maxLength(18).required(\'必填\'),\n        value2: Schema.string().minLength(6).maxLength(14).required(\'必填\'),\n        value3: Schema.string().email().required(\'必填\')\n    }\n    class DemoForm extends React.Component {\n        render(){\n            return (\n                <Form style={{width: 480}} labelWidth={84}>\n                    <InputField name="value1" label="onChange:" required autoComplete="off" />\n                    <InputField name="value2" label="onBlur:" required autoComplete="off" validateTrigger="blur"/>\n                    <InputField name="value3" label="onSubmit:" required autoComplete="off" validateTrigger={null} />\n                    <Field>\n                        <Button type="success" onClick={this.props.cmrForm.validateForm.bind(this)}>提交</Button>\n                    </Field>\n                </Form>\n            )\n        }\n    }\n    const Demo = enhanceForm(schema)(DemoForm);\n```'},function(n,e){n.exports='### 表单验证\r\n```Form```和```Form.Field```都是无状态组件, 本身不具有表单验证功能。采用```enhanceForm```和强化表单项可实现表单验证功能。\r\n```javascript\r\n    const { enhanceForm, Field, Schema, CheckboxGroupField, RadioGroupField, SelectField, DatePickerField, InputField, ToggleField, SliderField, NumberInputField, UploadField } = Form;\r\n    const schema = {\r\n        username: Schema.string().minLength(8).required(\'必填\'),\r\n        password: Schema.string().minLength(6).maxLength(16).required(\'必填\'),\r\n        idNumber: Schema.string().ChineseID().required(\'必填\'),\r\n        age: Schema.number().greaterThan(17).required(),\r\n        major: Schema.string().required(\'必填\'),\r\n        date: Schema.object().date().required(\'必填\'),\r\n        gender: Schema.string().oneOf([\'male\', \'female\']),\r\n        hobbies: Schema.array(),\r\n        public: Schema.boolean(),\r\n        salary: Schema.number().rangeOf(1000, 100000),\r\n        introduction: Schema.string().minLength(5)\r\n    };\r\n\r\n    class DemoForm extends React.Component {\r\n        handleSubmit(){\r\n            this.props.cmrForm.validateForm();\r\n        }\r\n        render(){\r\n            return (\r\n                <Form labelWidth={84} style={{width: 480}}>\r\n                    <InputField name="username" label="用户名:" placeholder="由6-14位字符、数字及下划线组成" autoComplete="off" required />\r\n                    <InputField name="password" placeholder="8到16位密码" label="密码:" htmlType="password" autoComplete="off" required />\r\n                    <InputField name="idNumber" placeholder="二代身份证号码" label="身份证号:" autoComplete="off" required \r\n                        extra={<div className="demo-field-extra">系统会严格保密您的身份证信息</div>}\r\n                    />\r\n                    <NumberInputField name="age" minimum={18} label="年龄:" required />\r\n                    <SelectField name="major" label="专业方向:" placeholder="请选择一项开发技能" required>\r\n                        <Select.Option label="Web前端开发" value="1" />\r\n                        <Select.Option label="后端开发" value="2" />\r\n                        <Select.Option label="Android开发" value="3" />\r\n                        <Select.Option label="IOS开发" value="4" />\r\n                        <Select.Option label="DBA" value="5" />\r\n                    </SelectField>\r\n                    <DatePickerField name="date" label="毕业日期:" placeholder="格式如: 2017-06-30" required />\r\n                    <SliderField name="salary" label="期望月薪:" minimum={1000} maximum={100000} step={1000}/>\r\n                    <RadioGroupField name="gender" label="性别:" >\r\n                        <Radio value="male">帅哥</Radio>\r\n                        <Radio value="female">美女</Radio>\r\n                    </RadioGroupField>\r\n                    <CheckboxGroupField name="hobbies" label="爱好:">\r\n                        <Checkbox value="football">足球</Checkbox>\r\n                        <Checkbox value="basketball">篮球</Checkbox>\r\n                        <Checkbox value="painting">画画</Checkbox>\r\n                        <Checkbox value="photograph">摄影</Checkbox>\r\n                    </CheckboxGroupField>\r\n                    <ToggleField name="public" label="公开资料:" onText="开" offText="关" name="public" />\r\n                    <InputField name="introduction" label="自我介绍:" placeholder="说两句吧..."\r\n                        textarea\r\n                    />\r\n                    <UploadField name="file" label="附件:" action="//jsonplaceholder.typicode.com/posts/">\r\n                        <Button type="primary">点击上传</Button>\r\n                    </UploadField>\r\n                    <Field>\r\n                        <Button type="success" style={{marginRight: 12}} onClick={this.handleSubmit.bind(this)}>注册</Button>\r\n                    </Field>\r\n                </Form>\r\n            )\r\n        }\r\n    }\r\n\r\n    const Demo = enhanceForm(schema)(DemoForm);\r\n```'},function(n,e){n.exports='### Grid system\r\nSimilar to [BootStrap](https://getbootstrap.com/), the containers are divided into rows(```Row```s) and columns(```Col```s), and each ```Row``` contains 24 ```Col```s at most rather than 12 columns like Bootstrap.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col span={24}>col-24</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={12}>col-12</Col>\r\n                        <Col span={12}>col-12</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={8}>col-8</Col>\r\n                        <Col span={8}>col-8</Col>\r\n                        <Col span={8}>col-8</Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Column sortation\r\nThe position of ```Col``` can be changed easily by attributes ```pull```(to left) and ```push```(to right).\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col span={8} push={16}>col-8 push-16</Col>\r\n                        <Col span={16} pull={8}>col-16 pull-8</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={12} push={12}>col-12 push-12</Col>\r\n                        <Col span={12} pull={12}>col-12 pull-12</Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Column gap\r\nThe gap between each ```Col``` in one ```Row``` are controlled by the atttribute ```gap``` of ```Row```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid-gap">\r\n                    <Row gap={8}>\r\n                        <Col span={8}>\r\n                            <div className="demo-col">col-8</div>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <div className="demo-col">col-8</div>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <div className="demo-col">col-8</div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Grid\r\nFlow layout created by rows and columns.\r\n\r\n### Examples\r\n@@---------------@@\r\n### API\r\n\r\n#### Row\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ntagName | the HTML tag of row | ```String``` | ```div```\r\ngap | gap between columns | ```Number``` | ```0```\r\nclassName | extra CSS class | ```String``` | -\r\nstyle | customized style | ```Object``` | -\r\n\r\n#### Col\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ntagName | the HTML tag of col | ```String``` | ```div```\r\nspan | the width of col. Integer between 0 and 24 | ```Number``` | -\r\noffset | the number of cells to offset Col from the left. Integer between 0 and 24. | ```Number``` | ```0```\r\npush | the distance of col from left to right. Integer between 0 and 24. | ```Number``` | ```0```\r\npull | the distance of col from right to left. Integer between 0 and 24. | ```Number``` | ```0```\r\nclassName | extra CSS class | ```String``` | -\r\nstyle | customized style | ```Object``` | -"},function(n,e){n.exports='### Column offset\r\nBy setting attribute ```offset```, the offset of ```Col``` to left can be regulated.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col span={6}>col-6</Col>\r\n                        <Col span={6} offset={6}>col-6 offset-6</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={12} offset={6}>col-12 offset-6</Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Responsive layout\r\nSame to responsive layout of [BootStrap](https://getbootstrap.com/), four breakpoints are provided for responding.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col \r\n                            xs={{\r\n                                span: 12,\r\n                                push: 12\r\n                            }}\r\n                            sm={{\r\n                                span: 8,\r\n                                push:8\r\n                            }}\r\n                            md={{\r\n                                span:6,\r\n                                push:6\r\n                            }}\r\n                            lg={{\r\n                                span:4,\r\n                                push:4,\r\n                            }}\r\n                        >\r\n                            col\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 栅格系统\r\n与[BootStrap](https://getbootstrap.com/)相似, 利用栅格将页面拆分为行(```Row```)和列(```Col```), 每行最多可容纳24列(```BootStrap```为12列)。\r\n\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col span={24}>col-24</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={12}>col-12</Col>\r\n                        <Col span={12}>col-12</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={8}>col-8</Col>\r\n                        <Col span={8}>col-8</Col>\r\n                        <Col span={8}>col-8</Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 列排序\r\n通过```pull```(向左)和```push```(向右)可控制列的位置和排序。\r\n\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col span={8} push={16}>col-8 push-16</Col>\r\n                        <Col span={16} pull={8}>col-16 pull-8</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={12} push={12}>col-12 push-12</Col>\r\n                        <Col span={12} pull={12}>col-12 pull-12</Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports='### 列间隙\r\n相同行中列之间的间隙, 通过```Row```组件的```gap```属性控制\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-grid-gap">\r\n                    <Row gap={8}>\r\n                        <Col span={8}>\r\n                            <div className="demo-col">col-8</div>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <div className="demo-col">col-8</div>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <div className="demo-col">col-8</div>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="## Grid 栅格\r\n用于行列流式布局。\r\n\r\n### 代码示例\r\n@@---------------@@\r\n### API\r\n\r\n#### Row\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ntagName | 组件外层标签 | ```string``` | ```div```\r\ngap | 列间隙 | ```number``` | ```0```\r\nclassName | 额外类名 | ```String``` | -\r\nstyle | 自定义样式 | ```Object``` | -\r\n\r\n#### Col\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ntagName | 组件外层标签 | ```string``` | ```div```\r\nspan | 列宽度, 可选[0, 24]之间的整数 | ```number``` | -\r\noffset | 列偏移量, 可选[0, 24]之间的整数 | ```number``` | ```0```\r\npush | 列向右移动的单位列宽数, 可选[0, 24]之间的整数 | ```number``` | ```0```\r\npull | 列向左移动的单位列宽数, 可选[0, 24]之间的整数 | ```number``` | ```0```\r\nclassName | 额外类名 | ```String``` | -\r\nstyle | 自定义样式 | ```Object``` | -"},function(n,e){n.exports='### 列偏移\r\n通过```offset```属性可以使列向右移动同等数值的单位列宽。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col span={6}>col-6</Col>\r\n                        <Col span={6} offset={6}>col-6 offset-6</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col span={12} offset={6}>col-12 offset-6</Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports='### 响应式布局\r\n与[BootStrap](https://getbootstrap.com/)响应式布局相同, 响应屏宽临界点分别为```xs(width < 768px)```, ```sm(768px <= width < 992px)```, ```md(992px <= width < 1200px)```, ```lg(width >= 1200px)```。\r\n\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-grid">\r\n                    <Row>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                        <Col xs={24} sm={12} md={8} lg={6}>xs-24 sm-12 md-6 lg-4</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col \r\n                            xs={{\r\n                                span: 12,\r\n                                push: 12\r\n                            }}\r\n                            sm={{\r\n                                span: 8,\r\n                                push:8\r\n                            }}\r\n                            md={{\r\n                                span:6,\r\n                                push:6\r\n                            }}\r\n                            lg={{\r\n                                span:4,\r\n                                push:4,\r\n                            }}\r\n                        >\r\n                            col\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports="## Icon\nSemantic vector icons.\n### Gallery\n@@---------------@@\n### API\n\nproperty | description | type | default\n-----|------| ---- | ---\ntype | type of icon | ```String``` | -\nclassName | extra CSS className | ```String``` | -\nstyle | extra style object | ```Object``` | -"},function(n,e){n.exports="## Icon 图标\n语义化的常用矢量图标。\n### 图标列表\n@@---------------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ntype | 控制按钮显示样式 | ```String``` | -\nclassName | 额外css类名 | ```String``` | -\nstyle | 额外样式 | ```Object``` | -"},function(n,e){n.exports='### Prefix/Suffix of Input\nThe prefix an suffix of Input are added by setting attribute ```addonBefore``` and ```addonAfter```.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div>\n                    <div className="demo-input"><Input className="demo-input-normal" addonBefore={<Icon type="user"/>}/></div>\n                    <div className="demo-input"><Input className="demo-input-normal" addonAfter={<span>dollars</span>}/></div>\n                    <div className="demo-input"><Input className="demo-input-normal" addonBefore={<span>http://</span>} addonAfter={<span>.com</span>} /></div>\n                </div>\n            )\n        }\n    }\n```\n'},function(n,e){n.exports='### Basic\r\nA simple Input。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Input className="demo-input-normal" placeholder="basic usage" />\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Cleanable Input\r\nAn icon that can clear input value appears when user is keyboarding.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Input className="demo-input-normal" cleanable placeholder="输入时可清除"/>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Disabled Input\r\nThe Input will be disabled when attribute ```disabled``` is set.\r\n设置```disabled```可使输入框不可用。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-input">\r\n                        <Input disabled />\r\n                    </div>\r\n                    <div className="demo-input">\r\n                        <Input textarea disabled/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Icon Input\r\nAdd icon inside input.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-input">\r\n                        <Input className="demo-input-normal" placeholder="Please enter keyword" iconBefore={<Icon type="search"/>} />\r\n                    </div>\r\n                    <div className="demo-input">\r\n                        <Input className="demo-input-normal" placeholder="Please enter keyword" iconAfter={<Icon type="search" />} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Input\nAn basic component interactived with the operation of user typing.\n### Examples\n@@----------------@@\n### API\n> When the attribute ```iconBefore``` or ```iconAfter``` is set to ```String```, the icon corresponding to [Icon](/#/icon) will be displayed\n\nproperty | description | type | default\n-----|------| ---- | ---\ndefaultValue | the default value of input | ```Number丨String``` | -\nvalue | the input value | ```Number丨String``` | -\ndisabled | disable input | ```Boolean``` | ```false```\nsize | to set the size of input | ```'large'丨'middle'丨'small'```| ```'middle'```\ntextarea | indicate whether input appears in textarea way | ```Boolean``` | ```false```\ncleanable | indicate whether input is cleanable | ```Boolean``` | ```false```\nplaceholder | the text in input when the value is empty | ```String丨Number``` | -\niconBefore | the icon placed in front of input | ```String丨ReactNode``` | -\niconAfter | the icon placed behind input | ```String丨ReactNode``` | -\naddonBefore | the element placed in front of input | ```String丨ReactNode``` | -\naddonAfter | the element placed behind input | ```String丨ReactNode``` | -\nonChange | the callback function triggered by value change. | ```(value: Number丨String) => {}``` | -\n"},function(n,e){n.exports='### Input width Select\r\nCombine Input with Select.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const select = (\r\n                <Select defaultValue="1">\r\n                    <Select.Option value="1" label="Option1"/>\r\n                    <Select.Option value="2" label="Option2"/>\r\n                    <Select.Option value="3" label="Option3"/>\r\n                </Select>\r\n            )\r\n            return (\r\n                <div>\r\n                    <Input className="demo-input" addonBefore={select} />\r\n                    <Input addonAfter={select} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Input Size\r\nThere are three different size of Input.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-input">\r\n                        <Input className="demo-input-normal" size="large" iconBefore="mail" />\r\n                    </div>\r\n                    <div className="demo-input">\r\n                        <Input className="demo-input-normal" iconBefore="mail" />\r\n                    </div>\r\n                    <div className="demo-input">\r\n                        <Input className="demo-input-normal" size="small" iconBefore="mail" />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Textarea\r\nDisplay in textarea style.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return <Input textarea placeholder="Please enter..." />\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 带前后缀的输入框\n设置```addonBefore```和```addonAfter```可以添加输入框前后缀。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div>\n                    <div className="demo-input"><Input className="demo-input-normal" addonBefore={<Icon type="user"/>}/></div>\n                    <div className="demo-input"><Input className="demo-input-normal" addonAfter={<span>元</span>}/></div>\n                    <div className="demo-input"><Input className="demo-input-normal" addonBefore={<span>http://</span>} addonAfter={<span>.com</span>} /></div>\n                </div>\n            )\n        }\n    }\n```\n'},function(n,e){n.exports='### 基础用法\n简单的输入框。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Input className="demo-input-normal" placeholder="基础用法" />\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 可清除输入框\r\n设置```cleanable```输入时右侧会显示清除按钮, 点击可清除输入内容。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Input className="demo-input-normal" placeholder="输入时可清除" cleanable/>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 禁用输入框\n设置```disabled```可使输入框不可用。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div>\n                    <div className="demo-input">\n                        <Input disabled placeholder="禁用输入框" />\n                    </div>\n                    <div className="demo-input">\n                        <Input textarea disabled placeholder="禁用文本域"/>\n                    </div>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 带图标的输入框\n设置```iconBefore```和```iconAfter```可以添加输入框的前后图标。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div>\n                    <div className="demo-input">\n                        <Input className="demo-input-normal" placeholder="请输入关键字" iconBefore={<Icon type="search"/>} />\n                    </div>\n                    <div className="demo-input">\n                        <Input className="demo-input-normal" placeholder="请输入关键字" iconAfter={<Icon type="search" />} />\n                    </div>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Input 输入框\n用于与用户键盘输入进行交互。\n### 代码示例\n@@----------------@@\n### API\n> ```iconBefore``` ```iconAfter```设置为```String```时会显示[Icon](/#/icon)里对应的图标\n\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ndefaultValue | 输入框的默认值 | ```Number丨String``` | -\nvalue | 输入值 | ```Number丨String``` | -\ndisabled | 是否禁用 | ```Boolean``` | ```false```\nsize | 输入框大小 | ```'large'丨'middle'丨'small'```| ```'middle'```\ntextarea | 是否已文本域显示 | ```Boolean``` | ```false```\ncleanable | 是否支持清除文本 | ```Boolean``` | ```false```\nplaceholder | 占位文本 | ```String丨Number``` | -\niconBefore | 前置图标 | ```String丨ReactNode``` | -\niconAfter | 后置图标 | ```String丨ReactNode``` | -\naddonBefore | 前置节点 | ```String丨ReactNode``` | -\naddonAfter | 后置节点 | ```String丨ReactNode``` | -\nonChange | 输入时触发, 参数```value```为当前的输入值 | ```(value: Number丨String) => {}``` | -\n"},function(n,e){n.exports='### 配合下拉框\r\n将下拉框和输入框组合使用。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const select = (\r\n                <Select defaultValue="1">\r\n                    <Select.Option value="1" label="Option1"/>\r\n                    <Select.Option value="2" label="Option2" />\r\n                    <Select.Option value="3" label="Option3" />\r\n                </Select>\r\n            )\r\n            return (\r\n                <div className="demo-input">\r\n                    <Input className="demo-input" addonBefore={select} />\r\n                    <Input addonAfter={select} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 不同尺寸\n设置```size```可以控制输入框大小。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div>\n                    <div className="demo-input">\n                        <Input className="demo-input-normal" size="large" iconBefore="mail" />\n                    </div>\n                    <div className="demo-input">\n                        <Input className="demo-input-normal" iconBefore="mail" />\n                    </div>\n                    <div className="demo-input">\n                        <Input className="demo-input-normal" size="small" iconBefore="mail" />\n                    </div>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 文本域\n将输入框以文本域显示。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <Input textarea placeholder="请输入..." />\n        }\n    }\n```'},function(n,e){n.exports="### Common layout\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className=\"demo-layout-basic\">\n                    <Layout>\n                        <Layout.Header>Header</Layout.Header>\n                        <Layout.Content>Content</Layout.Content>\n                        <Layout.Footer>Footer</Layout.Footer>\n                    </Layout>\n                    <Layout>\n                        <Layout.Header>Header</Layout.Header>\n                        <Layout>\n                            <Layout.Sider style={{lineHeight: '180px'}}>Sider</Layout.Sider>\n                            <Layout.Content>Content</Layout.Content>\n                        </Layout>\n                        <Layout.Footer>Footer</Layout.Footer>\n                    </Layout>\n                    <Layout>\n                        <Layout.Header>Header</Layout.Header>\n                        <Layout>\n                            <Layout.Content>Content</Layout.Content>\n                            <Layout.Sider style={{lineHeight: '180px'}}>Sider</Layout.Sider>\n                        </Layout>\n                        <Layout.Footer>Footer</Layout.Footer>\n                    </Layout>\n                    <Layout>\n                        <Layout.Sider  style={{lineHeight: '260px'}}>Sider</Layout.Sider>\n                        <Layout>\n                            <Layout.Header>Header</Layout.Header>\n                            <Layout.Content>Content</Layout.Content>\n                            <Layout.Footer>Footer</Layout.Footer>\n                        </Layout>\n                    </Layout>\n                </div>\n            )\n        }\n\n    }\n```"},function(n,e){n.exports="## Layout\nCommon components for page layout.\n\n### Compoents List\n* Layout: The root container of layout, which can be inserted into ```Header```, ```Footer```, ```Sider```, ```Content```, even ```Layout```。\n* Header: Top of page. It's always to place navigation.\n* Footer: Bottom of page. It's always to place the statements and links.\n* Sider: Side bar of page both of the left and the right.\n* Content: Main content of page.\n> All implements of above components are on basis of flex.\n\n### Examples\n@@------------@@\n### API\n>The attributes of ```style``` and ```className``` are supported by all the above components.\n\n#### Layout.Sider\nproperty | description | type | default\n-----|------| ---- | ---\ncollapsible | Indicate whether the sidebar enable collapsion. | ```Bolean``` | ```true```\ncollapsed | the state of collapsion. | ```Bolean``` | ```false```\nwidth | width of expanded sidebar | ```Number``` | ```200```\ncollapsedWidth | width of collapsed sidebar  | ```Number``` | ```0```\nthreshold | the responsive threshold to trigger collapsion | ```'xs'丨'sm'丨'md'丨'lg'``` | ```'sm'```\n\n\n"},function(n,e){n.exports='### With navigation\nIt\'s common to combine layout with navigation.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const { Header, Sider, Content, Footer } = Layout;\n            const { Item, Subnav, ItemGroup } = Navigation;\n            return (\n                <Layout className="demo-layout">\n                    <Header>\n                        <Navigation>\n                            <Item>Nav  1</Item>\n                            <Item>Nav  2</Item>\n                            <Subnav title="Nav  3">\n                                <ItemGroup title="Nav  Group1">\n                                    <Item>Nav  3-1</Item>\n                                    <Item>Nav  3-2</Item>\n                                </ItemGroup>\n                                <ItemGroup title="Nav  Group2">\n                                    <Item>Nav  3-1</Item>\n                                    <Item>Nav  3-2</Item>\n                                </ItemGroup>\n                            </Subnav>\n                        </Navigation>\n                    </Header>\n                    <Layout>\n                        <Sider style={{height: 320}}>\n                            <Navigation mode="vertical" style={{height: \'100%\'}}>\n                                <Item>Nav  4</Item>\n                                <Subnav title="Nav  5">\n                                    <Item>Nav  5-1</Item>\n                                    <Item>Nav  5-2</Item>\n                                    <Item>Nav  5-3</Item>\n                                </Subnav>\n                                <Item>Nav  6</Item>\n                            </Navigation>\n                        </Sider>\n                        <Content>\n                            <p style={{padding: \'0 12px\'}}>Main Content</p>\n                        </Content>\n                    </Layout>\n                    <Footer className="demo-layout-footer">\n                        Copyright by AnacondaY\n                    </Footer>\n                </Layout>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 常见布局\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className=\"demo-layout-basic\">\r\n                    <Layout>\r\n                        <Layout.Header>Header</Layout.Header>\r\n                        <Layout.Content>Content</Layout.Content>\r\n                        <Layout.Footer>Footer</Layout.Footer>\r\n                    </Layout>\r\n                    <Layout>\r\n                        <Layout.Header>Header</Layout.Header>\r\n                        <Layout>\r\n                            <Layout.Sider style={{lineHeight: '180px'}}>Sider</Layout.Sider>\r\n                            <Layout.Content>Content</Layout.Content>\r\n                        </Layout>\r\n                        <Layout.Footer>Footer</Layout.Footer>\r\n                    </Layout>\r\n                    <Layout>\r\n                        <Layout.Header>Header</Layout.Header>\r\n                        <Layout>\r\n                            <Layout.Content>Content</Layout.Content>\r\n                            <Layout.Sider style={{lineHeight: '180px'}}>Sider</Layout.Sider>\r\n                        </Layout>\r\n                        <Layout.Footer>Footer</Layout.Footer>\r\n                    </Layout>\r\n                    <Layout>\r\n                        <Layout.Sider  style={{lineHeight: '260px'}}>Sider</Layout.Sider>\r\n                        <Layout>\r\n                            <Layout.Header>Header</Layout.Header>\r\n                            <Layout.Content>Content</Layout.Content>\r\n                            <Layout.Footer>Footer</Layout.Footer>\r\n                        </Layout>\r\n                    </Layout>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="### 折叠侧边栏\r\n\r\n```javascript\r\n    render(){\r\n        \r\n    }\r\n```"},function(n,e){n.exports="## Layout 布局\r\n常规布局的抽象组件。\r\n\r\n### 组件列表\r\n* Layout: 布局组件的容器, 可内嵌```Header```, ```Footer```, ```Sider```, ```Content```, 和```Layout```。\r\n* Header: 头部容器, 常用于放置导航条。\r\n* Footer: 底部容器, 常用于放置声明和链接。\r\n* Sider: 侧边栏容器, 可折叠并支持响应式布局, 常用于放置工具和二级导航。\r\n* Content: 内容容器, 展示网页的主题内容。\r\n> 所有容器采用flex布局实现\r\n\r\n### 代码示例\r\n@@------------@@\r\n### API\r\n>所有组件均支持利用```className```和```style```自定义样式\r\n\r\n#### Layout.Sider\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ncollapsible | 侧边栏是否可折叠 | ```Bolean``` | ```true```\r\ncollapsed | 侧边栏折叠状态, 为```true```时折起 | ```Bolean``` | ```true```\r\nwidth | 侧边栏宽度 | ```Number``` | ```240```\r\ncollapsedWidth | 折起时侧边栏宽度 | ```Number``` | ```0```\r\nthreshold | 触发响应式的临界点, 规则同[BootStrap](https://getbootstrap.com/) | ```'xs'丨'sm'丨'md'丨'lg'``` | ```'sm'```\r\n\r\n\r\n"},function(n,e){n.exports='### 配合Navigation\r\n布局常常和导航结合使用。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const { Header, Sider, Content, Footer } = Layout;\r\n            const { Item, Subnav, ItemGroup } = Navigation;\r\n            return (\r\n                <Layout className="demo-layout">\r\n                    <Header>\r\n                        <Navigation>\r\n                            <Item>导航1</Item>\r\n                            <Item>导航2</Item>\r\n                            <Subnav title="导航3">\r\n                                <ItemGroup title="导航分类1">\r\n                                    <Item>导航3-1</Item>\r\n                                    <Item>导航3-2</Item>\r\n                                </ItemGroup>\r\n                                <ItemGroup title="导航分类2">\r\n                                    <Item>导航3-1</Item>\r\n                                    <Item>导航3-2</Item>\r\n                                </ItemGroup>\r\n                            </Subnav>\r\n                        </Navigation>\r\n                    </Header>\r\n                    <Layout>\r\n                        <Sider style={{height: 320}}>\r\n                            <Navigation mode="vertical" style={{height: \'100%\'}}>\r\n                                <Item>导航4</Item>\r\n                                <Subnav title="导航5">\r\n                                    <Item>导航5-1</Item>\r\n                                    <Item>导航5-2</Item>\r\n                                    <Item>导航5-3</Item>\r\n                                </Subnav>\r\n                                <Item>导航6</Item>\r\n                            </Navigation>\r\n                        </Sider>\r\n                        <Content>\r\n                            <p style={{padding: \'0 12px\'}}>文章内容。。。</p>\r\n                        </Content>\r\n                    </Layout>\r\n                    <Footer className="demo-layout-footer">\r\n                        Copyright by AnacondaY\r\n                    </Footer>\r\n                </Layout>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Basic\nA simple Loading.\n```javascript\n    class Demo extends React.Component{\n\n        constructor(){\n            super();\n            this.state = {\n                loading: false\n            }\n        }\n\n        handleChange(checked: Boolean){\n            this.setState({\n                loading: checked\n            })\n        }\n\n        render(){\n            return (\n                <div>\n                    <Toggle checked={this.state.loading} onChange={this.handleChange.bind(this)} />\n                    <div className="demo-loading">\n                        <Loading loading={this.state.loading}>\n                            <ul className="demo-loading-list">\n                                {new Array(5)\n                                    .fill(0)\n                                    .map((item, i) => {\n                                        return (\n                                            <li key={i}>list item content</li>\n                                        )\n                                    })\n                                }\n                            </ul>\n                        </Loading>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports='### Full screen\nThe loading component is in full screen.\n```javascript\n    class Demo extends React.Component{\n        \n        constructor(){\n            super();\n            this.state = {\n                loading: false\n            }\n        }\n\n        handleClick(){\n            this.setState({\n                loading: true\n            }, () => {\n                this.timer = setTimeout(() => {\n                    this.setState({\n                        loading: false\n                    });\n                    clearTimeout(this.timer);\n                }, 3000);\n            });\n        }\n\n        render(){\n            return (\n                <div>\n                    <Button onClick={this.handleClick.bind(this)} type="primary">Disappear in 3000ms</Button>\n                    <Loading full loading={this.state.loading} />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Loading\nTo notify user of data fetching.\n### Examples\n@@-------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\nfull | indicate whether to display in full screen | ```Boolean``` | ```false```\nloading | indicate whether to show loading | ```Boolean``` | ```false```\ntext | the content of loading tips | ```String``` ```ReactNode``` | -   \n"},function(n,e){n.exports='### 基本用法\n简单的加载。\n```javascript\n    class Demo extends React.Component{\n\n        constructor(){\n            super();\n            this.state = {\n                loading: false\n            }\n        }\n\n        handleChange(checked: Boolean){\n            this.setState({\n                loading: checked\n            })\n        }\n\n        render(){\n            return (\n                <div>\n                    <Toggle checked={this.state.loading} onChange={this.handleChange.bind(this)} />\n                    <div className="demo-loading">\n                        <Loading loading={this.state.loading}>\n                            <ul className="demo-loading-list">\n                                {new Array(5)\n                                    .fill(0)\n                                    .map((item, i) => {\n                                        return (\n                                            <li key={i}>list item content</li>\n                                        )\n                                    })\n                                }\n                            </ul>\n                        </Loading>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports='### 全屏加载\r\n设置```full```可使Loading充满全屏。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        \r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                loading: false\r\n            }\r\n        }\r\n\r\n        handleClick(){\r\n            this.setState({\r\n                loading: true\r\n            }, () => {\r\n                this.timer = setTimeout(() => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    clearTimeout(this.timer);\r\n                }, 3000);\r\n            });\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Button onClick={this.handleClick.bind(this)} type="primary">开始加载,3秒后消失</Button>\r\n                    <Loading full loading={this.state.loading} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Loading 加载\n加载数据时显示, 告知用户等待。\n\n### 代码示例\n@@-------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nfull | 是否全屏展示 | ```Boolean``` | ```false```\nloading | 是否显示加载 | ```Boolean``` | ```false```\ntext | 加载时显示的文本内容 | ```String``` ```ReactNode``` | -\n"},function(n,e){n.exports="### Basic \r\nThe simplest usage.\r\n```javascript\r\n    class Demo extends React.Component{      \r\n        showMessage(){\r\n            message('This is a message');\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.showMessage.bind(this)}>Show message</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Global settings\r\nThe default options can be modified by function ```message.config``` and reset by function ```message.reset``` conversely.\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        handleChange(isOn: Boolean){\r\n            if(isOn){\r\n                message.config({\r\n                    offset: 75,\r\n                    gap: 40\r\n                })\r\n            }else{\r\n                message.reset();\r\n            }\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-message">\r\n                    Change default options:\r\n                    <Toggle onChange={this.handleChange.bind(this)} />\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### Duration\r\nThe time from appearance to disappearance of message are controlled by attribute ```duration```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        show(){\r\n            message('This is a message', 5000);\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>duration 5000ms</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="## Message\r\nTo show the positive feedback after interaction with system.\r\n### Examples\r\n@@----------------@@\r\n### API\r\n- ```message.success(options: Object)```\r\n- ```message.error(options: Object)```\r\n- ```message.info(options: Object)```\r\n- ```message.warning(options: Object)```\r\n- ```message.config(options: Object)```\r\n- ```message.reset()```\r\n- ```message(options: Object)```\r\n\r\n> Except ```message.config``` and ```message.reset```, other functions support a more simple signature as ```message( message:String丨 ReactNode, duration: Number )```\r\n\r\n#### options\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nmessage | the content of message | ```String丨ReactNode``` | -\r\ntype | the theme of message | ```'success'丨'error'丨'info'丨'warning'``` | -\r\nduration | time from disappearance. In miliseconds. | ```Number``` | ```3000```\r\noffset | initial distance from the top | ```Number``` | ```0```\r\ngap | distance between each message | ```Number``` | ```16```\r\nonClose | the callback function triggered by message closing | ```Function``` | -"},function(n,e){n.exports="### Offset and gap\r\nYou can regulate the position of message easily by attributes ```offset``` and ```gap```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        show(){\r\n            message({\r\n                message: 'This is a message',\r\n                offset: 100,\r\n                gap: 50\r\n            });\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>Position regulation</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Themed message\r\nA message preset with different theme.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        showMessage(type: String){\r\n            message[type]('This is a message', 2000);\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className=\"demo-message-list\">\r\n                    <Button type=\"success\" onClick={this.showMessage.bind(this, 'success')}>success</Button>\r\n                    <Button type=\"error\" onClick={this.showMessage.bind(this, 'error')}>error</Button>\r\n                    <Button type=\"warning\" onClick={this.showMessage.bind(this, 'warning')}>warning</Button>\r\n                    <Button type=\"info\" onClick={this.showMessage.bind(this, 'info')}>info</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 基础用法\n最简单的用法。\n```javascript\n    class Demo extends React.Component{      \n        showMessage(){\n            message('这是一条消息');\n        }\n\n        render(){\n            return (\n                <Button onClick={this.showMessage.bind(this)}>显示消息</Button>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 全局设置\r\n通过```message.config```可以修改默认设置。利用```message.reset```可以恢复默认设置。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        handleChange(isOn: Boolean){\r\n            if(isOn){\r\n                message.config({\r\n                    offset: 75,\r\n                    gap: 40\r\n                })\r\n            }else{\r\n                message.reset();\r\n            }\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-message">\r\n                    是否修改默认设置:\r\n                    <Toggle onChange={this.handleChange.bind(this)} />\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### 持续时间\r\n设置```duration```属性可以控制消息的持续时间。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        show(){\r\n            message('这是一条消息', 5000);\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>修改持续时间</Button>\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="## Message 消息\n用于与系统交互后向用户反馈信息。\n### 代码示例\n@@----------------@@\n### API\n- ```message.success(options: Object)```\n- ```message.error(options: Object)```\n- ```message.info(options: Object)```\n- ```message.warning(options: Object)```\n- ```message.config(options: Object)```\n- ```message.reset()```\n- ```message(options: Object)```\n\n> 除```message.config```和```message.reset```外, 其他方法支持更简洁的函数签名```message( message:String丨 ReactNode, duration: Number )```\n\n#### options\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nmessage | 消息的内容 | ```String``` ```ReactNode``` | -\ntype | 消息的主题 | ```'success'丨'error'丨'info'丨'warning'``` | -\nduration | 消息的持续时间, 单位毫秒 | ```Number``` | ```3000```\noffset | 消息距离顶部的距离 | ```Number``` | ```0```\ngap | 消息之间的间隙跨度 | ```Number``` | ```16```\nonClose | 消息关闭时触发 | ```Function``` | -\n"},function(n,e){n.exports="### 距离控制\r\n通过属性```offset```和```gap```可以调节消息的位置。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        show(){\r\n            message({\r\n                message: 'This is a message',\r\n                offset: 100,\r\n                gap: 50\r\n            });\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>Position regulation</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 主题消息\n消息可带有成功、错误、警告、信息等状态。\n```javascript\n    class Demo extends React.Component{\n\n        showMessage(type: String){\n            message[type]('这是一条消息');\n        }\n\n        render(){\n            return (\n                <div className=\"demo-message-list\">\n                    <Button type=\"success\" onClick={this.showMessage.bind(this, 'success')}>成功消息</Button>\n                    <Button type=\"error\" onClick={this.showMessage.bind(this, 'error')}>错误消息</Button>\n                    <Button type=\"warning\" onClick={this.showMessage.bind(this, 'warning')}>警告消息</Button>\n                    <Button type=\"info\" onClick={this.showMessage.bind(this, 'info')}>信息消息</Button>\n                </div>\n            )\n        }\n\n    }\n```"},function(n,e){n.exports='### Horizontal\nThe horizontal navigation is often used as main nav.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const { Item, Subnav, ItemGroup } = Navigation;    \n            return (\n                <Navigation onItemSelect={(mark, marks) => console.log(mark, marks)}>\n                    <Item mark="1"><Icon type="setting"/>Dashboard</Item>\n                    <Subnav mark="2" title={<span><Icon type="user"/>User Center</span>}>\n                        <Item mark="2-1"><Icon type="time"/>Time Management</Item>\n                        <Item mark="2-2"><Icon type="lock"/>Your Password</Item>\n                        <Item mark="2-3"><Icon type="mail"/>Your Email</Item>\n                    </Subnav>\n                    <Item mark="3"><Icon type="share"/>Share</Item>\n                </Navigation>\n            )\n        }\n    }\n```\n'},function(n,e){n.exports='### Disabled\nThe subnav or item can be disabled.\n```javascript\n    class Demo extends React.Component {\n\n        render(){\n            const { Item, Subnav, ItemGroup } = Navigation;    \n            return (\n                <div>\n                    <Navigation>\n                        <Item>Dashbord</Item>\n                        <Subnav title="User Center" disabled>\n                            <Item>Time Management</Item>\n                            <Item>Your Password</Item>\n                            <Item>Your Email</Item>\n                        </Subnav>\n                        <Item disabled>Share</Item>\n                    </Navigation>\n                    <Navigation style={{marginTop: 16}}>\n                        <Item>Dashbord</Item>\n                        <Subnav title="User Center">\n                            <Item>Time Management</Item>\n                            <Item disabled>Your Password</Item>\n                            <Item>Your Email</Item>\n                        </Subnav>\n                        <Item disabled>Share</Item>\n                    </Navigation>\n                </div>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports="## Navigation\nComponent for navigating pages.\n### Examples\n@@------@@\n### API\n#### Navigation\nproperty | description | type | default\n-----|------| ---- | ---\nmode | oritation of navigation | ```'horizontal'丨'vertical'``` | ```'horizontal'```\nonly | only one subnav keep expanded at one time | ```Boolean``` | ```true```\nopenedMarks | the set of expanded subnav marks | ```String[]``` | ```[]```\nactiveMark | the set of active navigation item marks | ```String``` | -\ntrigger | the trigger method to expand subnav. Only works in ```mode='horizontal'``` | ```'hover'丨'click'``` | ```'hover'```\nonItemSelect | the callback function triggered by navigation item selected | ```(activeMark: String, openedMarks: String[]) => {}``` | -\nonMenuOpen | the callback function triggered by menu opening | ```(activeMark: String, openedMarks: String[]) => {}``` | -\nonMenuClose | the callback function triggered by menu closing | ```(activeMark: String, openedMarks: String[]) => {}``` | -\n\n#### Navigation.Item\nproperty | description | type | default\n-----|------| ---- | ---\nmark | the unique string of item | ```String``` | -\ndisabled | disable item | ```Boolean``` | ```false```\n\n#### Navigation.Subnav\nproperty | description | type | default\n-----|------| ---- | ---\nmark | the unique string of subnav | ```String``` | -\ndisabled | disable subnav | ```Boolean``` | ```false```\ntitle | title of subnav | ```String丨ReactNode``` | -\nchildren | children elements |  ```Navgation.Item[]丨Navigation.ItemGroup[]``` | -\n\n#### Navigation.ItemGroup\nproperty | description | type | default\n-----|------| ---- | ---\ntitle | title of group | ```String丨ReactNode``` | -\nchildren | children elements |  ```Navgation.Item[]``` | -\n"},function(n,e){n.exports='### Trigger\nThere are two methods to expand or close menu.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const { Item, Subnav, ItemGroup } = Navigation;    \n            return (\n                <Navigation trigger="click">\n                    <Item><Icon type="setting"/>Dashboard</Item>\n                    <Subnav title={<span><Icon type="user"/>User Center</span>}>\n                        <Item><Icon type="time"/>Time Management</Item>\n                        <Item><Icon type="lock"/>Your Password</Item>\n                        <Item><Icon type="mail"/>Your Email</Item>\n                    </Subnav>\n                    <Item><Icon type="share"/>Share</Item>\n                </Navigation>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Vertical\nThe vertical navigation is often as the side menu.\n```javascript\n    class Demo extends React.Component {\n\n        render(){\n            const { Item, Subnav, ItemGroup } = Navigation;\n            return (\n                <Row>\n                    <Col xs={24} sm={24} md={8} lg={8}>\n                        <Navigation mode="vertical">\n                            <Item>Navigation Item 1</Item>\n                            <Item>Navigation Item 2</Item>\n                            <Item>Navigation Item 3</Item>\n                        </Navigation>\n                    </Col>\n                    <Col xs={24} sm={24} md={8} lg={8}>\n                        <Navigation mode="vertical">\n                            <Item><Icon type="picture"/>Navigation Item 1</Item>\n                            <Item><Icon type="location"/>Navigation Item 2</Item>\n                            <Item><Icon type="eye"/>Navigation Item 3</Item>\n                        </Navigation>\n                    </Col>\n                    <Col xs={24} sm={24} md={8} lg={8}>\n                        <Navigation mode="vertical">\n                            <Item><Icon type="picture"/>Navigation Item 1</Item>\n                            <Subnav title={<span><Icon type="bars"/>Navigation Subnav 2</span>}>\n                                <ItemGroup title="Group 1">\n                                    <Item>Navigation Item 2-1</Item>\n                                    <Item>Navigation Item 2-2</Item>\n                                </ItemGroup>\n                                <ItemGroup title="Group 2">\n                                    <Item>Navigation Item 2-3</Item>\n                                    <Item>Navigation Item 2-4</Item>\n                                </ItemGroup>\n                            </Subnav>\n                            <Item><Icon type="setting"/>Navigation Item 3</Item>\n                        </Navigation>\n                    </Col>\n                </Row>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports='### 水平导航\r\n用于顶层的主导航。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const { Item, Subnav, ItemGroup } = Navigation;    \r\n            return (\r\n                <Navigation onItemSelect={(mark, marks) => console.log(mark, marks)}>\r\n                    <Item mark="1"><Icon type="setting"/>控制台</Item>\r\n                    <Subnav mark="2" title={<span><Icon type="user"/>用户</span>}>\r\n                        <Item mark="2-1"><Icon type="time"/>时间管理</Item>\r\n                        <Item mark="2-2"><Icon type="lock"/>更改密码</Item>\r\n                        <Item mark="2-3"><Icon type="mail"/>我的邮箱</Item>\r\n                    </Subnav>\r\n                    <Item mark="3"><Icon type="share"/>分享</Item>\r\n                </Navigation>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports='### 禁用\r\n使下拉菜单或者导航项不可用。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            const { Item, Subnav, ItemGroup } = Navigation;    \r\n            return (\r\n                <div>\r\n                    <Navigation>\r\n                        <Item>控制台</Item>\r\n                        <Subnav title="用户" disabled>\r\n                            <Item>时间管理</Item>\r\n                            <Item>更改密码</Item>\r\n                            <Item>我的邮箱</Item>\r\n                        </Subnav>\r\n                        <Item disabled>分享</Item>\r\n                    </Navigation>\r\n                    <Navigation style={{marginTop: 16}}>\r\n                        <Item>控制台</Item>\r\n                        <Subnav title="用户">\r\n                            <Item>时间管理</Item>\r\n                            <Item disabled>更改密码</Item>\r\n                            <Item>我的邮箱</Item>\r\n                        </Subnav>\r\n                        <Item disabled>分享</Item>\r\n                    </Navigation>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="## Navigation 导航\r\n提供导航的菜单。\r\n### 代码示例\r\n@@------@@\r\n### API\r\n#### Navigation\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nmode | 导航的表现模式 | ```'horizontal'丨'vertical'``` | ```'horizontal'```\r\nonly | 只允许一个子菜单展开 | ```Boolean``` | ```true```\r\nopenedMarks | 需要展开的子菜单的```mark```属性值集合 | ```Array[String]``` | ```[]```\r\nactiveMark | 需要激活的菜单项的```mark```属性值 | ```String``` | -\r\ntrigger | 触发子菜单展开的方式, 仅对水平菜单有效 | ```'hover'丨'click'``` | ```'hover'```\r\nonItemSelect | 菜单项选择后触发 | ```(activeMark: String, openedMarks: String[]) => {}``` | -\r\nonMenuOpen | 下拉菜单展开时触发 | ```(activeMark: String, openedMarks: String[]) => {}``` | -\r\nonMenuClose | 下拉菜单关闭时触发 | ```(activeMark: String, openedMarks: String[]) => {}``` | -\r\n\r\n#### Navigation.Item\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nmark | 导航项的唯一标识 | ```String``` | -\r\ndisabled | 导航项是否禁用 | ```Boolean``` | ```false```\r\n\r\n#### Navigation.Subnav\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nmark | 子菜单的唯一标识 | ```String``` | -\r\ndisabled | 子菜单是否禁用 | ```Boolean``` | ```false```\r\ntitle | 子菜单的标题 | ```String丨ReactNode``` | -\r\nchildren | 子菜单的子元素 |  ```Navgation.Item[]丨Navigation.ItemGroup[]``` | -\r\n\r\n#### Navigation.ItemGroup\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ntitle | 分组名称 | ```String丨ReactNode``` | -\r\nchildren | 子菜单的子元素 |  ```Navgation.Item[]``` | -\r\n"},function(n,e){n.exports='### 触发方式\n水平导航的下拉菜单支持```click```和```hover```两种方式展开/收起。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const { Item, Subnav, ItemGroup } = Navigation;    \n            return (\n                <Navigation trigger="click">\n                    <Item><Icon type="setting"/>控制台</Item>\n                    <Subnav title={<span><Icon type="user"/>用户</span>}>\n                        <Item><Icon type="time"/>时间管理</Item>\n                        <Item><Icon type="lock"/>更改密码</Item>\n                        <Item><Icon type="mail"/>我的邮箱</Item>\n                    </Subnav>\n                    <Item><Icon type="share"/>分享</Item>\n                </Navigation>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 垂直导航\r\n通常置于侧边栏。\r\n\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            const { Item, Subnav, ItemGroup } = Navigation;\r\n            return (\r\n                <Row>\r\n                    <Col xs={24} sm={24} md={8} lg={8}>\r\n                        <Navigation mode="vertical">\r\n                            <Item>导航3</Item>\r\n                            <Item>导航2</Item>\r\n                            <Item>导航3</Item>\r\n                        </Navigation>\r\n                    </Col>\r\n                    <Col xs={24} sm={24} md={8} lg={8}>\r\n                        <Navigation mode="vertical">\r\n                            <Item><Icon type="picture"/>导航3</Item>\r\n                            <Item><Icon type="location"/>导航2</Item>\r\n                            <Item><Icon type="eye"/>导航3</Item>\r\n                        </Navigation>\r\n                    </Col>\r\n                    <Col xs={24} sm={24} md={8} lg={8}>\r\n                        <Navigation mode="vertical">\r\n                            <Item><Icon type="picture"/>导航1</Item>\r\n                            <Subnav title={<span><Icon type="bars"/>导航2</span>}>\r\n                                <ItemGroup title="分组1">\r\n                                    <Item>导航2-1</Item>\r\n                                    <Item>导航2-2</Item>\r\n                                </ItemGroup>\r\n                                <ItemGroup title="分组2">\r\n                                    <Item>导航2-3</Item>\r\n                                    <Item>导航2-4</Item>\r\n                                </ItemGroup>\r\n                            </Subnav>\r\n                            <Item><Icon type="setting"/>导航3</Item>\r\n                        </Navigation>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### Basic\r\nThe simplest usage.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        show(){\r\n            notification('Notification Title', 'This is a notification')\r\n        }\r\n        render(){\r\n            return (\r\n                <Button onClick={() => this.show()}>Show notification</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Global settings\r\nThe default options can be modified by function ```notification.config``` and reset by function ```notification.reset``` conversely.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        handleChange(isOn: Boolean){\r\n            if(isOn){\r\n                notification.config({\r\n                    offset: 75,\r\n                    gap: 40\r\n                })\r\n            }else{\r\n                notification.reset();\r\n            }\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-notification">\r\n                    Change default options:\r\n                    <Toggle onChange={this.handleChange.bind(this)} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Duration\r\nThe time from appearance to disappearance of notification are controlled by attribute ```duration```. If it set to ```0```, notification will never be closed automatically.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        show(){\r\n            message('Notification title', 'This is a notification', 3000);\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>duration 5300ms</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="## Notification\r\nTo show the negative feedback for informing user.\r\n### Examples\r\n@@-----------@@\r\n### API\r\n- ```notification.success(options: Object)```\r\n- ```notification.error(options: Object)```\r\n- ```notification.info(options: Object)```\r\n- ```notification.warning(options: Object)```\r\n- ```notification.config(options: Object)```\r\n- ```notification.reset()```\r\n- ```notification(options: Object)```\r\n\r\n> Except ```notification.config``` and ```notification.reset```, other functions support a more simple signature as ```notification( title:String丨 ReactNode, content: String丨 ReactNode, duration: Number )```\r\n\r\n#### options\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ntitle | the title of notification | ```String丨ReactNode``` | -\r\ncontent | the content of notification | ```String丨ReactNode``` | -\r\ntype | the theme of notification | ```'success'丨'error'丨'info'丨'warning'``` | -\r\nduration | time from disappearance. In milliseconds. | ```Number``` | ```5000```\r\nclosable | indicate whether show the close button | ```Boolean``` | ```true```\r\noffset | initial distance from the top | ```Number``` | ```0```\r\ngap | distance between each notification | ```Number``` | ```16```\r\nonClose | the callback function triggered by notification closing | ```Function``` | -"},function(n,e){n.exports="### Offset and gap\r\nYou can regulate the position of notification easily by attributes ```offset``` and ```gap```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        show(){\r\n            notification({\r\n                title: 'Notification Title',\r\n                content: 'This is a notification',\r\n                offset: 100,\r\n                gap: 50,\r\n                onClose(){\r\n                    console.log('Notification close');\r\n                }\r\n            });\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>Position regulation</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Themed notification\r\nA notification preset with different theme.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        show(type: String){\r\n            notification[type]('Notification Title','This is a notification', 3000);\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className=\"demo-notification-list\">\r\n                    <Button type=\"success\" onClick={this.show.bind(this, 'success')}>success</Button>\r\n                    <Button type=\"error\" onClick={this.show.bind(this, 'error')}>error</Button>\r\n                    <Button type=\"warning\" onClick={this.show.bind(this, 'warning')}>warning</Button>\r\n                    <Button type=\"info\" onClick={this.show.bind(this, 'info')}>info</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 基础用法\r\n最简单的通知。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        show(){\r\n            notification('通知', '这是一条通知');\r\n        }\r\n        render(){\r\n            return (\r\n                <Button onClick={() => this.show()}>普通通知</Button>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### 全局设置\r\n通过```notification.config```方法可以改变默认设置; 通过```notification.reset```方法可以恢复默认设置。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        handleChange(isOn: Boolean){\r\n            if(isOn){\r\n                notification.config({\r\n                    offset: 100,\r\n                    gap: 50\r\n                });\r\n            }else{\r\n                notification.reset();\r\n            }\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-notification-list">\r\n                    是否修改默认设置: <Toggle onChange={this.handleChange.bind(this)} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### 持续时间\r\n设置```duration```属性可以控制通知的持续时间, 设置为```0```时则不会自动关闭。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        show(){\r\n            notification({\r\n                title: '通知标题',\r\n                content: '通知内容',\r\n                duration: 0\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>手动关闭的通知</Button>\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="## Notification 通知\r\n用于显示系统反馈给用户的信息。\r\n### 代码示例\r\n@@-----------@@\r\n### API\r\n- ```notification.success(options: Object)```\r\n- ```notification.error(options: Object)```\r\n- ```notification.info(options: Object)```\r\n- ```notification.warning(options: Object)```\r\n- ```notification.config(options: Object)```\r\n- ```notification.reset()```\r\n- ```notification(options: Object)```\r\n\r\n> 除```notification.config```和```notification.reset```外, 其他方法支持更简洁的函数签名```notification( title:String丨 ReactNode, content: String丨 ReactNode, duration: Number )```\r\n\r\n#### options\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ntitle | 通知的标题 | ```String``` ```ReactNode``` | -\r\ncontent | 通知的内容 | ```String``` ```ReactNode``` | -\r\ntype | 通知的主题 | ```'success'丨'error'丨'info'丨'warning'``` | -\r\nduration | 通知的持续时间, 单位毫秒, 为0时通知不会自动消失 | ```Number``` | ```5000```\r\nclosable | 是否显示关闭按钮 | ```Boolean``` | ```true```\r\noffset | 通知距离顶部的距离 | ```Number``` | ```0```\r\ngap | 通知之间的间隙跨度 | ```Number``` | ```16```\r\nonClose | 通知关闭时触发 | ```Function``` | -\r\n\r\n\r\n"},function(n,e){n.exports="### 距离控制\r\n设置```offset```属性可以控制首个通知与顶部的距离, ```gap```属性可以控制多个通知之间的间隙。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        \r\n        show(){\r\n            notification({\r\n                'title': '通知标题',\r\n                'content': '通知内容',\r\n                'offset': 100,\r\n                'gap': 50\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Button onClick={this.show.bind(this)}>控制起始位置</Button>\r\n            )\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="### 不同主题\r\n通知可带有成功、错误、警告、信息等状态。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        show(type){\r\n            notification[type]('通知标题', '通知内容');\r\n        }\r\n        render(){\r\n            return (\r\n                <div className=\"demo-notification-list\">\r\n                    <Button onClick={() => this.show('success')} type=\"success\">成功通知</Button>\r\n                    <Button onClick={() => this.show('error')} type=\"error\">错误通知</Button>\r\n                    <Button onClick={() => this.show('warning')} type=\"warning\">警告通知</Button>\r\n                    <Button onClick={() => this.show('info')} type=\"info\">信息通知</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Basic\nThe simplest usage of NumberInput.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <NumberInput className="demo-number-input" initialValue={25}/>\n        }\n    }\n```'},function(n,e){n.exports='### Disable\nDisabled numberic input which is unoperable.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <NumberInput className="demo-number-input" disabled />\n            )\n        }\n    }\n```'},function(n,e){n.exports="### Formatter and parser\nRender value in the format specified by attribute ```formatter``` and parse template to number by attribute ```parser```.\n```javascript\n    class Demo extends React.Component {\n        format(value: Number): String{\n            return `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n        }\n        parse(value: Number): String{\n            return String(value).replace(/\\$\\s?|(,*)/g, '');\n        }\n        render(){\n            return (\n                <NumberInput className=\"demo-number-input\" \n                    formatter={this.format}\n                    parser={this.parse}\n                />\n            )\n        }\n    }\n```"},function(n,e){n.exports="## NumberInput\nThe component for numberic value input.\n@@------------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\ninitialValue | initial value of input | ```Number``` | -\nmaximum | maximal value | ```Number``` | ```100```\nminimum | minimal value | ```Number``` | ```0```\nvalue | binding value | ```Number``` | -\nsize | size of numberic input | ```'large'丨'middle'丨'small'``` | ```middle```\ndisabled | disable input | ```Boolean``` | ```false``` \nformatter | convert input value to present value in specific format | ```(value: Number):String => {}``` | -\nparser | reverse process of formatter | ```(value: String): Number => {}```  | -\nonChange | the callback function triggered by value change | ```(value: String丨Number) => {}``` | -"},function(n,e){n.exports='### Maximum, minimum and step\nCustomize the ```maximum```、```minimum``` and ```step``` of numberic input.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <NumberInput className="demo-number-input" maximum={1000} minimum={100} step={25}/>\n        }\n    }\n```'},function(n,e){n.exports='### Size\nThere are three different sizes of numberic input.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div>\n                    <div className="demo-number-input">\n                        <NumberInput size="large" />                    \n                    </div>\n                    <div className="demo-number-input">\n                        <NumberInput />                        \n                    </div>\n                    <div className="demo-number-input">\n                        <NumberInput size="small" />                        \n                    </div>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 基本用法\n简单的数字输入框。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <NumberInput className="demo-number-input" initialValue={25} />\n        }\n    }\n```'},function(n,e){n.exports='### 禁用\n使输入框不可用。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <NumberInput className="demo-number-input" disabled />\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 格式化\n将输入值进行格式化。配合```formatter```和```parser```使用。\n```javascript\n    class Demo extends React.Component {\n        format(value: Number): String{\n            return `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n        }\n        parse(value: Number): String{\n            return String(value).replace(/\\$\\s?|(,*)/g, '');\n        }\n        render(){\n            return (\n                <NumberInput className=\"demo-number-input\" \n                    defaultValue={0}\n                    formatter={this.format}\n                    parser={this.parse}\n                />\n            )\n        }\n    }\n```"},function(n,e){n.exports="## NumberInput 数字输入框\n仅用于输入数字的控件。\n@@------------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ninitialValue | 初始值 | ```Number``` | -\nmaximum | 最大值 | ```Number``` | ```100```\nminimum | 最小值 | ```Number``` | ```0```\nvalue | 绑定的数值 | ```Number``` | -\nsize | 输入框的尺寸 | ```'large'丨'middle'丨'small'``` | ```middle```\ndisabled | 是否禁用 | ```Boolean``` | ```false``` \nformatter | 用于把输入值格式化为显示值 | ```(value: Number):String => {}``` | -\nparser | ```formatter```的逆过程, 格式化显示值 | ```(value: String): Number => {}```  | -\nonChange | 数值改变时触发, 参数```value```为当前数值 | ```(value: String丨Number) => {}``` | -"},function(n,e){n.exports='### 最值和步长\r\n设置```maximum```、```minimum```和```step```可以改变最值和步长。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return <NumberInput className="demo-number-input" maximum={1000} minimum={100} step={25}/>\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 不同尺寸\n和```Input```一样,提供大、中、小三种大小。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div>\n                    <div className="demo-number-input">\n                        <NumberInput size="large" />                    \n                    </div>\n                    <div className="demo-number-input">\n                        <NumberInput />                        \n                    </div>\n                    <div className="demo-number-input">\n                        <NumberInput size="small" />                        \n                    </div>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### Basic\nThe basic usage of paginaton.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <Pagination pageSize={10} totalRecords={200} />\n        }\n    }\n```"},function(n,e){n.exports="### Layout\nThere are four subcomponents in pagination, ```pages```, ```total```, ```jumper``` and ```regulator```. The order and visibility of subcomponents can be customized by attribute ```layout```.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className=\"demo-pagination-list\">\n                    <Pagination totalRecords={1000} layout={['pages', 'regulator']} />\n                    <Pagination totalRecords={1000} layout={['jumper', 'pages', 'regulator']} />\n                    <Pagination totalRecords={1000} layout={['total', 'jumper', 'pages', 'regulator']} />\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports="##  Pagination\nA heavy data can be divided into several pages to speed loading up. \n\n### Examples\n@@---------------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\ntotalRecords | the total count of records. Required. | ```Number``` | -\ncurrentPage | selected index of page. Starts at 1. | ```Number``` | ```1```\npageSize | the records count of per page | ```Number``` | ```20```\nlayout | the layout of subcomponents in pagination, including ```'pages'丨'jumper'丨'regulator'丨'total'``` | ```String[]``` | ```['pages']```\ntotalRender | the renderer of summary infomation | ```(pageCount: Number) => {} ``` | -\npageSpan | the avilable options of page size selector | ```[{label: String, value: Numver}]``` | -\nonChange | the callback function triggered by change of page | ```(page: Number) => {}``` | -\nonPageSizeChange | the callback function triggered by change of page size | ```(pageSize: Number) => {} ``` | - "},function(n,e){n.exports="### Mini\nThe mini style without border and background. \n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Pagination totalRecords={100} pageSize={10} mini />\n            )\n        }\n    }\n```"},function(n,e){n.exports="### Regulator\nThe options of regulator can be customized.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const pageSpan = [{\n                label: '10 / page',\n                value:10\n            },{\n                label: '20 / page',\n                value: 20\n            }, {\n                label: '50 / page',\n                value: 50\n            }, {\n                label: '100 / page',\n                value: 100\n            }]\n            return (\n                <Pagination totalRecords={1000} pageSpan={pageSpan} layout={['pages', 'regulator']} />\n            )\n        }\n    }\n```"},function(n,e){n.exports="### Total\nThe template of total infomation is renderer by attribute ```totalRender```.\n```javascript\n    class Demo extends React.Component {\n        renderSummary(total: Number){\n            return (\n                <div className=\"demo-pagination-total\">\n                    <Icon type=\"math\"/>Total :{total}\n                </div>\n            );\n        }\n        render(){\n            return (\n                <Pagination pageSize={10} totalRecords={2000} layout={['pages', 'total']}\n                    totalRender={this.renderSummary.bind(this)}\n                />\n            )\n        }\n    }\n```"},function(n,e){n.exports=" ### 基本用法\n简单的分页。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <Pagination pageSize={10} totalRecords={200} />\n        }\n    }\n```"},function(n,e){n.exports="### 子组件布局\r\n支持4种子组件, ```'pages'```为页码列表, ```'total'```为总页数, ```'jumper'```为跳转器, ```'regulator'```为页容量调节器。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className=\"demo-pagination-list\">\r\n                    <Pagination totalRecords={1000} layout={['pages', 'regulator']} />\r\n                    <Pagination totalRecords={1000} layout={['jumper', 'pages', 'regulator']} />\r\n                    <Pagination totalRecords={1000} layout={['total', 'jumper', 'pages', 'regulator']} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="##  Pagination 分页\n数据量较大时,可使用分页拆分页面数据。\n\n### 代码示例\n@@---------------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ntotalRecords | 数据总记录数, 必填 | ```Number``` | -\ncurrentPage | 当前选择的页数, 从```1```开始 | ```Number``` | ```1```\npageSize | 每页显示的记录数 | ```Number``` | ```20```\nlayout | 分页的子组件布局, 元素可为```'pages'丨'jumper'丨'regulator'丨'total'``` | ```String[]``` | ```['pages']```\ntotalRender | 总页数渲染器, 参数```pageCount```为总页数 | ```(pageCount: Number) => {} ``` | -\npageSpan | 调节器的可选项 | ```[{label: String, value: Numver}]``` | -\nonChange | 页码改变时触发, 参数```page```为当前页码 | ```(page: Number) => {}``` | -\nonPageSizeChange | 页容量改变时触发, 参数```pageSize```为当前页容量 | ```(pageSize: Number) => {} ``` | - "},function(n,e){n.exports="### 迷你分页\r\n用于有限空间的分页, 建议不使用其他子组件。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Pagination totalRecords={100} pageSize={10} mini />\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 调节器\n你可以自定义调节器中的选项。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const pageSpan = [{\n                label: '每页10条',\n                value:10\n            },{\n                label: '每页20条',\n                value: 20\n            }, {\n                label: '每页50条',\n                value: 50\n            }, {\n                label: '每页100条',\n                value: 100\n            }]\n            return (\n                <Pagination totalRecords={1000} pageSpan={pageSpan} layout={['pages', 'regulator']} />\n            )\n        }\n    }\n```"},function(n,e){n.exports="### 总数\n自定义总数信息模板。\n```javascript\n    class Demo extends React.Component {\n        renderSummary(total: Number){\n            return (\n                <div className=\"demo-pagination-total\">\n                    <Icon type=\"math\"/>总页数:{total}\n                </div>\n            );\n        }\n        render(){\n            return (\n                <Pagination pageSize={10} totalRecords={2000} layout={['pages', 'total']}\n                    totalRender={this.renderSummary.bind(this)}\n                />\n            )\n        }\n    }\n```"},function(n,e){n.exports='### Appended element\nAppend extra element on the right side of panel header.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Panel title="Panel title" append={<a href="/#/panel">more...</a>} className="demo-panel">\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                </Panel>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Basic\nPanel with title.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Panel className="demo-panel" title="Simple panel">\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                </Panel>\n            )\n        }\n    }\n```\n'},function(n,e){n.exports='### Footer\nShow customized footer.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Panel title="Panel with footer" footer={<div>Footer info</div>} className="demo-panel">\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                    <p>Content of panel...</p>\n                </Panel>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Jumbotron\nMore complex panel.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            const footer = (\n                <div>\n                    <strong>Sylvanas Windrunner</strong>\n                    <div>Dark Lady</div>\n                </div>\n            )\n            return (\n                <Panel full showHeader={false} footer={footer} className="demo-panel-image">\n                    <img src="http://pic.baike.soso.com/p/20131121/20131121172919-537142327.jpg" style={{width: \'100%\'}}/>\n                </Panel>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Panel\nAn unit container to display related infomation.\n@@---------------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\nshowHeader | indicate to show panel header | ```Boolean``` | ```true```\ntitle | the title of panel header | ```String丨ReactNode``` | -\nappend | the extra element on right side of header | ```ReactNode``` | -\nfooter | the footer of panel | ```ReactNode``` | -\n"},function(n,e){n.exports='### 附加元素\r\n设置```append```节点可以展示头部右侧图标或文字。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Panel title="附加元素面板" append={<a href="/#/panel">more...</a>} className="demo-panel">\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                </Panel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 基础用法\r\n定义标题的面板。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Panel className="demo-panel" title="简单的面板">\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                </Panel>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports='### 脚部\r\n设置```footer```为面板添加脚部元素。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Panel title="带脚部的面板" footer={<div>脚部信息</div>} className="demo-panel">\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                    <p>面板的内容...</p>\r\n                </Panel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 图片展示\r\n展示图片及其相关信息。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            const footer = (\r\n                <div>\r\n                    <strong>Sylvanas Windrunner</strong>\r\n                    <div>Dark Lady</div>\r\n                </div>\r\n            )\r\n            return (\r\n                <Panel full showHeader={false} footer={footer} className="demo-panel-image">\r\n                    <img src="http://pic.baike.soso.com/p/20131121/20131121172919-537142327.jpg" style={{width: \'100%\'}}/>\r\n                </Panel>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Panel 面板\r\n用于展示相关信息的单元容器。\r\n@@---------------@@\r\n### API\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nshowHeader | 是否展示头部 | ```Boolean``` | ```true```\r\ntitle | 面板的标题 | ```String丨ReactNode``` | -\r\nappend | 头部右侧的附加元素 | ```ReactNode``` | -\r\nfooter | 面板的脚部 | ```ReactNode``` | -\r\n"},function(n,e){n.exports='### Basic\r\nProgress bar width status.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-progress-list">\r\n                    <Progress progress={30} />\r\n                    <Progress progress={50} status="paused"/>\r\n                    <Progress progress={100} status="success" />\r\n                    <Progress progress={75} status="error" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Ring\r\nIt will display like a ring when attribute ```mode``` set to ```\'circle\'```.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-progress-list">\r\n                    <Progress mode="circle" progress={30} />\r\n                    <Progress mode="circle" progress={50} status="paused"/>\r\n                    <Progress mode="circle" progress={100} status="success" />\r\n                    <Progress mode="circle" progress={75} status="error" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports="## Progress\r\nTo notify users that the progress of last operation.\r\n### Examples\r\n@@----------------@@\r\n### API\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nmode | display style | ```'line'丨'circle'``` | ```'line'```\r\nprogress | current progress | ```Number``` | ```0```\r\nstatus | the status of progress | ```'processing'丨'paused'丨'success'丨'error'```| ```'processing'```\r\noutside | indicate whether text is displayed outside. It only works in case of ```mode='line'``` | ```Boolean``` | ```false```\r\ntemplate | template renderer | ```String丨(progress: Number, status: String): String丨ReactNode => {}``` | -\r\ndiameter | the diameter of progress ring. It only works in case of ```mode='circle'``` | ```Number``` | ```120```\r\nstrokeWidth | the thickness of progress ring. It only works in case of ```mode='circle'``` | ```Number``` | ```6```\r\nwidth | the width of progress bar. It only works in case of ```mode='line'``` | ```Number``` | -"},function(n,e){n.exports='### Outside\r\nText are placed outside.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-progress-list">\r\n                    <Progress progress={30} outside/>\r\n                    <Progress progress={50} outside status="paused"/>\r\n                    <Progress progress={100} outside status="success" />\r\n                    <Progress progress={75} outside status="error" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Size\r\nThe diameter and thickness of progress ring are controlled by ```diameter``` and ```strokeWidth```. And attribute ```width``` controls the width of progress bar.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress mode="circle" progress={30} diameter={70} />\r\n                        <Progress mode="circle" progress={100} status="success" diameter={80} />\r\n                        <Progress mode="circle" progress={50} status="paused" diameter={90} />\r\n                        <Progress mode="circle" progress={75} status="error" diameter={100} />\r\n                    </div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress mode="circle" progress={30} strokeWidth={4} diameter={80} />\r\n                        <Progress mode="circle" progress={100} status="success" strokeWidth={6} diameter={80} />\r\n                        <Progress mode="circle" progress={50} status="paused" strokeWidth={8} diameter={80} />\r\n                        <Progress mode="circle" progress={75} status="error" strokeWidth={10}  diameter={80} />\r\n                    </div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress progress={30} outside width={150}/>\r\n                        <Progress progress={50} outside status="paused" width={180}/>\r\n                        <Progress progress={100} outside status="success" width={200}/>\r\n                        <Progress progress={75} outside status="error" width={240}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Customized template\r\nThe text of progress can be customized by the attribute ```template```.\r\n```javascript\r\n    class Demo extends React.Component{\r\n\r\n        renderTemplate(progress: Number, status: String): String| React.ReactNode{\r\n            if(status === \'success\'){\r\n                return <span className="demo-icon-success"><Icon type="success"/></span>\r\n            }else if(status === \'error\'){\r\n                return <span className="demo-icon-error"><Icon type="error"/></span>\r\n            }\r\n            return `${progress}%`;\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress progress={30} outside template={this.renderTemplate.bind(this)} />\r\n                        <Progress progress={50} outside status="paused" template={this.renderTemplate.bind(this)} />\r\n                        <Progress progress={100} outside status="success" template={this.renderTemplate.bind(this)} />\r\n                        <Progress progress={75} outside status="error" template={this.renderTemplate.bind(this)} />\r\n                    </div>\r\n                    <div className="demo-progress-list demo-progress-list-circle">\r\n                        <Progress mode="circle" progress={30} outside template={this.renderTemplate.bind(this)} />\r\n                        <Progress mode="circle" progress={50} outside status="paused" template={this.renderTemplate.bind(this)} />\r\n                        <Progress mode="circle" progress={100} outside status="success" template={this.renderTemplate.bind(this)} />\r\n                        <Progress mode="circle" progress={75} outside status="error" template={this.renderTemplate.bind(this)} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports='### 基础用法\r\n带状态的进度条。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-progress-list">\r\n                    <Progress progress={30} />\r\n                    <Progress progress={50} status="paused"/>\r\n                    <Progress progress={100} status="success" />\r\n                    <Progress progress={75} status="error" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 进度环\r\n设置```mode```属性为```\'circle\'```切换展示模式为环形。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-progress-list">\r\n                    <Progress mode="circle" progress={30} />\r\n                    <Progress mode="circle" progress={50} status="paused"/>\r\n                    <Progress mode="circle" progress={100} status="success" />\r\n                    <Progress mode="circle" progress={75} status="error" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```\r\n'},function(n,e){n.exports="## Progress 进度条\r\n用于提示用户上一个交互操作完成的进度。\r\n### 代码示例\r\n@@----------------@@\r\n### API\r\n\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nmode | 展示模式 | ```'line'丨'circle'``` | ```'line'```\r\nprogress | 当前进度 | ```Number``` | ```0```\r\nstatus | 进度条状态 | ```'processing'丨'paused'丨'success'丨'error'```| ```'processing'```\r\noutside | 文字是否在外侧显示, 仅在```mode='line'```下可用 | ```Boolean``` | ```false```\r\ntemplate | 文字渲染模板, 参数```progress```和```status```分别代表当前进度和状态 | ```String丨(progress: Number, status: String): String丨ReactNode => {}``` | -\r\ndiameter | 设置进度环的直径, 仅在```mode='circle'```下可用 | ```Number``` | ```120```\r\nstrokeWidth | 环的粗细, 仅在```mode='circle'```下可用 | ```Number``` | ```6```\r\nwidth | 进度条宽度, 仅在```mode='line'```下可用 | ```Number``` | -"},function(n,e){n.exports='### 外侧文字\r\n设置```outside```属性可以使文字置于外侧。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-progress-list">\r\n                    <Progress progress={30} outside/>\r\n                    <Progress progress={50} outside status="paused"/>\r\n                    <Progress progress={100} outside status="success" />\r\n                    <Progress progress={75} outside status="error" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 尺寸\r\n当为环形模式时, 设置```diameter```可以控制其直径大小; 设置```strokeWidth```可以控制环的粗细。当为直线模式时, ```width```可以控制进度条宽度。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress mode="circle" progress={30} diameter={70} />\r\n                        <Progress mode="circle" progress={100} status="success" diameter={80} />\r\n                        <Progress mode="circle" progress={50} status="paused" diameter={90} />\r\n                        <Progress mode="circle" progress={75} status="error" diameter={100} />\r\n                    </div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress mode="circle" progress={30} strokeWidth={4} diameter={80} />\r\n                        <Progress mode="circle" progress={100} status="success" strokeWidth={6} diameter={80} />\r\n                        <Progress mode="circle" progress={50} status="paused" strokeWidth={8} diameter={80} />\r\n                        <Progress mode="circle" progress={75} status="error" strokeWidth={10}  diameter={80} />\r\n                    </div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress progress={30} outside width={150}/>\r\n                        <Progress progress={50} outside status="paused" width={180}/>\r\n                        <Progress progress={100} outside status="success" width={200}/>\r\n                        <Progress progress={75} outside status="error" width={240}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 自定义文字模板\r\n设置```template```属性可以自定义文字模板。\r\n```javascript\r\n    class Demo extends React.Component{\r\n\r\n        renderTemplate(progress: Number, status: String): String| React.ReactNode{\r\n            if(status === \'success\'){\r\n                return <span className="demo-icon-success"><Icon type="success"/></span>\r\n            }else if(status === \'error\'){\r\n                return <span className="demo-icon-error"><Icon type="error"/></span>\r\n            }\r\n            return `${progress}%`;\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <div className="demo-progress-list">\r\n                        <Progress progress={30} outside template={this.renderTemplate.bind(this)} />\r\n                        <Progress progress={50} outside status="paused" template={this.renderTemplate.bind(this)} />\r\n                        <Progress progress={100} outside status="success" template={this.renderTemplate.bind(this)} />\r\n                        <Progress progress={75} outside status="error" template={this.renderTemplate.bind(this)} />\r\n                    </div>\r\n                    <div className="demo-progress-list demo-progress-list-circle">\r\n                        <Progress mode="circle" progress={30} outside template={this.renderTemplate.bind(this)} />\r\n                        <Progress mode="circle" progress={50} outside status="paused" template={this.renderTemplate.bind(this)} />\r\n                        <Progress mode="circle" progress={100} outside status="success" template={this.renderTemplate.bind(this)} />\r\n                        <Progress mode="circle" progress={75} outside status="error" template={this.renderTemplate.bind(this)} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### Basic\r\nBasic usage of radio.\r\n```javascript \r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                value: '1'\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        render(){\r\n            const value = this.state.value;\r\n            return (\r\n                <div>\r\n                    <Radio value=\"1\" checked={value === '1'} onChange={this.handleChange}>Tank</Radio>\r\n                    <Radio value=\"2\" checked={value === '2'} onChange={this.handleChange}>DPS</Radio>\r\n                    <Radio value=\"3\" checked={value === '3'} onChange={this.handleChange}>Support</Radio>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Button group style\r\nDisplay in button group style.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                value: \'1\'\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        render(){\r\n            const value = this.state.value;\r\n            return (\r\n                <Radio.Group value={value} onChange={this.handleChange}>\r\n                    <Radio.Button value="1">Tank</Radio.Button>\r\n                    <Radio.Button value="2">DPS</Radio.Button>\r\n                    <Radio.Button value="3">Support</Radio.Button>\r\n                </Radio.Group>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Disabled Radio\r\nDisable the radio.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                value: '1'\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        render(){\r\n            const value = this.state.value;\r\n            return (\r\n                <div>\r\n                    <Radio value=\"1\" checked={value === '1'} onChange={this.handleChange}>Tank</Radio>\r\n                    <Radio value=\"2\" checked={value === '2'} disabled onChange={this.handleChange}>DPS</Radio>\r\n                    <Radio value=\"3\" checked={value === '3'} onChange={this.handleChange}>Support</Radio>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### 单选框组\r\nA group of radio.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                checked: false\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n            this.toggle = this.toggle.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        toggle(checked){\r\n            this.setState({\r\n                checked\r\n            })\r\n        }\r\n        render(){\r\n            const { value, checked } = this.state;\r\n            return (\r\n                <div>\r\n                    <Checkbox checked={checked} onChange={c => this.toggle(c)}>Disable all</Checkbox>\r\n                    <p>\r\n                        <Radio.Group disabled={checked} defaultValue="2" value={value} onChange={this.handleChange}>\r\n                            <Radio value="1">Engineering</Radio>\r\n                            <Radio value="2">Mining</Radio>\r\n                            <Radio value="3">Alchemy</Radio>\r\n                            <Radio value="4">Forging</Radio>\r\n                        </Radio.Group>\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Radio\r\nTo select only one option.\r\n### Examples\r\n@@---------------@@\r\n### API\r\n#### Radio\r\n#### Radio.Button\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nvalue | the unique value of radio | ```String丨Number``` | -\r\nchecked | indicate if radio is selected | ```Boolean``` | ```false```\r\ndisabled | disable radio | ```Boolean``` | ```false```\r\n\r\n#### Radio.Group\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nvalue | the unique value of radio group | ```String丨Number``` | -\r\ndisabled | disable all radios in group | ```Boolean``` | ```false```\r\nonChange | the callback function triggered by group value changes | ```(value: String丨Number) => {}```  | -"},function(n,e){n.exports="### 基本用法\r\n简单的单选框用法。\r\n```javascript \r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                value: '1'\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        render(){\r\n            const value = this.state.value;\r\n            return (\r\n                <div>\r\n                    <Radio value=\"1\" checked={value === '1'} onChange={this.handleChange}>坦克</Radio>\r\n                    <Radio value=\"2\" checked={value === '2'} onChange={this.handleChange}>输出</Radio>\r\n                    <Radio value=\"3\" checked={value === '3'} onChange={this.handleChange}>治疗</Radio>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### 单选按钮组\r\n以按钮组的形式展示单选框组。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                value: \'1\'\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        render(){\r\n            const value = this.state.value;\r\n            return (\r\n                <Radio.Group value={value} onChange={this.handleChange}>\r\n                    <Radio.Button value="1">坦克</Radio.Button>\r\n                    <Radio.Button value="2">输出</Radio.Button>\r\n                    <Radio.Button value="3">治疗</Radio.Button>\r\n                </Radio.Group>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### 禁用\r\n使单选框不可用。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                value: '1'\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        render(){\r\n            const value = this.state.value;\r\n            return (\r\n                <div>\r\n                    <Radio value=\"1\" checked={value === '1'} onChange={this.handleChange}>坦克</Radio>\r\n                    <Radio value=\"2\" checked={value === '2'} disabled onChange={this.handleChange}>输出</Radio>\r\n                    <Radio value=\"3\" checked={value === '3'} onChange={this.handleChange}>治疗</Radio>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### 单选框组\r\n将逻辑互斥的选项置于一组中。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                checked: false\r\n            }\r\n            this.handleChange = this.handleChange.bind(this);\r\n            this.toggle = this.toggle.bind(this);\r\n        }\r\n        handleChange(value){\r\n            this.setState({\r\n                value\r\n            });\r\n        }\r\n        toggle(checked){\r\n            this.setState({\r\n                checked\r\n            })\r\n        }\r\n        render(){\r\n            const { value, checked } = this.state;\r\n            return (\r\n                <div>\r\n                    <Checkbox checked={checked} onChange={c => this.toggle(c)}>禁用</Checkbox>\r\n                    <p>\r\n                        <Radio.Group disabled={checked} value={value} defaultValue="2" onChange={this.handleChange}>\r\n                            <Radio value="1">草药</Radio>\r\n                            <Radio value="2">采矿</Radio>\r\n                            <Radio value="3">炼金</Radio>\r\n                            <Radio value="4">锻造</Radio>\r\n                        </Radio.Group>\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Radio 单选框\r\n仅能单选的备选项。\r\n### 代码示例\r\n@@---------------@@\r\n### API\r\n#### Radio\r\n#### Radio.Button\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nvalue | 单选框的值 | ```String丨Number``` | -\r\nchecked | 是否选中 | ```Boolean``` | ```false```\r\ndisabled | 是否禁用 | ```Boolean``` | ```false```\r\n\r\n#### Radio.Group\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nvalue | 组内选中单选框的值 | ```String丨Number``` | -\r\ndisabled | 是否禁用组内所有单选框 | ```Boolean``` | ```false```\r\nonChange | 选中单选框的值改变时触发 | ```(value: String丨Number) => {}``` | -\r\n"},function(n,e){n.exports='### Basic\r\na simple Select.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Select className="demo-select" placeholder="Please select...">\r\n                    <Select.Option value="1" label="Option1" />\r\n                    <Select.Option value="2" label="Option2" />\r\n                    <Select.Option value="3" label="Option3" />\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Disbled\r\nDisable select or option.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-select-list">\r\n                    <Select className="demo-select" placeholder="Disable select" disabled>\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                    </Select>\r\n                    <Select className="demo-select" placeholder="Disable option">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" disabled />\r\n                        <Select.Option value="3" label="Option3" />\r\n                    </Select>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Filter\r\nOptions are filtered according to the search content.\r\n```javascript\r\n    const  data = [{\r\n                    value: '1',\r\n                    label: 'Arthas'\r\n                }, {\r\n                    value: '2',\r\n                    label: 'Illidan'\r\n                }, {\r\n                    value: '3',\r\n                    label: 'Sylvanas'\r\n                }, {\r\n                    value: '4',\r\n                    label: 'Thrall'\r\n                }, {\r\n                    value: '5',\r\n                    label: 'Jaina'\r\n                }, {\r\n                    value: '6',\r\n                    label: 'Archimonde'\r\n                }];\r\n    class Demo extends React.Component {\r\n        \r\n        constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                options: data,\r\n            }\r\n        }\r\n\r\n        handleSearch(val){\r\n            const options = data.filter(item => item.label.includes(val));\r\n            this.setState({\r\n                options\r\n            });\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <Select className=\"demo-select\" filterable onSearch={val => this.handleSearch(val)} placeholder=\"Your Idor\">\r\n                    {this.state.options.map((item, i) => {\r\n                        return (\r\n                            <Select.Option key={`option-${i}`} \r\n                                value={item.value}\r\n                                label={item.label}    \r\n                            />\r\n                        )\r\n                    })}\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Option group\r\nThe samilar options can be grouped by ```Select.OptGroup```.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Select placeholder="Option group" className="demo-select">\r\n                    <Select.OptGroup label="Group1">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                    </Select.OptGroup>\r\n                    <Select.OptGroup label="Group2">\r\n                        <Select.Option value="4" label="Option4" />\r\n                        <Select.Option value="5" label="Option5" />\r\n                    </Select.OptGroup>\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="## Select\r\nThe component that select value from options.\r\n@@---------@@\r\n## API\r\n\r\n### Select\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ndefaultValue | the initial value | ```String丨Number丨Array``` | -\r\nvalue | value of select option | ```String丨Number丨Array``` | -\r\nmultiple | indicate whether to support multiple selection | ```Boolean``` | ```false```\r\nsize | size of select | ```'large'丨'middle'丨'small'```| ```'middle'```\r\nplaceholder | the text in select when the value is empty | ```String``` | -\r\ndisabled | disable select | ```Boolean``` | ```false```\r\nfilterable | indicate whether to support filteration | ```Boolean``` | ```false```\r\nremote | indicate whether to fetch options from server | ```Boolean``` | ```false```\r\nfetching | the state indicating data are loading | ```Boolean``` | ```false```\r\nonChange | the callback function triggered by change of selected value | ```(value: String丨String[]) => {}``` | -\r\nonSearch | the callback function triggered by change of search content | ```(value: String) => {}``` | -\r\n\r\n### Select.Option\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nvalue | the unique value of option. Required. | ```String丨Number``` | -\r\nlabel | the label value of option. Required. | ```String``` | -\r\ndisabled | disable option | ```Boolean``` | ```false```\r\n\r\n### Select.OptGroup\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\nlabel | group name | ```String丨ReactNode``` | -\r\n"},function(n,e){n.exports='### Multiple\r\nMultiple options can be selected and removed.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-select-list">\r\n                    <Select multiple size="large" placeholder="Multiple select">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                        <Select.Option value="4" label="Option4" />\r\n                        <Select.Option value="5" label="Option5" />\r\n                        <Select.Option value="6" label="Option6" />\r\n                    </Select>\r\n                    <Select multiple placeholder="Multiple select">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                        <Select.Option value="4" label="Option4" />\r\n                        <Select.Option value="5" label="Option5" />\r\n                        <Select.Option value="6" label="Option6" />\r\n                    </Select>\r\n                    <Select multiple size="small" placeholder="Multiple select">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                        <Select.Option value="4" label="Option4" />\r\n                        <Select.Option value="5" label="Option5" />\r\n                        <Select.Option value="6" label="Option6" />\r\n                    </Select>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Remote\r\nSearch from remote server.\r\n```javascript\r\n    const provinces = [\r\n        {id:1, name: '新疆'}, \r\n        {id:2, name: '西藏'}, \r\n        {id:3, name: '内蒙古'},\r\n        {id:4, name: '青海'},\r\n        {id:5, name: '四川'},\r\n        {id:6, name: '黑龙江'},\r\n        {id:7, name: '甘肃'},\r\n        {id:8, name: '云南'},\r\n        {id:9, name: '广西'},\r\n        {id:10, name: '湖南'},\r\n        {id:11, name:'陕西'},\r\n        {id:12, name: '广东'},\r\n        {id:13, name: '吉林'},\r\n        {id:14, name: '河北'},\r\n        {id:15, name: '湖北'},\r\n        {id:16, name: '贵州'},\r\n        {id:17, name: '山东'},\r\n        {id:18, name: '江西'},\r\n        {id:19, name: '河南'},\r\n        {id:20, name: '辽宁'},\r\n        {id:21, name: '山西'},\r\n        {id:22, name: '安徽'},\r\n        {id:23, name: '福建'},\r\n        {id:24, name: '浙江'},\r\n        {id:25, name: '江苏'},\r\n        {id:26, name: '重庆'},\r\n        {id:27, name: '宁夏'},\r\n        {id:28, name: '海南'},\r\n        {id:29, name: '台湾'},\r\n        {id:30, name: '北京'},\r\n        {id:31, name: '天津'},\r\n        {id:32, name: '上海'},\r\n        {id:33, name: '香港'},\r\n        {id:34, name: '澳门'},\r\n    ]\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                fetching: false,\r\n                options: []\r\n            }\r\n        }\r\n        fetch(keyword: String): Promise{\r\n            return new Promise(resolve => {\r\n                const timer = setTimeout(() => {\r\n                    const options = provinces.filter(p => {\r\n                        return p.name.includes(keyword);\r\n                    });\r\n                    resolve(options);\r\n                    clearTimeout(timer);\r\n                }, Math.random() * 3000);\r\n            });\r\n        }\r\n        handleSearch(val: String){\r\n            console.log(val);\r\n            this.setState({\r\n                fetching:true\r\n            }, () => {\r\n                this.fetch(val).then(options => {\r\n                    this.setState({\r\n                        options,\r\n                        fetching: false\r\n                    })\r\n                });\r\n            });\r\n        }\r\n        handleChange(value: Array){\r\n            console.log(value);\r\n            this.setState({\r\n                options: [],\r\n                fetching: false\r\n            });\r\n        }\r\n        render(){\r\n            const { options, fetching } = this.state;\r\n            return (\r\n                <Select onSearch={val => this.handleSearch(val)} placeholder=\"Remote search\" style={{width: '100%'}}\r\n                    remote filterable multiple fetching={fetching}\r\n                > \r\n                    {options.map((op, i) => {\r\n                        return <Select.Option key={op.id} value={op.id} label={op.name} />\r\n                    })}\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Size\r\nDifferent size of select.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-select-list">\r\n                    <Select size="large" placeholder="Large select" className="demo-select">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                    </Select>\r\n                    <Select placeholder="Middle select" className="demo-select">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                    </Select>\r\n                    <Select size="small" placeholder="Small select" className="demo-select">\r\n                        <Select.Option value="1" label="Option1" />\r\n                        <Select.Option value="2" label="Option2" />\r\n                        <Select.Option value="3" label="Option3" />\r\n                    </Select>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Customized template\r\nIf children elements present in Option, it will be rendered by ```children``` instead if ```label```.\r\n```javascript\r\n\r\n    const options = [{\r\n        value: 'Sylvanas',\r\n        label: 'Dark Queen'\r\n    }, {\r\n        value: 'Vol\\'jin',\r\n        label: 'Horde Chief'\r\n    }, {\r\n        value: 'Gul\\'dan',\r\n        label: 'Legion Agent'\r\n    }]\r\n\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Select className=\"demo-select\" placeholder=\"Your idor\">\r\n                    {options.map(op => {\r\n                        return (\r\n                            <Select.Option key={op.value} value={op.value} label={op.label}>\r\n                                <div className=\"demo-option\">\r\n                                    <span className=\"demo-option-main\">{op.label}</span>\r\n                                    <span className=\"demo-option-sub\">{op.value}</span>\r\n                                </div>\r\n                            </Select.Option>\r\n                        )\r\n                    })}\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### 基本用法\n简单的选择器。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Select className="demo-select" placeholder="请选择" defaultValue="1">\n                    <Select.Option value="1" label="Option1" />\n                    <Select.Option value="2" label="Option2" />\n                    <Select.Option value="3" label="Option3" />\n                </Select>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 禁用\n禁用选择器或选项。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-select-list">\n                    <Select className="demo-select" placeholder="禁用选择器" disabled>\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                    </Select>\n                    <Select className="demo-select" placeholder="禁用选项">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" disabled />\n                        <Select.Option value="3" label="Option3" />\n                    </Select>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 过滤\n根据输入内容动态过滤选项。\n```javascript\n    const  data = [{\n                    value: '1',\n                    label: '阿尔萨斯'\n                }, {\n                    value: '2',\n                    label: '伊利丹'\n                }, {\n                    value: '3',\n                    label: '希尔瓦娜斯'\n                }, {\n                    value: '4',\n                    label: '萨尔'\n                }, {\n                    value: '5',\n                    label: '吉安娜'\n                }, {\n                    value: '6',\n                    label: '阿克蒙德'\n                }];\n    class Demo extends React.Component {\n        \n        constructor(props){\n            super(props);\n            this.state = {\n                options: data,\n            }\n        }\n\n        handleSearch(val){\n            const options = data.filter(item => item.label.includes(val));\n            this.setState({\n                options\n            });\n        }\n\n        render(){\n            return (\n                <Select className=\"demo-select\" filterable onSearch={val => this.handleSearch(val)} placeholder=\"你喜欢的英雄\">\n                    {this.state.options.map((item, i) => {\n                        return (\n                            <Select.Option key={`option-${i}`} \n                                value={item.value}\n                                label={item.label}    \n                            />\n                        )\n                    })}\n                </Select>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 分组\n归纳相近的选项。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Select placeholder="选项分组" className="demo-select">\n                    <Select.OptGroup label="Group1">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                    </Select.OptGroup>\n                    <Select.OptGroup label="Group2">\n                        <Select.Option value="4" label="Option4" />\n                        <Select.Option value="5" label="Option5" />\n                    </Select.OptGroup>\n                </Select>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Select 选择器\n选项较多时，以下拉菜单的形式展示。\n@@---------@@\n## API\n\n### Select\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ndefaultValue | 默认选中的选项 | ```String丨Number丨Array``` | -\nvalue | 选中的选项 | ```String丨Number丨Array``` | -\nmultiple | 是否可多选 | ```Boolean``` | ```false```\nsize | 选择器大小 | ```'large'丨'middle'丨'small'```| ```'middle'```\nplaceholder | 占位文本 | ```String``` | -\ndisabled | 禁用选择器 | ```Boolean``` | ```false```\nfilterable | 是否可过滤选项 | ```Boolean``` | ```false```\nremote | 是否启用远程搜索模式 | ```Boolean``` | ```false```\nfetching | 远程数据加载状态, 仅在```remote```模式下有效 | ```Boolean``` | ```false```\nonChange | 当前展开项改变时触发, 参数```value```为当前选中的值 | ```(value: String丨String[]) => {}``` | -\nonSearch | 输出文本时触发, 仅在```filterable```模式下有效 | ```(value: String) => {}``` | -\n\n### Select.Option\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nvalue | 选项的唯一值, 必填 | ```String丨Number``` | -\nlabel | 选项的标签值, 必填 | ```String``` | -\ndisabled | 禁用选项 | ```Boolean``` | ```false```\n\n### Select.OptGroup\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nlabel | 分组名称 | ```String丨ReactNode``` | -\n"},function(n,e){n.exports='### 多选\n一次可以选多个选项, 并且选中项可移除。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-select-list">\n                    <Select className="demo-select" multiple size="large" placeholder="基础多选">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                        <Select.Option value="4" label="Option4" />\n                        <Select.Option value="5" label="Option5" />\n                        <Select.Option value="6" label="Option6" />\n                    </Select>\n                    <Select multiple placeholder="基础多选">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                        <Select.Option value="4" label="Option4" />\n                        <Select.Option value="5" label="Option5" />\n                        <Select.Option value="6" label="Option6" />\n                    </Select>\n                    <Select multiple size="small" placeholder="基础多选">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                        <Select.Option value="4" label="Option4" />\n                        <Select.Option value="5" label="Option5" />\n                        <Select.Option value="6" label="Option6" />\n                    </Select>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 远程搜索\n通过输入关键字从服务器搜索。\n```javascript\n    const provinces = [\n        {id:1, name: '新疆'}, \n        {id:2, name: '西藏'}, \n        {id:3, name: '内蒙古'},\n        {id:4, name: '青海'},\n        {id:5, name: '四川'},\n        {id:6, name: '黑龙江'},\n        {id:7, name: '甘肃'},\n        {id:8, name: '云南'},\n        {id:9, name: '广西'},\n        {id:10, name: '湖南'},\n        {id:11, name:'陕西'},\n        {id:12, name: '广东'},\n        {id:13, name: '吉林'},\n        {id:14, name: '河北'},\n        {id:15, name: '湖北'},\n        {id:16, name: '贵州'},\n        {id:17, name: '山东'},\n        {id:18, name: '江西'},\n        {id:19, name: '河南'},\n        {id:20, name: '辽宁'},\n        {id:21, name: '山西'},\n        {id:22, name: '安徽'},\n        {id:23, name: '福建'},\n        {id:24, name: '浙江'},\n        {id:25, name: '江苏'},\n        {id:26, name: '重庆'},\n        {id:27, name: '宁夏'},\n        {id:28, name: '海南'},\n        {id:29, name: '台湾'},\n        {id:30, name: '北京'},\n        {id:31, name: '天津'},\n        {id:32, name: '上海'},\n        {id:33, name: '香港'},\n        {id:34, name: '澳门'},\n    ]\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.state = {\n                fetching: false,\n                options: []\n            }\n        }\n        fetch(keyword: String): Promise{\n            return new Promise(resolve => {\n                const timer = setTimeout(() => {\n                    const options = provinces.filter(p => {\n                        return p.name.includes(keyword);\n                    });\n                    resolve(options);\n                    clearTimeout(timer);\n                }, Math.random() * 3000);\n            });\n        }\n        handleSearch(val: String){\n            console.log(val);\n            this.setState({\n                fetching:true\n            }, () => {\n                this.fetch(val).then(options => {\n                    this.setState({\n                        options,\n                        fetching: false\n                    })\n                });\n            });\n        }\n        handleChange(value: Array){\n            console.log(value);\n            this.setState({\n                options: [],\n                fetching: false\n            });\n        }\n        render(){\n            const { options, fetching } = this.state;\n            return (\n                <Select onSearch={val => this.handleSearch(val)} placeholder=\"远程搜索\"\n                    remote filterable multiple fetching={fetching} style={{width: '100%'}}\n                > \n                    {options.map((op, i) => {\n                        return <Select.Option key={op.id} value={op.id} label={op.name} />\n                    })}\n                </Select>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 不同尺寸\n设置```size```属性可以控制选择器的大小。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-select-list">\n                    <Select size="large" placeholder="大尺寸" className="demo-select">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                    </Select>\n                    <Select placeholder="中尺寸" className="demo-select">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                    </Select>\n                    <Select size="small" placeholder="小尺寸" className="demo-select">\n                        <Select.Option value="1" label="Option1" />\n                        <Select.Option value="2" label="Option2" />\n                        <Select.Option value="3" label="Option3" />\n                    </Select>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 自定义模板\r\n如果选项包含子元素, 则选项将展示子元素, 否则展示```label```。\r\n```javascript\r\n\r\n    const options = [{\r\n        value: 'Sylvanas',\r\n        label: '希尔瓦娜斯'\r\n    }, {\r\n        value: 'Vol\\'jin',\r\n        label: '沃金'\r\n    }, {\r\n        value: 'Gul\\'dan',\r\n        label: '古尔丹'\r\n    }]\r\n\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Select className=\"demo-select\" placeholder=\"请选择你喜欢的英雄\">\r\n                    {options.map(op => {\r\n                        return (\r\n                            <Select.Option key={op.value} value={op.value} label={op.label}>\r\n                                <div className=\"demo-option\">\r\n                                    <span className=\"demo-option-main\">{op.label}</span>\r\n                                    <span className=\"demo-option-sub\">{op.value}</span>\r\n                                </div>\r\n                            </Select.Option>\r\n                        )\r\n                    })}\r\n                </Select>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Basic\nA simple Slider.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return <Slider defaultValue={25} />\n        }\n    }\n```"},function(n,e){n.exports="### Controlled slider\nThe value of slider is controlled by other component.\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                value: 50\n            }\n        }\n        handleChange(value: Number){\n            this.setState({\n                value\n            });\n        }\n        render(){\n            const value = this.state.value;\n            return (\n                <Row>\n                    <Col span={18}>\n                        <Slider value={value} />\n                    </Col>\n                    <Col span={6}>\n                        <NumberInput value={value} onChange={this.handleChange.bind(this)} />\n                    </Col>\n                </Row>\n            )\n        }\n    }\n```"},function(n,e){n.exports="### Disabled slider\nSlider will be not operable when attribute ```disabled``` set to ```true```.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Slider defaultValue={30} disabled/>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### Exclude\nDo not highlight the part of trace less than current value.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-slider">\n                    <Slider defaultValue={35} exclude />\n                    <Slider defaultValue={65} exclude disabled />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Slider\nPick value by dragging slider in s specific range.\n### Examples\n@@-----------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\ndefaultValue | initial value | ```Number``` | minimum\nvalue | binding value | ```Number``` | -\nmode | displaying direction | ```'horizontal'丨'vertical'``` | ```'horizontal'```\ndisabled | disable slider | ```Boolean``` | ```false```\nexclude | indicate whether not to highlight the part less than current value | ```Boolean``` | ```false```\nshowTicks | indicate whether to show the ticks in trace | ```Boolean``` | ```false``` \nstep | value of sliding step. It should be divided by the difference between maximun and minimum  | ```Number``` | ```1```\nmaximum | maximal value the slider can slide to | ```Number``` | ```100```\nminimun | minimal value the slider can slide to | ```Number``` | ```0```\ntooltipTemplate | rendering template of tooltip. Tooltip will be not rendered if it set to ```false``` | ```(value: Number) => {}丨String丨Boolean ``` | ```true```\nonChange | the callback function triggered by value change | ```(value: Number) => {}``` | -"},function(n,e){n.exports='### Customized template of tooltip\nIf attribute ```tooltipTemplate``` set to ```false```, the tooltip will not be rendered.Contrarily, default template will be used.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div className="demo-slider">\n                    <Slider defaultValue={30} tooltipTemplate={value => `当前值: ${value}`} />\n                    <Slider defaultValue={45} tooltipTemplate="设置为String" />\n                    <Slider defaultValue={65} tooltipTemplate={false} />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Maximum, minimum and step\nYou can customize the attributes ```maximum```, ```minimum``` and ```step```.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div className="demo-slider">\n                    <Slider showTicks step={50} maximum={1000} minimum={100} />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Vertical\nDisplay vertically.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div className="demo-slider-vertical">\n                    <Slider mode="vertical" defaultValue={36} \n                        tooltipTemplate={val => `currentValue:${val}`}\n                    />\n                    <Slider mode="vertical" step={10} defaultValue={50} showTicks \n                         tooltipTemplate={val => `currentValue:${val}`}\n                    />\n                    <Slider mode="vertical" defaultValue={75} disabled />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 基本用法\r\n简单的滑块。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return <Slider defaultValue={25}/>\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 受控滑块\n滑块的值受外部组件控制。\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                value: 50\n            }\n        }\n        handleChange(value: Number){\n            this.setState({\n                value\n            });\n        }\n        render(){\n            const value = this.state.value;\n            return (\n                <Row>\n                    <Col span={18}>\n                        <Slider value={value} />\n                    </Col>\n                    <Col span={6}>\n                        <NumberInput value={value} onChange={this.handleChange.bind(this)} />\n                    </Col>\n                </Row>\n            )\n        }\n    }\n```"},function(n,e){n.exports="### 禁用\n使滑块不可用。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Slider defaultValue={30} disabled/>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 不包含\n设置```exclude```为, 将不高亮显示数值小于当前数值部分。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-slider">\n                    <Slider defaultValue={35} exclude />\n                    <Slider defaultValue={65} exclude disabled />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Slider 滑块\r\n在指定范围内拖动取值。\r\n### 代码示例\r\n@@-----------@@\r\n### API\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ndefaultValue | 默认值 | ```Number``` | 最小值\r\nvalue | 绑定值 | ```Number``` | -\r\nmode | 滑块的展示模式 | ```'horizontal'丨'vertical'``` | ```'horizontal'```\r\ndisabled | 是否禁用 | ```Boolean``` | ```false```\r\nexclude | 是否不高亮显示小于当前值的部分 | ```Boolean``` | ```false```\r\nshowTicks | 是否显示刻度 | ```Boolean``` | ```false``` \r\nstep | 滑动的步长值, 其值应能被最大值和最小值得差值整除 | ```Number``` | ```1```\r\nmaximum | 最大值 | ```Number``` | ```100```\r\nminimun | 最小值 | ```Number``` | ```0```\r\ntooltipTemplate | 文字提示渲染模板. 设置为```false```将不渲染. | ```(value: Number) => {}丨String丨Boolean ``` | ```true```\r\nonChange | 当前值改变时触发 | ```(value: Number) => {}``` | -"},function(n,e){n.exports='### 自定义Tooltip模板\r\n属性```tooltipTemplate```可为```Function```、```String```或```Boolean```, 当设置为```false```时将不显示tooltip, 为```true```时启用默认渲染模板。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-slider">\r\n                    <Slider defaultValue={30} tooltipTemplate={value => `当前值: ${value}`} />\r\n                    <Slider defaultValue={45} tooltipTemplate="设置为String" />\r\n                    <Slider defaultValue={65} tooltipTemplate={false} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 最值与步长\n设置```maximum```, ```minimum```和```step```可以改变最大值、最小值和步长。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div className="demo-slider">\n                    <Slider showTicks step={50} maximum={1000} minimum={100} />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 垂直模式\n纵向滑块。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <div className="demo-slider-vertical">\n                    <Slider mode="vertical" defaultValue={36} \n                        tooltipTemplate={val => `当前值:${val}`}\n                    />\n                    <Slider mode="vertical" step={10} defaultValue={50} showTicks \n                         tooltipTemplate={val => `当前值:${val}`}\n                    />\n                    <Slider mode="vertical" defaultValue={75} disabled />\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Basic\r\nThe simplest usage of Steps.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <Steps currentIndex={1}>\r\n                    <Steps.Step title="Step1" description="Step1 Description" />\r\n                    <Steps.Step title="Step2" description="Step2 Description" />\r\n                    <Steps.Step title="Step3" description="Step3 Description" />\r\n                </Steps>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Switch Steps\r\nSwitching step by other component.\r\n```javascript\r\n    class Demo extends React.Component {   \r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                activeIndex: 0\r\n            }\r\n        }\r\n\r\n        changeStep(delta){\r\n            this.setState(({activeIndex}) => {\r\n                activeIndex += delta;\r\n                if(activeIndex < 0){\r\n                    activeIndex = 0;\r\n                }else if(activeIndex > 2){\r\n                    activeIndex = 2;\r\n                }\r\n                return {\r\n                    activeIndex\r\n                }\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-steps">\r\n                    <Steps currentIndex={this.state.activeIndex}>\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Steps mode="vertical" currentIndex={this.state.activeIndex}>\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Button.Group type="primary">\r\n                        <Button onClick={this.changeStep.bind(this, -1)}>Prev</Button>\r\n                        <Button onClick={this.changeStep.bind(this, 1)}>Next</Button>\r\n                    </Button.Group>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Customized icon\r\nThe icon of step can be customized by setting attribute ```icon```.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <Steps>\r\n                    <Steps.Step icon="user" title="Register Info" description="Please complete basic info" />\r\n                    <Steps.Step icon="setting" title="Individual Info" description="Please complete individual info" />\r\n                    <Steps.Step icon="picture" title="Avatar Uploading" description="Please upload your avatar" />      \r\n                </Steps>\r\n            )\r\n        }\r\n    }\r\n```  '},function(n,e){n.exports="## Steps\r\nUsed to interact width large form, guiding use to complete the specific operation.\r\n### Examples\r\n@@--------@@\r\n### API\r\n#### Steps\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ncurrentIndex | the index of current step | ```Number``` | ```0```\r\nmode | the display style of steps | ```'horizontal'丨'vertical'``` | ```'horizontal'```\r\nstatus | the status of current step | ```'error'丨'success'丨'processing'``` | -\r\n\r\n#### Steps.Step\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ntitle | the title of step | ```String丨ReactNode``` | -\r\ndescription | the description of step | ```String丨ReactNode``` | -\r\nicon| the icon of step | ```String丨ReactNode``` | -"},function(n,e){n.exports='### Status\r\nSetting attribute ```status``` can specify the status of current step.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-steps">\r\n                    <Steps currentIndex={1} status="error">\r\n                        <Steps.Step icon="user" title="Register Info" description="Please complete basic info" />\r\n                        <Steps.Step icon="setting" title="Individual Info" description="Please complete individual info" />\r\n                        <Steps.Step icon="picture" title="Avatar Uploading" description="Please upload your avatar" />      \r\n                    </Steps>\r\n                    <Steps currentIndex={2} status="success">\r\n                        <Steps.Step icon="user" title="Register Info" description="Please complete basic info" />\r\n                        <Steps.Step icon="setting" title="Individual Info" description="Please complete individual info" />\r\n                        <Steps.Step icon="picture" title="Avatar Uploading" description="Please upload your avatar" />      \r\n                    </Steps>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### Vertical\r\nDisplay vertically.\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <div className="demo-steps-vertical">\r\n                    <Steps currentIndex={1} mode="vertical">\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Steps currentIndex={1} mode="vertical" status="error">\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Steps currentIndex={2} mode="vertical" status="success">\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 基本用法\r\n简单的步骤条。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <Steps currentIndex={1}>\r\n                    <Steps.Step title="Step1" description="Step1 Description" />\r\n                    <Steps.Step title="Step2" description="Step2 Description" />\r\n                    <Steps.Step title="Step3" description="Step3 Description" />\r\n                </Steps>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 切换步骤\r\n用于控制流程进度。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        \r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                activeIndex: 0\r\n            }\r\n        }\r\n\r\n        changeStep(delta){\r\n            this.setState(({activeIndex}) => {\r\n                activeIndex += delta;\r\n                if(activeIndex < 0){\r\n                    activeIndex = 0;\r\n                }else if(activeIndex > 2){\r\n                    activeIndex = 2;\r\n                }\r\n                return {\r\n                    activeIndex\r\n                }\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-steps">\r\n                    <Steps currentIndex={this.state.activeIndex}>\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Steps mode="vertical" currentIndex={this.state.activeIndex}>\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Button.Group type="primary">\r\n                        <Button onClick={this.changeStep.bind(this, -1)}>上一步</Button>\r\n                        <Button onClick={this.changeStep.bind(this, 1)}>下一步</Button>\r\n                    </Button.Group>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports='### 自定义图标\r\n设置```icon```属性可以控制步骤的图标, 支持```String```和```ReactNode```, 为```String```时将采用[Icon](/#/icon)对应的图标。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <Steps>\r\n                    <Steps.Step icon="user" title="注册信息" description="请填写基本用户信息" />\r\n                    <Steps.Step icon="setting" title="个人资料" description="请完善个人资料" />\r\n                    <Steps.Step icon="picture" title="上传照片" description="上传个人证件照" />      \r\n                </Steps>\r\n            )\r\n        }\r\n    }\r\n```   '},function(n,e){n.exports="## Steps 步骤条\r\n常用于与较大表单联动, 指引用户完成期望操作。\r\n### 代码示例\r\n@@--------@@\r\n### API\r\n#### Steps\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ncurrentIndex | 当前步骤 | ```Number``` | ```0```\r\nmode | 步骤条展现方式 | ```'horizontal'丨'vertical'``` | ```'horizontal'```\r\nstatus | 当前步骤状态 | ```'error'丨'success'丨'processing'``` | -\r\n\r\n#### Steps.Step\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ntitle | 步骤的标题 | ```String丨ReactNode``` | -\r\ndescription | 步骤的描述 | ```String丨ReactNode``` | -\r\nicon| 步骤图标 | ```String丨ReactNode``` | -"},function(n,e){n.exports='### 状态控制\r\n属性```status```可以控制当前步骤条的状态。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return (\r\n                <div className="demo-steps">\r\n                    <Steps currentIndex={1} status="error">\r\n                        <Steps.Step icon="user" title="注册信息" description="请填写基本用户信息" />\r\n                        <Steps.Step icon="setting" title="个人资料" description="请完善个人资料" />\r\n                        <Steps.Step icon="picture" title="上传照片" description="上传个人证件照" />\r\n                    </Steps>\r\n                    <Steps currentIndex={2} status="success">\r\n                        <Steps.Step icon="user" title="注册信息" description="请填写基本用户信息" />\r\n                        <Steps.Step icon="setting" title="个人资料" description="请完善个人资料" />\r\n                        <Steps.Step icon="picture" title="上传照片" description="上传个人证件照" />\r\n                    </Steps>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports='### 垂直模式\r\n步骤条纵向展示。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <div className="demo-steps-vertical">\r\n                    <Steps currentIndex={1} mode="vertical">\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Steps currentIndex={1} mode="vertical" status="error">\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                    <Steps currentIndex={2} mode="vertical" status="success">\r\n                        <Steps.Step title="Step1" description="Step1 Description" />\r\n                        <Steps.Step title="Step2" description="Step2 Description" />\r\n                        <Steps.Step title="Step3" description="Step3 Description" />\r\n                    </Steps>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### 基本用法\n```javascript\n    const columns = [{\n        label: '姓名',\n        key: 'name',\n    },{\n        label: '性别',\n        key: 'gender',\n    }, {\n        label: '年龄',\n        key: 'age'\n    }, {\n        label: '毕业院校',\n        key: 'school'\n    }];\n\n    const data = new Array(5).fill(0).map(() => {\n        return {\n            name: '张无忌',\n            age: 20,\n            gender: '男',\n            school: '华南理工大学'\n        }\n    });\n\n    class Demo extends React.Component{\n        render(){\n            return <Table maxHeight={240} columns={columns} data={data} />\n        }\n    }\n```"},function(n,e){n.exports="### 带列表框的表格\r\n设置```bordered```使表格显示外边框, 单元格显示列表框。\r\n```javascript\r\n    class Demo extends React.Component{\r\n\r\n        constructor(){\r\n            super();\r\n            this.columns = [{\r\n                label: '姓名',\r\n                key: 'name',\r\n            },{\r\n                label: '性别',\r\n                key: 'gender',\r\n            }, {\r\n                label: '年龄',\r\n                key: 'age'\r\n            }, {\r\n                label: '毕业院校',\r\n                key: 'school'\r\n            }]\r\n\r\n            this.dataRow = {\r\n                name: '张无忌',\r\n                age: 18,\r\n                gender: '男',\r\n                school: '华南理工大学'\r\n            }\r\n        }\r\n\r\n        render(){\r\n            const data = new Array(20).fill(this.dataRow);\r\n            return <Table maxHeight={240} columns={this.columns} data={data} bordered />\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="### 多层级表头\r\n设置```ColumnProps```中的```children```属性可实现表头的层级嵌套。\r\n```javascript\r\n    const columns = [{\r\n        key: 'name',\r\n        label: '姓名',\r\n    }, {\r\n        label: '基本信息',\r\n        children: [{\r\n            key: 'age',\r\n            label: '年龄',\r\n            sortable: true\r\n        }, {\r\n            key: 'gender',\r\n            label: '性别'\r\n        }, {\r\n            label: '学校信息',\r\n            children: [{\r\n                key: 'school',\r\n                label: '学校'\r\n            }, {\r\n                label: '学院信息',\r\n                children: [{\r\n                    key: 'college',\r\n                    label: '学院'\r\n                }, {\r\n                    key: 'major',\r\n                    label: '专业'\r\n                }]\r\n            }]\r\n        }]\r\n    }];\r\n\r\n    const data = new Array(10).fill({\r\n        name: '张无忌',\r\n        age: 20,\r\n        gender: 'male',\r\n        school: '华南理工大学',\r\n        college: '环境与能源学院',\r\n        major: '环境工程'\r\n    }).map(row => {\r\n        return Object.assign({}, row, {\r\n            age: Math.round(Math.random() * 100)\r\n        });\r\n    });\r\n\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Table bordered data={data} columns={columns} maxHeight={360}/>\r\n            )\r\n        }\r\n    }\r\n\r\n```"},function(n,e){n.exports="### 可展开行\r\n当单行信息过多时, 启用展开行可以显示额外的信息。\r\n```javascript\r\n    const columns = [{\r\n        label: '姓名',\r\n        key: 'name',\r\n    },{\r\n        label: '性别',\r\n        key: 'gender',\r\n    }, {\r\n        label: '年龄',\r\n        key: 'age'\r\n    }, {\r\n        label: '毕业院校',\r\n        key: 'school'\r\n    }];\r\n\r\n    const data = new Array(5).fill(0).map(() => {\r\n        return {\r\n            name: '张无忌',\r\n            age: 20,\r\n            gender: '男',\r\n            school: '华南理工大学',\r\n            introduce: '我是张无忌, 明教教主'\r\n        }\r\n    });\r\n\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return <Table maxHeight={240} columns={columns} data={data} expandedRowRender={row => <p>{row.introduce}</p>} />\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 自定义过滤器\r\n在列定义中设置```filter```方法可实现自定义过滤。\r\n```javascript\r\n    const columns = [{\r\n        label: '姓名',\r\n        key: 'name',\r\n    },{\r\n        label: '性别',\r\n        key: 'gender'\r\n\r\n    }, {\r\n        label: '年龄',\r\n        key: 'age'\r\n    }, {\r\n        label: '毕业院校',\r\n        key: 'school',\r\n        filterable: true,\r\n        filterableList: [{\r\n            'label': '非北京大学',\r\n            'value': '北京大学'\r\n        }],\r\n        filter(filterValues: Array, row: Object){\r\n            return filterValues.indexOf(row.school) === -1;\r\n        }\r\n    }];\r\n    const data = [{\r\n        name: '寇仲',\r\n        gender: '男',\r\n        age: 22,\r\n        school: '清华大学'\r\n    }, {\r\n        name: '徐子陵',\r\n        gender: '男',\r\n        age: 22,\r\n        school: '北京大学'\r\n    }, {\r\n        name: '师妃暄',\r\n        gender: '女',\r\n        age: 18,\r\n        school: '北京大学'\r\n    }, {\r\n        name: '婠婠',\r\n        gender: '女',\r\n        age:18,\r\n        school: '上海交通大学'\r\n    }];\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return <Table data={data} columns={columns} />\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 可过滤列\n列定义中设置```sortable```实现过滤。\n```javascript\n    const columns = [{\n        label: '姓名',\n        key: 'name',\n    },{\n        label: '性别',\n        key: 'gender',\n        filterableList: [{\n            label: '男',\n            value: '男'\n        }, {\n            label: '女',\n            value: '女'\n        }],\n        filterable: true\n    }, {\n        label: '年龄',\n        key: 'age'\n    }, {\n        label: '毕业院校',\n        key: 'school'\n    }];\n    const data = [{\n        name: '寇仲',\n        gender: '男',\n        age: 22,\n        school: '清华大学'\n    }, {\n        name: '徐子陵',\n        gender: '男',\n        age: 22,\n        school: '北京大学'\n    }, {\n        name: '师妃暄',\n        gender: '女',\n        age: 18,\n        school: '北京大学'\n    }, {\n        name: '婠婠',\n        gender: '女',\n        age:18,\n        school: '上海交通大学'\n    }];\n    class Demo extends React.Component{\n        render(){\n            return <Table data={data} columns={columns} />\n        }\n    }\n```"},function(n,e){n.exports="### 多层级表头\r\n设置```ColumnProps```中的```children```属性可实现表头的层级嵌套。\r\n```javascript\r\n    const columns = [{\r\n        key: 'name',\r\n        label: '姓名',\r\n        width: 200,\r\n        fixed: true\r\n    }, {\r\n        label: '基本信息',\r\n        children: [{\r\n            key: 'age',\r\n            label: '年龄',\r\n            sortable: true,\r\n            width: 200\r\n        }, {\r\n            key: 'gender',\r\n            label: '性别',\r\n            width: 150\r\n        }, {\r\n            label: '学校信息',\r\n            children: [{\r\n                key: 'school',\r\n                label: '学校'\r\n            }, {\r\n                label: '学院信息',\r\n                children: [{\r\n                    key: 'college',\r\n                    label: '学院'\r\n                }, {\r\n                    key: 'major',\r\n                    label: '专业'\r\n                }]\r\n            }]\r\n        }]\r\n    }];\r\n\r\n    const data = new Array(10).fill({\r\n        name: '张无忌',\r\n        age: 20,\r\n        gender: 'male',\r\n        school: '华南理工大学',\r\n        college: '环境与能源学院',\r\n        major: '环境工程'\r\n    }).map(row => {\r\n        return Object.assign({}, row, {\r\n            age: Math.round(Math.random() * 100)\r\n        });\r\n    });\r\n\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Table bordered data={data} columns={columns} maxHeight={360}/>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 行序列\r\n在列定义中设置```index```属性该列将以行序号渲染。\r\n```javascript\r\n    const columns = [{\r\n        index: true\r\n    },{\r\n        label: '姓名',\r\n        key: 'name',\r\n    },{\r\n        label: '性别',\r\n        key: 'gender',\r\n    }, {\r\n        label: '年龄',\r\n        key: 'age'\r\n    }, {\r\n        label: '毕业院校',\r\n        key: 'school'\r\n    }];\r\n\r\n    const data = new Array(20).fill(0).map(() => {\r\n        return {\r\n            name: '张无忌',\r\n            age: 20,\r\n            gender: '男',\r\n            school: '华南理工大学'\r\n        }\r\n    });\r\n\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return <Table maxHeight={240} columns={columns} data={data} />\r\n        }\r\n    }\r\n```"},function(n,e){n.exports=""},function(n,e){n.exports="## Table 表格\n以二维表的形式展示数据, 支持数据的过滤、排序、统计等操作。\n@@--------@@\n### API\n#### Table\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ncolumns | 表格列定义, 配置见下, 必填 | [ColumnProps](/#/) | -\ndata | 数据集合, 必填 | ```Array``` | - \nstriped | 表格奇偶数行以不同样式展示 | ```Boolean``` | ```false```\nbordered | 显示单元格边框 | ```Boolean``` | ```false```\nhoverHighlight | 悬停在表格列时高亮显示 | ```B oolean``` | ```true```\nsummaryRender | 汇总行渲染器, 为```true```时将使用默认渲染器;为```Function```时, 参数```data```、```columns```为数据集合和列定义 | ```Boolean丨(data: Array, columns: Array): Array => {}``` | ```false```\nexpandedRowRender | 展开行渲染器, 参数```data```为数据集合 | ```(data: Array) => {}``` | ```false```\nrowClass | 行的附加类 | ```String丨(row: Object, rowIndex: Number):String => {}``` | -\nrowStyle | 行的附加样式 | ```Object丨(row: Object, rowIndex: Number): Object => {}``` | -\ncellClass | 单元格的附加类 | ```String丨(row: Object, col: Object, rowIndex: Number, colIndex: Number):String => {}``` | -\ncellStyle | 单元格的附加样式 | ```Object丨(row: Object, col: Object, rowIndex: Number, colIndex: Number):Object => {}``` | -\n\n#### ColumnProps\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\nkey | 数据值对应的字段, 请确保唯一性 | ```String``` | -\nlabel | 列标题 | ```String``` | -\nchildren | 子列集合, 用于复合列定义 | ```Array[ColumnProps]``` | -\nwidth | 改列宽度, 如不设置, 列宽将自适应 | ```Number``` | -\nindex | 是否已列号显示该列 | ```Boolean``` | ```false```\nfilterable | 该列是否支持过滤 | ```Boolean``` | ```false```\nsortable | 该列是否支持排序 | ```Boolean``` | ```false```\nfilter | 自定义过滤器 | ```(list)``` | -\nsorter | 自定义排序器 | ```()``` | -\nrender | 自定义该列单元格渲染器 | ```(row: Object, col: Object, rowIndex: Number, colIndex: Number):String丨Number => {}``` | -\n"},function(n,e){n.exports="### 远程请求\r\n常见场景, 从服务器端获取数据, 配合```Pagination```和```Loading```使用。\r\n```javascript\r\n    const columns = [{\r\n        index: true\r\n    },{\r\n        label: '姓名',\r\n        key: 'name',\r\n    },{\r\n        label: '年龄',\r\n        key: 'age',\r\n    }, {\r\n        label: '军师',\r\n        key: 'staff'\r\n    }, {\r\n        label: '阵营',\r\n        key: 'camp'\r\n    }];\r\n\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data: [],\r\n                fetching: false,\r\n                currentPage: 1,\r\n                pageSize: 20\r\n            }\r\n        }\r\n\r\n        //mock remote request\r\n        request(pageIndex: Number, pageSize: Number): Promise{\r\n            return new Promise((resolve, reject) => {\r\n                const timer = setTimeout(() => {\r\n                    clearTimeout(timer);\r\n                    resolve({\r\n                        status: 200,\r\n                        message: '请求成功',\r\n                        data: {\r\n                            total: 1000,\r\n                            pageIndex,\r\n                            pageSize,\r\n                            list:new Array(pageSize).fill(0).map(() => {\r\n                                const seed = Math.floor(Math.random()*3);\r\n                                return {\r\n                                    name:['曹操', '孙权', '刘备'][seed],\r\n                                    age: Math.round(Math.random() * 100),\r\n                                    camp: ['魏国', '吴国', '蜀国'][seed],\r\n                                    staff: ['郭嘉', '周瑜', '诸葛亮'][seed]\r\n                                }\r\n                            })\r\n                        }\r\n                    });\r\n                }, Math.random() * 3000);\r\n            });\r\n        }\r\n\r\n        fetchData(page: Number){\r\n            this.setState({\r\n                fetching: true,\r\n                currentPage: page\r\n            }, () => {\r\n                this.request(page, this.state.pageSize).then(response => {\r\n                    if(response.status === 200){\r\n                        const { list, total } = response.data;\r\n                        this.setState({\r\n                            data: list,\r\n                            totalRecords: total,\r\n                            fetching: false\r\n                        });\r\n                    }else{\r\n                        this.setState({\r\n                            fetching: false\r\n                        });\r\n                    }\r\n                })\r\n            });\r\n        }\r\n\r\n        handlePageChange(page: Number){\r\n            this.fetchData(page);\r\n        }\r\n\r\n        handlePageSizeChange(size: Number){\r\n            this.setState({\r\n                pageSize: size\r\n            }, () => {\r\n                this.fetchData(this.state.currentPage, size);\r\n            });\r\n        }\r\n\r\n        componentDidMount(){\r\n            this.fetchData(1);\r\n        }\r\n\r\n        render(){\r\n            const { fetching, data, totalRecords, pageSize, currentPage } = this.state;\r\n            return (\r\n                <div className=\"demo-table\">\r\n                    <Loading text=\"数据加载中...\" loading={fetching}>\r\n                        <Table maxHeight={280} columns={columns} data={data}/>\r\n                            <div className=\"demo-pagination\">\r\n                                {totalRecords ?\r\n                                    <Pagination \r\n                                        totalRecords={totalRecords} \r\n                                        currentPage={currentPage}\r\n                                        pageSize={pageSize}\r\n                                        layout={['total','jumper', 'regulator', 'pages']} \r\n                                        onChange={this.handlePageChange.bind(this)}\r\n                                        onPageSizeChange={this.handlePageSizeChange.bind(this)}\r\n                                    /> : null\r\n                                }\r\n                            </div>\r\n                    </Loading>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```\r\n"},function(n,e){n.exports="### 自定义单元格模板\r\n在列定义中设置```render```方法可渲染自定义模板。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        constructor(){\r\n            super();\r\n            this.columns = [{\r\n                label: '姓名',\r\n                key: 'name',\r\n            },{\r\n                label: '性别',\r\n                key: 'gender',\r\n            }, {\r\n                label: '年龄',\r\n                key: 'age'\r\n            }, {\r\n                label: '毕业院校',\r\n                key: 'school'\r\n            }, {\r\n                label: '操作',\r\n                render(row, col, rowIndex, colIndex){\r\n                    return (\r\n                        <div className=\"demo-table-control\">\r\n                            <Button link type=\"primary\">私聊</Button>\r\n                            <Button link type=\"primary\">加好友</Button>\r\n                        </div>\r\n                    )\r\n                }\r\n            }]\r\n\r\n            this.dataRow = {\r\n                name: '张无忌',\r\n                age: 18,\r\n                gender: '男',\r\n                school: '华南理工大学'\r\n            }\r\n        }\r\n\r\n        render(){\r\n            const data = new Array(20).fill(this.dataRow);\r\n            return <Table maxHeight={240} columns={this.columns} data={data} />\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 可伸缩列\r\n设置```resizable```时, 鼠标悬浮在表头右侧拖动可拓宽或缩小该列, 仅在```bordered```模式下可用, 最后一列无效。\r\n```javascript\r\n    class Demo extends React.Component{\r\n\r\n        constructor(){\r\n            super();\r\n            this.columns = [{\r\n                label: '姓名',\r\n                key: 'name'\r\n            },{\r\n                label: '性别',\r\n                key: 'gender',\r\n            }, {\r\n                label: '年龄',\r\n                key: 'age'\r\n            }, {\r\n                label: '毕业院校',\r\n                key: 'school'\r\n            }]\r\n\r\n            this.dataRow = {\r\n                name: '张无忌',\r\n                age: 18,\r\n                gender: '男',\r\n                school: '华南理工大学'\r\n            }\r\n        }\r\n\r\n        render(){\r\n            const data = new Array(20).fill(this.dataRow);\r\n            return <Table maxHeight={240} columns={this.columns} data={data} bordered resizable />\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="### 可选择列\r\n列定义中设置```selectable```属性, 改列将以复选框的形式渲染。\r\n```javascript\r\n    const columns = [{\r\n        selectable: true\r\n    },{\r\n        label: '姓名',\r\n        key: 'name',\r\n    },{\r\n        label: '性别',\r\n        key: 'gender',\r\n    }, {\r\n        label: '年龄',\r\n        key: 'age'\r\n    }, {\r\n        label: '毕业院校',\r\n        key: 'school'\r\n    }];\r\n\r\n    const data = new Array(5).fill(0).map(() => {\r\n        return {\r\n            name: '张无忌',\r\n            age: 20,\r\n            gender: '男',\r\n            school: '华南理工大学'\r\n        }\r\n    });\r\n\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return <Table bordered maxHeight={240} columns={columns} data={data} />\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 可排序列\r\n在列定义中设置```sortable```可使该列能够用进行排序。此外, 设置```sorter```属性可实现自定义排序。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        constructor(){\r\n            super();\r\n            this.columns = [{\r\n                label: '姓名',\r\n                key: 'name',\r\n            },{\r\n                label: '性别',\r\n                key: 'gender',\r\n            }, {\r\n                label: '年龄',\r\n                key: 'age',\r\n                sortable: true\r\n            }, {\r\n                label: '毕业院校',\r\n                key: 'school'\r\n            }]\r\n\r\n            this.dataRow = {\r\n                name: '张无忌',\r\n                gender: '男',\r\n                school: '华南理工大学'\r\n            }\r\n        }\r\n\r\n        render(){\r\n            const data = new Array(20).fill(0).map(row => {\r\n                row = {\r\n                    name: '张无忌',\r\n                    gender: '男',\r\n                    school: '华南理工大学'\r\n                };\r\n                row.age = Math.round(Math.random() * 100);\r\n                return row;\r\n            });\r\n            return <Table maxHeight={240} columns={this.columns} data={data} />\r\n        }\r\n\r\n    }\r\n```"},function(n,e){n.exports="### 自定义排序器\n设置```sorter```方法可实现自定义排序。\n```javascript\n    const columns = [{\n        label: '姓名',\n        key: 'name',\n        sortable: true,\n        sorter(value1, value2, isAscend){\n            return value1.name.length < value2.name.length;\n        }\n    },{\n        label: '性别',\n        key: 'gender',\n    }, {\n        label: '年龄',\n        key: 'age'\n    }, {\n        label: '毕业院校',\n        key: 'school'\n    }];\n    const data = [{\n        name: '赵敏',\n        age: 18,\n        gender: '女',\n        school: '华南理工大学'\n    }, {\n        name: '张无忌',\n        age: 20,\n        gender: '男',\n        school: '华南理工大学'\n    }, {\n        name: '耶律洪基',\n        age: 40,\n        gender: '男',\n        school: '华南理工大学'\n    }];\n    class Demo extends React.Component{\n        render(){\n            return <Table maxHeight={240} columns={columns} data={data} />\n        }\n    }\n```"},function(n,e){n.exports="### 奇偶行差异显示\r\n设置```striped```使表格奇数行与偶数行背景不同。\r\n```javascript\r\n    class Demo extends React.Component{\r\n\r\n        constructor(){\r\n            super();\r\n            this.columns = [{\r\n                label: '姓名',\r\n                key: 'name',\r\n            },{\r\n                label: '性别',\r\n                key: 'gender',\r\n            }, {\r\n                label: '年龄',\r\n                key: 'age'\r\n            }, {\r\n                label: '毕业院校',\r\n                key: 'school'\r\n            }]\r\n\r\n            this.dataRow = {\r\n                name: '张无忌',\r\n                age: 18,\r\n                gender: '男',\r\n                school: '华南理工大学'\r\n            }\r\n        }\r\n\r\n        render(){\r\n            const data = new Array(20).fill(this.dataRow);\r\n            return <Table maxHeight={240} columns={this.columns} data={data} striped />\r\n        }\r\n        \r\n    }\r\n```"},function(n,e){n.exports="### 总和统计\r\n用于在尾行统计各列数值的总和。\r\n```javascript\r\n    const columns = [{\r\n        index: true\r\n    },{\r\n        label: '商品',\r\n        key: 'product'\r\n    }, {\r\n        label: '类别',\r\n        key: 'category'\r\n    }, {\r\n        label: '库存量',\r\n        key: 'count'\r\n    }, {\r\n        label: '单价',\r\n        key: 'price'\r\n    }, {\r\n        label: '月销量',\r\n        key: 'sale'\r\n    }];\r\n\r\n    const data = [{\r\n        product: '肉松饼',\r\n        category: '零食',\r\n        count: 1829,\r\n        price: 35,\r\n        sale: 333\r\n    }, {\r\n        product: '优酸乳',\r\n        category: '饮料',\r\n        count: 992,\r\n        price: 36,\r\n        sale: 211\r\n    }, {\r\n        product: '橄榄油',\r\n        category: '粮油',\r\n        count: 321,\r\n        price: 78,\r\n        sale: 99\r\n    }, {\r\n        product: '方便面',\r\n        category: '副食',\r\n        count: 1278,\r\n        sale: 400,\r\n        price: 3\r\n    }];\r\n\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Table columns={columns} data={data} summaryRender bordered />\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### 自定义统计\r\n设置```summaryText```可以设置统计行首列的标签; 设置```summaryRender```为```Function```时可自定义统计方法。\r\n```javascript\r\n    const columns = [{\r\n        index: true\r\n    },{\r\n        label: '商品',\r\n        key: 'product'\r\n    }, {\r\n        label: '类别',\r\n        key: 'category'\r\n    }, {\r\n        label: '库存量',\r\n        key: 'count'\r\n    }, {\r\n        label: '单价',\r\n        key: 'price'\r\n    }, {\r\n        label: '月销量',\r\n        key: 'sale'\r\n    }];\r\n\r\n    const data = [{\r\n        product: '肉松饼',\r\n        category: '零食',\r\n        count: 1829,\r\n        price: 35,\r\n        sale: 333\r\n    }, {\r\n        product: '优酸乳',\r\n        category: '饮料',\r\n        count: 992,\r\n        price: 36,\r\n        sale: 211\r\n    }, {\r\n        product: '橄榄油',\r\n        category: '粮油',\r\n        count: 321,\r\n        price: 78,\r\n        sale: 99\r\n    }, {\r\n        product: '方便面',\r\n        category: '副食',\r\n        count: 1278,\r\n        sale: 400,\r\n        price: 3\r\n    }];\r\n\r\n    class Demo extends React.Component {\r\n        summaryRender(data: Array, columns:Array):Array{\r\n            const totalRow = [];\r\n            for(let i = 0; i < columns.length; i++){\r\n                let total = 0;\r\n                const valueKey = columns[i]['key'];\r\n                for(let j = 0; j < data.length; j++){\r\n                    const value = parseFloat(data[j][valueKey]);\r\n                    if(!isNaN(value)){\r\n                        total += value;\r\n                    }else{\r\n                        total = 'NaN';\r\n                        break;\r\n                    }\r\n                }\r\n                totalRow.push(total);\r\n            }\r\n            return totalRow;\r\n        }\r\n        render(){\r\n            return (\r\n                <Table columns={columns} data={data} summaryRender={this.summaryRender.bind(this)} summaryText={<Icon type=\"math\"/>} bordered />\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports='### Basic\nA simple Tabs.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Tabs defaultActiveIndex={2}>\n                    <Tabs.Pane label="Tab 1">\n                        Content of Tab 1\n                    </Tabs.Pane>\n                    <Tabs.Pane label="Tab 2">\n                        Content of Tab 2\n                    </Tabs.Pane>\n                    <Tabs.Pane label="Tab 3">\n                        Content of Tab 3\n                    </Tabs.Pane>\n                </Tabs>\n            )\n        }\n    }    \n```'},function(n,e){n.exports='### Card style\nDisplay in card style.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Row>\n                    <Col xs={24} sm={24} md={24} lg={12}>\n                        <Tabs type="card" closable>\n                            <Tabs.Pane label="Tab 1">\n                                Content of Tab1\n                            </Tabs.Pane>\n                            <Tabs.Pane disabled label="Tab 2">\n                                Content of Tab2\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 3">\n                                Content of Tab3\n                            </Tabs.Pane>\n                        </Tabs>\n                    </Col>\n                    <Col xs={24} sm={24} md={24} lg={12} style={{height: 240}}>\n                        <Tabs mode="vertical" type="card" closable>\n                            <Tabs.Pane label="Tab 1">\n                                Content of Tab1\n                            </Tabs.Pane>\n                            <Tabs.Pane disabled label="Tab 2">\n                                Content of Tab2\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 3">\n                                Content of Tab3\n                            </Tabs.Pane>\n                        </Tabs>\n                    </Col>\n                </Row>\n            )\n        }\n    }    \n```'},function(n,e){n.exports='### Disabled tab\nDisable tab.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Row>\n                    <Col xs={24} sm={24} md={12} lg={12}>\n                        <Tabs>\n                            <Tabs.Pane label="Tab 1">\n                                Content of Tab 1\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 2" disabled>\n                                Content of Tab 2\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 3">\n                                Content of Tab 3\n                            </Tabs.Pane>\n                        </Tabs>\n                    </Col>\n                    <Col xs={24} sm={24} md={12} lg={12}>\n                        <Tabs mode="vertical" style={{height: 168}}>\n                            <Tabs.Pane label="Tab 1">\n                                Content of Tab 1\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 2" disabled>\n                                Content of Tab 2\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 3">\n                                Content of Tab 3\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 4">\n                                Content of Tab 4\n                            </Tabs.Pane>\n                            <Tabs.Pane label="Tab 5">\n                                Content of Tab 5\n                            </Tabs.Pane>\n                        </Tabs>\n                    </Col>\n                </Row>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### Addable and closable\nYou can add and remove tab easily.\n```javascript\n    class Demo extends React.Component {\n        constructor(){\n            super();\n            this.state = {\n                tabs: [{\n                    'label': 'Tab 1',\n                    'content': 'Content of Tab 1'\n                },{\n                    'label': 'Tab 2',\n                    'content': 'Content of Tab 2' \n                }]\n            }\n            this.addTab = this.addTab.bind(this);\n            this.handleRemove = this.handleRemove.bind(this);\n            this.handleChange = this.handleChange.bind(this);\n        }\n\n        addTab(){\n            this.setState(({tabs}) => {\n                return {\n                    tabs: tabs.concat([{\n                        'label': 'New Tab',\n                        'content': 'Content of new Tab'\n                    }])\n                }\n            })\n        }\n\n        handleChange(currentIndex: Number, prevIndex: Number){\n            console.log(`currentIndex:${currentIndex}, prevIndex: ${prevIndex}`);\n        }\n\n        handleRemove(currentIndex: Number, removedIndex: Number){\n            this.setState(({tabs}) => {\n                return {\n                    tabs: tabs.filter((tab, i) => i !== removedIndex)\n                }\n            });\n            console.log(`currentIndex:${currentIndex}, removedIndex:${removedIndex}`);\n        }\n\n        render(){\n            return (\n                <div className=\"demo-tabs\">\n                    <Button type=\"primary\" onClick={this.addTab}>Add Tab</Button>\n                    <Tabs closable onRemove={this.handleRemove} onChange={this.handleChange}>\n                        {this.state.tabs.map((tab, i) => {\n                            return <Tabs.Pane key={`cmr-tabs-pane-${i}`} label={tab.label}>{tab.content}</Tabs.Pane>\n                        })}\n                    </Tabs>\n                    <Tabs closable type=\"card\" onRemove={this.handleRemove} onChange={this.handleChange}>\n                        {this.state.tabs.map((tab, i) => {\n                            return <Tabs.Pane key={`cmr-tabs-pane-${i}`} label={tab.label}>{tab.content}</Tabs.Pane>\n                        })}\n                    </Tabs>\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports="## Tabs\nTo sum up and display a large amount of content.\n### Examples\n@@---------------@@\n### API\n#### Tabs\nproperty | description | type | default\n-----|------| ---- | ---\ndefaultActiveIndex | default active index of tab | ```Number``` | -\nmode | the direction mode of tabs | ```'horizontal'丨'vertical'``` | ```'horizontal'```\ntype | the display style of tabs | ```'line'丨'card'``` | ```'line'```\nclosable | indicate whether tab can be closed | ```Boolean``` | ```false```\nonChange | the callback function triggered by change of active index | ```(currentIndex: Number, prevIndex: Number) => {}``` | -\nonRemove | the callback function triggered by tab closing | ```(currentIndex: Number, removedIndex: Number) => {} ``` | -\nonTabClick | the callback function triggered by tab click | ```(tabIndex: Number) => {}``` | -\nonPrev | the callback function triggered by click of prev button | ```Function``` | -\nonNext | the callback function triggered by click of next button | ```Function``` | -\n\n#### Tabs.Pane\nproperty | description | type | default\n-----|------| ---- | ---\nlabel | the label of tab | ```String丨ReactNode``` | -\ndisabled | disable tab | ```Boolean``` | ```false```"},function(n,e){n.exports='### Vertical\nDisplay vertically.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Tabs mode="vertical" style={{height: 168}}>\n                    <Tabs.Pane label="Tab 1">\n                        Content of Tab 1\n                    </Tabs.Pane>\n                    <Tabs.Pane label="Tab 2">\n                        Content of Tab 2\n                    </Tabs.Pane>\n                    <Tabs.Pane label="Tab 3">\n                        Content of Tab 3\n                    </Tabs.Pane>\n                    <Tabs.Pane label="Tab 4">\n                        Content of Tab 4\n                    </Tabs.Pane>\n                    <Tabs.Pane label="Tab 5">\n                        Content of Tab 5\n                    </Tabs.Pane>\n                </Tabs>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 基础用法\r\n简单的选项卡。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Tabs defaultActiveIndex={2}>\r\n                    <Tabs.Pane label="选项页 1">\r\n                        选项页1的内容\r\n                    </Tabs.Pane>\r\n                    <Tabs.Pane label="选项页 2">\r\n                        选项页2的内容\r\n                    </Tabs.Pane>\r\n                    <Tabs.Pane label="选项页 3">\r\n                        选项页3的内容\r\n                    </Tabs.Pane>\r\n                </Tabs>\r\n            )\r\n        }\r\n    }    \r\n```'},function(n,e){n.exports='### 卡片模式\r\n选项卡以卡片模式展示。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Row>\r\n                    <Col xs={24} sm={24} md={24} lg={12}>\r\n                        <Tabs type="card" closable>\r\n                            <Tabs.Pane label="选项页 1">\r\n                                选项页1的内容\r\n                            </Tabs.Pane>\r\n                            <Tabs.Pane disabled label="选项页 2">\r\n                                选项页2的内容\r\n                            </Tabs.Pane>\r\n                            <Tabs.Pane label="选项页 3">\r\n                                选项页3的内容\r\n                            </Tabs.Pane>\r\n                        </Tabs>\r\n                    </Col>\r\n                    <Col xs={24} sm={24} md={24} lg={12} style={{height: 240}}>\r\n                        <Tabs mode="vertical" type="card" closable>\r\n                            <Tabs.Pane label="选项页 1">\r\n                                选项页1的内容\r\n                            </Tabs.Pane>\r\n                            <Tabs.Pane disabled label="选项页 2">\r\n                                选项页2的内容\r\n                            </Tabs.Pane>\r\n                            <Tabs.Pane label="选项页 3">\r\n                                选项页3的内容\r\n                            </Tabs.Pane>\r\n                        </Tabs>\r\n                    </Col>\r\n                </Row>\r\n            )\r\n        }\r\n    }    \r\n```'},function(n,e){n.exports='### 禁用\n禁用选项卡。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Row>\n                    <Col xs={24} sm={24} md={12} lg={12}>\n                        <Tabs>\n                            <Tabs.Pane label="选项页 1">\n                                选项页1的内容\n                            </Tabs.Pane>\n                            <Tabs.Pane label="选项页 2" disabled>\n                                选项页2的内容\n                            </Tabs.Pane>\n                            <Tabs.Pane label="选项页 3">\n                                选项页3的内容\n                            </Tabs.Pane>\n                        </Tabs>\n                    </Col>\n                    <Col xs={24} sm={24} md={12} lg={12}>\n                        <Tabs mode="vertical" style={{height: 168}}>\n                            <Tabs.Pane label="选项页 1">\n                                选项页1的内容\n                            </Tabs.Pane>\n                            <Tabs.Pane label="选项页 2" disabled>\n                                选项页2的内容\n                            </Tabs.Pane>\n                            <Tabs.Pane label="选项页 3">\n                                选项页3的内容\n                            </Tabs.Pane>\n                            <Tabs.Pane label="选项页 4">\n                                选项页4的内容\n                            </Tabs.Pane>\n                            <Tabs.Pane label="选项页 5">\n                                选项页5的内容\n                            </Tabs.Pane>\n                        </Tabs>\n                    </Col>\n                </Row>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 动态添加/移除\r\n选项页数量随外部数据变化。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                tabs: [{\r\n                    'label': '选项页 1',\r\n                    'content': '选项页1的内容'\r\n                },{\r\n                    'label': '选项页 2',\r\n                    'content': '选项页2的内容' \r\n                }]\r\n            }\r\n            this.addTab = this.addTab.bind(this);\r\n            this.handleRemove = this.handleRemove.bind(this);\r\n            this.handleChange = this.handleChange.bind(this);\r\n        }\r\n\r\n        addTab(){\r\n            this.setState(({tabs}) => {\r\n                return {\r\n                    tabs: tabs.concat([{\r\n                        'label': '新的选项页',\r\n                        'content': '新的选项页内容'\r\n                    }])\r\n                }\r\n            })\r\n        }\r\n\r\n        handleChange(currentIndex: Number, prevIndex: Number){\r\n            console.log(`当前索引值:${currentIndex}, 上一个激活索引值: ${prevIndex}`);\r\n        }\r\n\r\n        handleRemove(currentIndex: Number, removedIndex: Number){\r\n            this.setState(({tabs}) => {\r\n                return {\r\n                    tabs: tabs.filter((tab, i) => i !== removedIndex)\r\n                }\r\n            });\r\n            console.log(`当前索引值:${currentIndex}, 移除索引值:${removedIndex}`);\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div className=\"demo-tabs\">\r\n                    <Button type=\"primary\" onClick={this.addTab}>新增选项页</Button>\r\n                    <Tabs closable onRemove={this.handleRemove} onChange={this.handleChange}>\r\n                        {this.state.tabs.map((tab, i) => {\r\n                            return <Tabs.Pane key={`cmr-tabs-pane-${i}`} label={tab.label}>{tab.content}</Tabs.Pane>\r\n                        })}\r\n                    </Tabs>\r\n                    <Tabs closable type=\"card\" onRemove={this.handleRemove} onChange={this.handleChange}>\r\n                        {this.state.tabs.map((tab, i) => {\r\n                            return <Tabs.Pane key={`cmr-tabs-pane-${i}`} label={tab.label}>{tab.content}</Tabs.Pane>\r\n                        })}\r\n                    </Tabs>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="## Tabs 选项卡\r\n对大量内容进行归纳和展示。\r\n### 代码示例\r\n@@---------------@@\r\n### API\r\n#### Tabs\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\ndefaultActiveIndex | 默认激活选项的索引值 | ```Number``` | -\r\nmode | 选项卡方向 | ```'horizontal'丨'vertical'``` | ```'horizontal'```\r\ntype | 选项卡表现形式 | ```'line'丨'card'``` | ```'line'```\r\nclosable | 选项卡是否可移除 | ```Boolean``` | ```false```\r\nonChange | 当前展开项改变时触发 | ```(currentIndex: Number, prevIndex: Number) => {}``` | -\r\nonRemove | 移除选项页时触发 | ```(currentIndex: Number, removedIndex: Number) => {} ``` | -\r\nonTabClick | 点击选项时触发 | ```(tabIndex: Number) => {}``` | -\r\nonPrev | 点击上一页时触发 | ```Function``` | -\r\nonNext | 点击下一页时触发 | ```Function``` | -\r\n\r\n#### Tabs.Pane\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nlabel | 选项的标签 | ```String丨ReactNode``` | -\r\ndisabled | 是否禁用该项 | ```Boolean``` | ```false```"},function(n,e){n.exports='### 垂直模式\r\n选项卡纵向展示。\r\n```javascript\r\n    class Demo extends React.Component {\r\n        render(){\r\n            return (\r\n                <Tabs mode="vertical" style={{height: 168}}>\r\n                    <Tabs.Pane label="选项页 1">\r\n                        选项页1的内容\r\n                    </Tabs.Pane>\r\n                    <Tabs.Pane label="选项页 2">\r\n                        选项页2的内容\r\n                    </Tabs.Pane>\r\n                    <Tabs.Pane label="选项页 3">\r\n                        选项页3的内容\r\n                    </Tabs.Pane>\r\n                    <Tabs.Pane label="选项页 4">\r\n                        选项页4的内容\r\n                    </Tabs.Pane>\r\n                    <Tabs.Pane label="选项页 5">\r\n                        选项页5的内容\r\n                    </Tabs.Pane>\r\n                </Tabs>\r\n            )\r\n        }\r\n    }\r\n```'},function(n,e){n.exports="### Basic\r\nA simple Toggle.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        render(){\r\n            return <Toggle defaultChecked={true} />\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Controlled Toggle\r\nChecked state of Toggle is controlled by other component.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                checked: true\r\n            }\r\n        }\r\n\r\n        handleChange(checked: Boolean){\r\n            this.setState({\r\n                checked\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Checkbox checked={this.state.checked} onChange={this.handleChange.bind(this)}>{this.state.checked ? 'ON': 'OFF'}</Checkbox>\r\n                    <Toggle checked={this.state.checked} onChange={this.handleChange.bind(this)} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### Disabled Toggle\r\nDisable Toggle.\r\n```javascript\r\n    class Demo extends React.Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                disabled: true\r\n            }\r\n        }\r\n\r\n        handleChange(checked: Boolean){\r\n            this.setState({\r\n                disabled: checked\r\n            })\r\n        }\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Checkbox checked={this.state.disabled} onChange={this.handleChange.bind(this)}>Disable Toggle</Checkbox>\r\n                    <Toggle disabled={this.state.disabled} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="## Toggle\r\nTo select true or false.\r\n@@--------@@\r\n### API\r\nproperty | description | type | default\r\n-----|------| ---- | ---\r\ndefaultChecked | default state of toggle | ```Boolean``` | ```false```\r\nchecked | indicate whether toggle is checked | ```Boolean``` | -\r\ndisabled | disable switch | ```Boolean``` | ```false```\r\noffText | the text of unchecked toggle | ```String丨ReactNode``` | -\r\nonText | the text of checked toggle | ```String丨ReactNode``` | -\r\nonChange | the callback function triggered by change of checked state | ```(on: Boolean) => {}``` | -"},function(n,e){n.exports='### Template\r\nCustomized text of Toggle in checked or unchecked state.\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <div>\r\n                    <Toggle onText="On" offText="Off"/>\r\n                    <Toggle onText={<Icon type="success"/>} offText={<Icon type="error"/>}/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="### 基本用法\n简单的开关用法。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return <Toggle defaultChecked={true} />\n        }\n    }\n```"},function(n,e){n.exports="### 受控开关\n开关状态随外部参数变化。\n```javascript\n        class Demo extends React.Component{\n\n        constructor(){\n            super();\n            this.state = {\n                checked: true\n            }\n        }\n\n        handleChange(checked: Boolean){\n            this.setState({\n                checked\n            })\n        }\n\n        render(){\n            return (\n                <div>\n                    <Checkbox checked={this.state.checked} onChange={this.handleChange.bind(this)}>{this.state.checked ? '开启': '关闭'}</Checkbox>\n                    <Toggle checked={this.state.checked} onChange={this.handleChange.bind(this)} />\n                </div>\n            )\n        }\n\n    }\n```"},function(n,e){n.exports="### 禁用\n设置```disabled```使开关失效。\n```javascript\n    class Demo extends React.Component{\n\n        constructor(){\n            super();\n            this.state = {\n                disabled: true\n            }\n        }\n\n        handleChange(checked: Boolean){\n            this.setState({\n                disabled: checked\n            })\n        }\n\n        render(){\n            return (\n                <div>\n                    <Checkbox checked={this.state.disabled} onChange={this.handleChange.bind(this)}>禁用开关</Checkbox>\n                    <Toggle disabled={this.state.disabled} />\n                </div>\n            )\n        }\n\n    }\n```"},function(n,e){n.exports="## Toggle 开关\n开关用于切换一对互斥的逻辑。\n@@--------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\ndefaultChecked | 默认开启状态 | ```Boolean``` | ```false```\nchecked | 是否开启 | ```Boolean``` | -\ndisabled | 是否禁用 | ```Boolean``` | ```false```\noffText | 关闭时显示的文本 | ```String丨ReactNode``` | -\nonText | 激活时显示的文本 | ```String丨ReactNode``` | -\nonChange | 当前展开项改变时触发, 参数```on```为当前激活状态 | ```(on: Boolean) => {}``` | -\n"},function(n,e){n.exports='### 自定义模板\n设置```onText```和```offText```可以自定义开启或关闭时的文字或图标。\n```javascript\n    class Demo extends React.Component {\n\n        render(){\n            return (\n                <div>\n                    <Toggle onText="开" offText="关"/>\n                    <Toggle onText={<Icon type="success"/>} offText={<Icon type="error"/>}/>\n                </div>\n            )\n        }\n\n    }\n```'},function(n,e){n.exports='### Basic\nA simple tooltip.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Tooltip content="some text">\n                    <Button link>hover me</Button>\n                </Tooltip>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Delay\nTimeout of apperance or disapperance.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-tooltip-group">\n                    <Tooltip enterTimeout={2000} trigger="click" content="Apperance in 2000ms">\n                        <Button type="info">Apperance in 2000ms</Button>                \n                    </Tooltip>\n                    <Tooltip leaveTimeout={2000} trigger="click" content="Disapperance in 2000ms">\n                        <Button type="info">Disapperance in 2000ms</Button>\n                    </Tooltip>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Tooltip\nA component to show tips in popup.\n### Examples\n@@-------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\noffset | the gap between arrow and target | ```Number``` | ```0```\nplacement | the position of popup | ```'top-center'丨'bottom-center'丨'left-center'丨'right-center'丨'top-left'丨'top-right'丨'bottom-left'丨'bottom-right'丨'left-top'丨'right-top'丨'left-bottom'丨'right-bottom'``` | ```'top-center'```\ncontent | tip content | ```String丨ReactNode``` | -\nvisible | visibility of tooltip | ```Boolean``` | ```false```\nenterTimeout | appearance delay. In miliseconds. | ```Number``` | ```0```\nleaveTimeout | disapperance delay. In miliseconds. | ```Number``` | ```0```\ntrigger | The way to show and hide tooltip. | ```'hover'丨'click'丨'focus'``` | ```'hover'```\nonVisibleChange | the callback function triggered by visibility change | ```(visible: Boolean)=>{}``` | -"},function(n,e){n.exports='### Placement\nYou can customize the popup position.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-tooltip-grid">\n                    <Row>\n                        <Col offset={3} span={6}>\n                            <Tooltip placement="top-left" content="top-left" offset={6}>\n                                <Button link type="info">top-left</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="top-center" content="top-center" offset={6}>\n                                <Button link type="info">top-center</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="top-right" content="top-right" offset={6}>\n                                <Button link type="info">top-right</Button>\n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <Tooltip placement="left-top" content="left-top" offset={6}>\n                                <Button link type="info">left-top</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6} push={12}>\n                            <Tooltip placement="right-top" content="right" offset={6}>\n                                <Button link type="info">right-top</Button>                        \n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <Tooltip placement="left-center" content="left-center" offset={6}>\n                                <Button link type="info">left-center</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6} push={12}>\n                            <Tooltip placement="right-center" content="right-center" offset={6}>\n                                <Button link type="info">right-center</Button>                        \n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <Tooltip placement="left-bottom" content="left-bottom" offset={6}>\n                                <Button link type="info">left-bottom</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6} push={12}>\n                            <Tooltip placement="right-bottom" content="right" offset={6}>\n                                <Button link type="info">right-bottom</Button>                        \n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col offset={3} span={6}>\n                            <Tooltip placement="bottom-left" content="bottom-left" offset={6}>\n                                <Button link type="info">bottom-left</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="bottom-center" content="bottom-center" offset={6}>\n                                <Button link type="info">bottom-center</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="bottom-right" content="bottom-right" offset={6}>\n                                <Button link type="info">bottom-right</Button>\n                            </Tooltip>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Trigger\nThere are two ways to control visibility of tooltip.\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Tooltip trigger="click" content="click to show or hide">\n                    <Button link>click me</Button>            \n                </Tooltip>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 基本用法\n简单的文字提示。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Tooltip content="some text">\n                    <Button link>hover me</Button>\n                </Tooltip>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 延迟\n设置```enterTimeout```和```leaveTimeout```可以控制出现/消失的延时。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-tooltip-group">\n                    <Tooltip enterTimeout={2000} trigger="click" content="进入延迟2000ms">\n                        <Button type="info">2s后出现</Button>                \n                    </Tooltip>\n                    <Tooltip leaveTimeout={2000} trigger="click" content="消失延迟2000ms">\n                        <Button type="info">2s后消失</Button>\n                    </Tooltip>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Tooltip 文字气泡\n悬浮于目标节点上, 用于提示用户。\n### 代码示例\n@@-------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\noffset | 气泡箭头与目标元素之间的间隙 | ```Number``` | ```0```\nplacement | 气泡出现的位置 | ```'top-center'丨'bottom-center'丨'left-center'丨'right-center'丨'top-left'丨'top-right'丨'bottom-left'丨'bottom-right'丨'left-top'丨'right-top'丨'left-bottom'丨'right-bottom'``` | ```'top-center'```\ncontent | 气泡填充的内容 | ```String丨ReactNode``` | -\nvisible | 气泡的显隐 | ```Boolean``` | ```false```\nenterTimeout | 显示的延迟时间, 单位毫秒 | ```Number``` | ```0```\nleaveTimeout | 消失的延迟时间, 单位毫秒 | ```Number``` | ```0```\ntrigger | 触发方式 | ```'hover'丨'click'丨'focus'``` | ```'hover'```\nonVisibleChange | 显隐切换时触发, 参数```visible```为当前显隐状态 | ```(visible: Boolean)=>{}``` | -"},function(n,e){n.exports='### 冒泡位置\n设置```placement```可以控制气泡出现的位置\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <div className="demo-tooltip-grid">\n                    <Row>\n                        <Col offset={3} span={6}>\n                            <Tooltip placement="top-left" content="top-left 顶部左侧" offset={6}>\n                                <Button link type="info">top-left</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="top-center" content="top-center 顶部居中" offset={6}>\n                                <Button link type="info">top-center</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="top-right" content="top-right 顶部右侧" offset={6}>\n                                <Button link type="info">top-right</Button>\n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <Tooltip placement="left-top" content="left-top 左侧靠上" offset={6}>\n                                <Button link type="info">left-top</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6} push={12}>\n                            <Tooltip placement="right-top" content="right 右侧靠上" offset={6}>\n                                <Button link type="info">right-top</Button>                        \n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <Tooltip placement="left-center" content="left-center 左侧居中" offset={6}>\n                                <Button link type="info">left-center</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6} push={12}>\n                            <Tooltip placement="right-center" content="right-center 右侧居中" offset={6}>\n                                <Button link type="info">right-center</Button>                        \n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col span={6}>\n                            <Tooltip placement="left-bottom" content="left-bottom 左侧靠下" offset={6}>\n                                <Button link type="info">left-bottom</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6} push={12}>\n                            <Tooltip placement="right-bottom" content="right 右侧靠下" offset={6}>\n                                <Button link type="info">right-bottom</Button>                        \n                            </Tooltip>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col offset={3} span={6}>\n                            <Tooltip placement="bottom-left" content="bottom-left 底部左侧" offset={6}>\n                                <Button link type="info">bottom-left</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="bottom-center" content="bottom-center 底部居中" offset={6}>\n                                <Button link type="info">bottom-center</Button>\n                            </Tooltip>\n                        </Col>\n                        <Col span={6}>\n                            <Tooltip placement="bottom-right" content="bottom-right 底部右侧" offset={6}>\n                                <Button link type="info">bottom-right</Button>\n                            </Tooltip>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 触发方式\n设置```trigger```可以控制由何事件显示/隐藏气泡。\n```javascript\n    class Demo extends React.Component {\n        render(){\n            return (\n                <Tooltip trigger="click" content="通过click显示/隐藏气泡">\n                    <Button link>click me</Button>            \n                </Tooltip>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 基础用法\r\n简单的树形控件。\r\n```javascript\r\n    class Demo extends React.Component {\r\n\r\n        render(){\r\n            return (\r\n                <Tree>\r\n                    <Tree.Branch label="1">\r\n                        <Tree.Branch label="1-1"></Tree.Branch>\r\n                        <Tree.Branch label="1-2"></Tree.Branch>\r\n                    </Tree.Branch>\r\n                </Tree>\r\n            )\r\n        }\r\n\r\n    }\r\n```'},function(n,e){n.exports="## 面包屑\r\n通常置于页面顶层，用于往前导航。\r\n### 示例\r\n@@--------@@\r\n### API\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nautoplay | 是否自动播放 | ```Boolean``` | ```true```\r\ninterval | 轮播的时间间隔, 以毫秒为单位 | ```Number``` | ```3000```\r\nspeed | 切换的时间间隔, 以毫秒为单位 | ```Number``` | ```300```\r\nhoverToStop | 鼠标悬停在轮播上时是否停止自动播放 | ```Boolean``` | ```true``` \r\nshowController | 是否显示左右两侧控制按钮 | ```Boolean``` | ```true```\r\nshowIndicators | 是否显示指示器 | ```Boolean``` | ```true```\r\neffect | 轮播动画效果 | ```'slide'丨'fade'``` | ```'slide'```\r\nonChange | 当前播放的内容切换后触发, 参数为当前项的索引值 | ```(currentIndex: Number) => {}``` | -"},function(n,e){n.exports='### Avatar\nUploading user\'s avatars is a common case. You can validate the size and type of file before uploading.\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                dataUrl: \'\',\n                progress: 0\n            }\n        }\n\n        beforeUpload(file: File){\n            const reg = /\\.(jpg)|(jpeg)|(png)$/;\n            if(!reg.test(file.name)){\n                message.error(\'The type of uploading file is invalid\');\n                return false;\n            }else if(file.size > 2 * 1024 * 1024){\n                message.error(\'The size of uploading must be less than 2 MB\');                \n                return false;\n            }\n            return file;\n        }\n\n        handleSuccess(wrappedFile){\n            this.setState({\n                dataUrl: URL.createObjectURL(wrappedFile.origin),\n                progress:0\n            });\n        }\n\n        handleProgress(wrappedFile){\n            console.log(wrappedFile);\n            this.setState({\n                progress: wrappedFile.progress\n            });\n        }\n\n        render(){\n            let contentNode;\n            if(!this.state.dataUrl){\n                if(this.state.progress){\n                    contentNode = <Progress mode="circle" progress={this.state.progress} />\n                }else{\n                    contentNode = <Icon type="plus"/>\n                }\n            }else{\n                contentNode = <img className="demo-uploader-preview" src={this.state.dataUrl}/>\n            }\n            return (\n                <Upload \n                    name="somekey" \n                    action="//jsonplaceholder.typicode.com/posts/"\n                    accept="image/png, image/jpeg"\n                    showUploadedList={false}\n                    onError={this.handleSuccess.bind(this)}\n                    onProgress={this.handleProgress.bind(this)}\n                    beforeUpload={this.beforeUpload.bind(this)}\n                >\n                    <div className="demo-uploader-avatar" \n                        style={{\n                            borderColor: this.state.dataUrl ? \'transparent\' : \'#fff\'\n                        }}\n                    >\n\n                        {contentNode}\n                    </div>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Basic\nA simple Upload. Attribute ```action``` is required.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Upload action="//jsonplaceholder.typicode.com/posts/">\n                    <Button type="primary">Click to upload</Button>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Drag and drop\nFiles can be dragged over specific area and dropped to upload by setting attribute ```draggable```.\n```javascript\n    class Demo extends React.Component{\n\n        constructor(){\n            super();\n            this.state = {\n                hover: false\n            }\n        }\n\n        handleDragOver(){\n            this.setState({\n                hover: true\n            })\n        }\n\n        handleDragLeave(){\n            this.setState({\n                hover: false\n            })\n        }\n\n        render(){\n            const classList = [\'demo-uploader-area\'];\n            if(this.state.hover){\n                classList.push(\'demo-uploader-area-hover\');\n            }\n            return (\n                <Upload name="somekey" action="//jsonplaceholder.typicode.com/posts/" draggable\n                    onDragOver={this.handleDragOver.bind(this)}\n                    onDragLeave={this.handleDragLeave.bind(this)}\n                >\n                    <div className={classList.join(\' \')}>\n                        <div className="demo-uploader-area-wrapper">\n                            <Icon type="upload" />                    \n                            <div>Drag to this area and drop</div>\n                            <div>or click to upload</div>\n                        </div>\n                    </div>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### Gallery\nTo upload multiple pictures with a grid of thumbnail. And the picture in each item can be removed and previewed.\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                previewVisible: false,\n                previewUrl: \'\'\n            }\n        }\n\n        handlePreview(file){\n            this.setState({\n                previewVisible: true,\n                previewUrl: file.dataUrl\n            });            \n        }\n\n        render(){\n            return (\n                <div className="demo-uploader-gallery">\n                    <Upload \n                        accept="image/*" \n                        action="//jsonplaceholder.typicode.com/posts/"\n                        listMode="gallery"\n                        onPreview={this.handlePreview.bind(this)}                         \n                    />\n                    <Dialog \n                        visible={this.state.previewVisible} \n                        title="Preview"\n                        width={300}\n                    >\n                        <img style={{width: \'100%\'}} src={this.state.previewUrl} />\n                    </Dialog>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### Request infomation\nThe infomation of HTTP request can be customized by attributes ```data```, ```headers``` or ```withCredentials```.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Upload \n                    action=\"//jsonplaceholder.typicode.com/posts/\"\n                    headers={{\n                        'customized-header': 'some content'\n                    }}\n                    withCredentials\n                    data={{\n                        x: 1,\n                        y: 'qqq'\n                    }}\n                >\n                    <Button type=\"primary\">Click to upload</Button>\n                </Upload>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### Image list\nThumbnail list only supported by picture uploading.\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Upload name="somekey" listMode="image-list"                                          action="//jsonplaceholder.typicode.com/posts/">\n                    <Button type="primary">Click to upload</Button>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Upload\nUpload files to the server.\n@@-------@@\n### API\nproperty | description | type | default\n-----|------| ---- | ---\naction | uploading url. required | ```String``` | -\nname | the key of files in request body. | ```String``` | ```'file'```\nmultiple | indicate whether files can be selected multiply. | ```Boolean``` | ```false```\ndraggable | indicate if files can be dragged to upload | ```Boolean``` | ```false```\ndisabled | Disable upload | ```Boolean``` | ```false```\naccept | the filted file type. Reference to [accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept) | ```String``` | -\nheaders | customized request headers | ```Object``` | -\ndata | customized request body | ```Object丨(file: File): Object => {}``` | -\nautoUpload | indicate whether to upload automatically after selection | ```Boolean``` | ```false```\nmaxCount | maximal count of uploading pictures. Only matters on condition of ```listMode='gallery'``` | ```Number``` | ```9```\nshowUploadedList | indicate whether to show upload list | ```Boolean``` | ```true```\nlistMode | display style of upload list | ```'text-list'丨'image-list'丨'gallery'``` | ```text-list```\nbeforeUpload | the hook function triggered before uploading.It can be used to validate the size or type of file. If type of return value is ```false``` or rejected promise, uploading will be stopped.  | ```(file: File): File丨Promise丨Boolean => {}``` | -\nonDragOver | the callback function will be triggered when file is dragged over the uploading area | ```(evt: React.SyntheticEvent) => {} ``` | -\nonDragLeave | the callback function will be triggered when file is dragged out of the uploading area | ```(evt: React.SyntheticEvent) => {} ``` | -\nonDrop | the callback function will be triggered when file is dropped to the uploading area | ```(files: FileList) => {}``` | -\nonProgress | the callback function triggered by uploading | ```(file: WrappedFile) => {}``` | -\nonSuccess | the callback function triggered by successful uploading | ```(file: WrappedFile) => {}``` | -\nonError | the callback function triggered by failed uploading | ```(file: WrappedFile) => {}``` | -\n"},function(n,e){n.exports="### Manual uploading\nSetting attribute ```autoUpload``` to ```false``` will prevent automatical uploading.\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                fetching: false,\n                files: []\n            }\n        }\n\n        handleRemove(file){\n            this.setState(({files}) => {\n                return {\n                    files: files.filter(f => f.uuid !== file.uuid)\n                }\n            });\n        }\n\n        request(){\n            const xhr = new XMLHttpRequest();\n            const formData = new FormData();\n            this.state.files.forEach(f => {\n                formData.append('someKey', f);\n            });\n            xhr.open('post', '//jsonplaceholder.typicode.com/posts/', true);\n            xhr.send(formData);\n            this.setState({\n                fetching: true\n            })\n            xhr.onload = evt => {\n                if(evt.status >= 200 && evt.status < 300){\n                    message.success('Upload successfully');\n                    this.setState({\n                        files: []\n                    });\n                }else{\n                    message.error('Upload mistakenly');\n                }\n                this.setState({\n                    fetching: false\n                })\n            }\n        }\n\n        render(){\n            const { files, fetching } = this.state;\n            return (\n                <div className=\"demo-uploader-manual\">\n                    <Upload        \n                        files={files} \n                        name=\"somekey\"                                          action=\"//jsonplaceholder.typicode.com/posts/\"\n                        autoUpload={false}\n                        onRemove={this.handleRemove.bind(this)}\n                    >\n                        <Button icon=\"document\" type=\"info\">Pick files</Button>\n                    </Upload>\n                    <Button loading={fetching} type=\"primary\" onClick={this.request.bind(this)}>\n                        {fetching ? 'Uploading' : 'Start upload'}\n                    </Button>\n                </div>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 上传头像\n设置```beforeUpload```可以限制上传大小和格式, 建议配合```accept```过滤选择文件的格式。\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                dataUrl: \'\',\n                progress: 0\n            }\n        }\n\n        beforeUpload(file: File){\n            const reg = /\\.(jpg)|(jpeg)|(png)$/;\n            if(!reg.test(file.name)){\n                message.error(\'上传图片格式只能是png、jpg或jpeg\');\n                return false;\n            }else if(file.size > 2 * 1024 * 1024){\n                message.error(\'上传图片大小必须小于2MB\');                \n                return false;\n            }\n            return file;\n        }\n\n        handleSuccess(wrappedFile){\n            this.setState({\n                dataUrl: URL.createObjectURL(wrappedFile.origin),\n                progress:0\n            });\n        }\n\n        handleProgress(wrappedFile){\n            console.log(wrappedFile);\n            this.setState({\n                progress: wrappedFile.progress\n            });\n        }\n\n        render(){\n            let contentNode;\n            if(!this.state.dataUrl){\n                if(this.state.progress){\n                    contentNode = <Progress mode="circle" progress={this.state.progress} />\n                }else{\n                    contentNode = <Icon type="plus"/>\n                }\n            }else{\n                contentNode = <img className="demo-uploader-preview" src={this.state.dataUrl}/>\n            }\n            return (\n                <Upload \n                    name="somekey" \n                    action="//jsonplaceholder.typicode.com/posts/"\n                    accept="image/png, image/jpeg"\n                    showUploadedList={false}\n                    onError={this.handleSuccess.bind(this)}\n                    onProgress={this.handleProgress.bind(this)}\n                    beforeUpload={this.beforeUpload.bind(this)}\n                >\n                    <div className="demo-uploader-avatar" \n                        style={{\n                            borderColor: this.state.dataUrl ? \'transparent\' : \'#fff\'\n                        }}\n                    >\n\n                        {contentNode}\n                    </div>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 基础用法\n简单的上传, 属性```action```必选。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Upload action="//jsonplaceholder.typicode.com/posts/">\n                    <Button type="primary">点击上传</Button>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 拖放上传\n设置```draggable```属性可支持拖放上传, 将文件拖拽至目标区域释放即可。\n```javascript\n    class Demo extends React.Component{\n\n        constructor(){\n            super();\n            this.state = {\n                hover: false\n            }\n        }\n\n        handleDragOver(){\n            this.setState({\n                hover: true\n            })\n        }\n\n        handleDragLeave(){\n            this.setState({\n                hover: false\n            })\n        }\n\n        render(){\n            const classList = [\'demo-uploader-area\'];\n            if(this.state.hover){\n                classList.push(\'demo-uploader-area-hover\');\n            }\n            return (\n                <Upload name="somekey" action="//jsonplaceholder.typicode.com/posts/" draggable\n                    onDragOver={this.handleDragOver.bind(this)}\n                    onDragLeave={this.handleDragLeave.bind(this)}\n                >\n                    <div className={classList.join(\' \')}>\n                        <div className="demo-uploader-area-wrapper">\n                            <Icon type="upload" />                    \n                            <div>拖拽至此释放可上传</div>\n                            <div>或点击上传</div>\n                        </div>\n                    </div>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports='### 相册\n用于上传多个图片,用户可以看到图片缩略图列表并且可以预览大图。\n```javascript\n    class Demo extends React.Component{\n        constructor(){\n            super();\n            this.state = {\n                previewVisible: false,\n                previewUrl: \'\'\n            }\n        }\n\n        handlePreview(file){\n            this.setState({\n                previewVisible: true,\n                previewUrl: file.dataUrl\n            });            \n        }\n\n        render(){\n            return (\n                <div className="demo-uploader-gallery">\n                    <Upload \n                        accept="image/*" \n                        action="//jsonplaceholder.typicode.com/posts/"\n                        listMode="gallery"\n                        onPreview={this.handlePreview.bind(this)}                         \n                    />\n                    <Dialog \n                        visible={this.state.previewVisible} \n                        title="预览图片"\n                        width={300}\n                    >\n                        <img style={{width: \'100%\'}} src={this.state.previewUrl} />\n                    </Dialog>\n                </div>\n            )\n        }\n    }\n```'},function(n,e){n.exports="### 请求信息\n设置```headers```可以自定义请求头;设置```data```可以添加除```name```以外的请求体。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Upload \n                    action=\"//jsonplaceholder.typicode.com/posts/\"\n                    headers={{\n                        'customized-header': 'some content'\n                    }}\n                    data={{\n                        x: 1,\n                        y: 'qqq'\n                    }}\n                >\n                    <Button type=\"primary\">点击上传</Button>\n                </Upload>\n            )\n        }\n    }\n```"},function(n,e){n.exports='### 图片列表\n上传图片可生成对应的缩略图列表。\n```javascript\n    class Demo extends React.Component{\n        render(){\n            return (\n                <Upload name="somekey" listMode="image-list"                                          action="//jsonplaceholder.typicode.com/posts/">\n                    <Button type="primary">点击上传</Button>\n                </Upload>\n            )\n        }\n    }\n```'},function(n,e){n.exports="## Upload 上传\n用于将客户端文件发送到服务器端。\n@@-------@@\n### API\n属性 | 说明 | 类型 | 默认值\n-----|------| ---- | ---\naction | 上传的url地址, 必填 | ```String``` | -\nname | 文件列表对应的请求体key值 | ```String``` | ```'file'```\nmultiple | 是否可以上传多个文件 | ```Boolean``` | ```false```\ndraggable | 是否支持拖放上传 | ```Boolean``` | ```false```\ndisabled | 是否禁用 | ```Boolean``` | ```false```\naccept | 同原生```input[type=file]```, 定义可上传的文件类型 | ```String``` | -\nheaders | 自定义请求头 | ```Object``` | -\ndata | 自定义请求主体 | ```Object丨(file: File): Object => {}``` | -\nautoUpload | 是否选择后自动上传 | ```Boolean``` | ```false```\nmaxCount | 上传图片的最大数量。仅在```listMode='gallery'```有效 | ```Number``` | ```9```\nshowUploadedList | 是否显示上传列表 | ```Boolean``` | ```true```\nlistMode | 上传列表的展示模式 | ```'text-list'丨'image-list'丨'gallery'``` | ```text-list```\nbeforeUpload | 文件上传之前的钩子函数, 可用于校验文件类型、大小等, 参数```file```为当前上传文件, 支持```Promise```的返回值; 若返回值为```false```则终止上传 | ```(file: File): File丨Promise丨Boolean => {}``` | -\nonDragOver | 文件拖拽至目标区域时触发 | ```(evt: React.SyntheticEvent) => {} ``` | -\nonDragLeave | 文件拖拽离开目标区域时触发 | ```(evt: React.SyntheticEvent) => {} ``` | -\nonDrop | 文件拖拽至目标区域并释放时触发 | ```(files: FileList) => {}``` | -\nonProgress | 文件正在上传时触发 | ```(file: WrappedFile) => {}``` | -\nonSuccess | 文件上传成功时触发 | ```(file: WrappedFile) => {}``` | -\nonError | 文件上传失败时触发 | ```(file: WrappedFile) => {}``` | -\n"},function(n,e){n.exports="### 手动上传\r\n设置```autoUpload```为```false```可以阻止文件自动上传。\r\n```javascript\r\n    class Demo extends React.Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                fetching: false,\r\n                files: []\r\n            }\r\n        }\r\n\r\n        handleRemove(file){\r\n            this.setState(({files}) => {\r\n                return {\r\n                    files: files.filter(f => f.uuid !== file.uuid)\r\n                }\r\n            });\r\n        }\r\n\r\n        request(){\r\n            const xhr = new XMLHttpRequest();\r\n            const formData = new FormData();\r\n            this.state.files.forEach(f => {\r\n                formData.append('someKey', f);\r\n            });\r\n            xhr.open('post', '//jsonplaceholder.typicode.com/posts/', true);\r\n            xhr.send(formData);\r\n            this.setState({\r\n                fetching: true\r\n            })\r\n            xhr.onload = evt => {\r\n                if(evt.status >= 200 && evt.status < 300){\r\n                    message.success('上传成功');\r\n                    this.setState({\r\n                        files: []\r\n                    });\r\n                }else{\r\n                    message.error('上传失败');\r\n                }\r\n                this.setState({\r\n                    fetching: false\r\n                })\r\n            }\r\n        }\r\n\r\n        render(){\r\n            const { files, fetching } = this.state;\r\n            return (\r\n                <div className=\"demo-uploader-manual\">\r\n                    <Upload        \r\n                        files={files} \r\n                        name=\"somekey\"                                          action=\"//jsonplaceholder.typicode.com/posts/\"\r\n                        autoUpload={false}\r\n                        onRemove={this.handleRemove.bind(this)}\r\n                    >\r\n                        <Button icon=\"document\" type=\"info\">选择文件</Button>\r\n                    </Upload>\r\n                    <Button loading={fetching} type=\"primary\" onClick={this.request.bind(this)}>\r\n                        {fetching ? '正在上传' : '开始上传'}\r\n                    </Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n```"},function(n,e){n.exports="### i18n\nInternalization is aiming to provide lauguage supports for different contries. zh-CN by default.\n### Global configuration\n```javascript\n    class LocaleDemo extends React.Component {\n        render(){\n            return (\n                <LocaleProvider locale={en}>\n                    <YourApp/>\n                </LocaleProvider>\n            )\n        }\n    }\n```\n\n### Single configuration\nCenter components such as ```Pagination```, ```Table```, ```DatePicker``` and so on have property ```locale``` to config internationalization. It's prior to global configuration.\n### Expandation\nYour can customize your own locale configuration file. See [locale](https://github.com/AnacondaY/chimera/blob/master/src/components/i18n/lang/en.js).\n@@--------------@@\n### API\n\n#### LocaleProvider\nproperty | description | type | default\n-----|------| ---- | ---\nlocale | object of locale configuration | ```Object``` | -\n\n#### Configuration\n- Simplified Chinese 'zh-CN'\n- English 'en'\n"},function(n,e){n.exports="### i18n 国际化\r\n国际化是为不同受众提供语言支持。```chimera```默认使用中文语言包。\r\n\r\n### 全局修改\r\n```javascript\r\n    class LocaleDemo extends React.Component {\r\n        render(){\r\n            return (\r\n                <LocaleProvider locale={en}>\r\n                    <YourApp/>\r\n                </LocaleProvider>\r\n            )\r\n        }\r\n    }\r\n```\r\n\r\n### 单独修改\r\n\r\n除在```LocaleProvider```中全局注入国际化对象外, 某些组件如```Pagination```, ```Table```, ```DatePicker```等支持```locale```属性, 其优先级高于全局对象。\r\n\r\n### 语言包扩展\r\n由于小弟才疏学浅, 目前只提供了中英文的语言包, 如需修改和扩充, 请参照[locale](https://github.com/AnacondaY/chimera/blob/master/src/components/i18n/lang/en.js)的格式进行定制。\r\n\r\n@@--------------@@\r\n### API\r\n\r\n#### LocaleProvider\r\n属性 | 说明 | 类型 | 默认值\r\n-----|------| ---- | ---\r\nlocale | 需要注入的语言包对象 | ```Object``` | -\r\n\r\n#### 语言包\r\n- 简体中文 'zh-CN'\r\n- 英语 'en'\r\n"}]));